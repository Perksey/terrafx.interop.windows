<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from shared/hidpi.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="HIDP_KEYBOARD_MODIFIER_STATE" access="public">
            <field name="Anonymous" access="public">
                <type native="_HIDP_KEYBOARD_MODIFIER_STATE::(anonymous union at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/shared/hidpi.h:1728:4)">_Anonymous_e__Union</type>
            </field>
            <field name="LeftControl" access="public">
                <type native="">uint</type>
                <get inlining="aggressive">
                    <code>return Anonymous.Anonymous.LeftControl;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous.Anonymous.LeftControl = value;
        </code>
                </set>
            </field>
            <field name="LeftShift" access="public">
                <type native="">uint</type>
                <get inlining="aggressive">
                    <code>return Anonymous.Anonymous.LeftShift;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous.Anonymous.LeftShift = value;
        </code>
                </set>
            </field>
            <field name="LeftAlt" access="public">
                <type native="">uint</type>
                <get inlining="aggressive">
                    <code>return Anonymous.Anonymous.LeftAlt;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous.Anonymous.LeftAlt = value;
        </code>
                </set>
            </field>
            <field name="LeftGUI" access="public">
                <type native="">uint</type>
                <get inlining="aggressive">
                    <code>return Anonymous.Anonymous.LeftGUI;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous.Anonymous.LeftGUI = value;
        </code>
                </set>
            </field>
            <field name="RightControl" access="public">
                <type native="">uint</type>
                <get inlining="aggressive">
                    <code>return Anonymous.Anonymous.RightControl;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous.Anonymous.RightControl = value;
        </code>
                </set>
            </field>
            <field name="RightShift" access="public">
                <type native="">uint</type>
                <get inlining="aggressive">
                    <code>return Anonymous.Anonymous.RightShift;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous.Anonymous.RightShift = value;
        </code>
                </set>
            </field>
            <field name="RightAlt" access="public">
                <type native="">uint</type>
                <get inlining="aggressive">
                    <code>return Anonymous.Anonymous.RightAlt;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous.Anonymous.RightAlt = value;
        </code>
                </set>
            </field>
            <field name="RigthGUI" access="public">
                <type native="">uint</type>
                <get inlining="aggressive">
                    <code>return Anonymous.Anonymous.RigthGUI;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous.Anonymous.RigthGUI = value;
        </code>
                </set>
            </field>
            <field name="CapsLock" access="public">
                <type native="">uint</type>
                <get inlining="aggressive">
                    <code>return Anonymous.Anonymous.CapsLock;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous.Anonymous.CapsLock = value;
        </code>
                </set>
            </field>
            <field name="ScollLock" access="public">
                <type native="">uint</type>
                <get inlining="aggressive">
                    <code>return Anonymous.Anonymous.ScollLock;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous.Anonymous.ScollLock = value;
        </code>
                </set>
            </field>
            <field name="NumLock" access="public">
                <type native="">uint</type>
                <get inlining="aggressive">
                    <code>return Anonymous.Anonymous.NumLock;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous.Anonymous.NumLock = value;
        </code>
                </set>
            </field>
            <field name="Reserved" access="public">
                <type native="">uint</type>
                <get inlining="aggressive">
                    <code>return Anonymous.Anonymous.Reserved;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous.Anonymous.Reserved = value;
        </code>
                </set>
            </field>
            <field name="ul" access="public">
                <type native="">ref uint</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.ul, 1));
        </code>
                </get>
            </field>
            <struct name="_Anonymous_e__Union" access="public" layout="Explicit">
                <field name="Anonymous" access="public" offset="0">
                    <type native="_HIDP_KEYBOARD_MODIFIER_STATE::(anonymous struct at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/shared/hidpi.h:1729:7)">_Anonymous_e__Struct</type>
                </field>
                <field name="ul" access="public" offset="0">
                    <type native="ULONG">uint</type>
                </field>
                <struct name="_Anonymous_e__Struct" access="public">
                    <field name="_bitfield" access="public">
                        <type native="">uint</type>
                    </field>
                    <field name="LeftControl" access="public">
                        <type native="ULONG : 1">uint</type>
                        <get inlining="aggressive">
                            <code>return <bitfieldName>_bitfield</bitfieldName> &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>) | (value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>);
        </code>
                        </set>
                    </field>
                    <field name="LeftShift" access="public">
                        <type native="ULONG : 1">uint</type>
                        <get inlining="aggressive">
                            <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>1</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>1</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>) &lt;&lt; 1);
        </code>
                        </set>
                    </field>
                    <field name="LeftAlt" access="public">
                        <type native="ULONG : 1">uint</type>
                        <get inlining="aggressive">
                            <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>2</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>2</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>) &lt;&lt; 2);
        </code>
                        </set>
                    </field>
                    <field name="LeftGUI" access="public">
                        <type native="ULONG : 1">uint</type>
                        <get inlining="aggressive">
                            <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>3</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>3</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>) &lt;&lt; 3);
        </code>
                        </set>
                    </field>
                    <field name="RightControl" access="public">
                        <type native="ULONG : 1">uint</type>
                        <get inlining="aggressive">
                            <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>4</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>4</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>) &lt;&lt; 4);
        </code>
                        </set>
                    </field>
                    <field name="RightShift" access="public">
                        <type native="ULONG : 1">uint</type>
                        <get inlining="aggressive">
                            <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>5</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>5</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>) &lt;&lt; 5);
        </code>
                        </set>
                    </field>
                    <field name="RightAlt" access="public">
                        <type native="ULONG : 1">uint</type>
                        <get inlining="aggressive">
                            <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>6</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>6</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>) &lt;&lt; 6);
        </code>
                        </set>
                    </field>
                    <field name="RigthGUI" access="public">
                        <type native="ULONG : 1">uint</type>
                        <get inlining="aggressive">
                            <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>7</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>7</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>) &lt;&lt; 7);
        </code>
                        </set>
                    </field>
                    <field name="CapsLock" access="public">
                        <type native="ULONG : 1">uint</type>
                        <get inlining="aggressive">
                            <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>8</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>8</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>) &lt;&lt; 8);
        </code>
                        </set>
                    </field>
                    <field name="ScollLock" access="public">
                        <type native="ULONG : 1">uint</type>
                        <get inlining="aggressive">
                            <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>9</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>9</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>) &lt;&lt; 9);
        </code>
                        </set>
                    </field>
                    <field name="NumLock" access="public">
                        <type native="ULONG : 1">uint</type>
                        <get inlining="aggressive">
                            <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>10</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>10</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>) &lt;&lt; 10);
        </code>
                        </set>
                    </field>
                    <field name="Reserved" access="public">
                        <type native="ULONG : 21">uint</type>
                        <get inlining="aggressive">
                            <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>11</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>1FFFFFu</bitwidthHexStringBacking>;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>1FFFFFu</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>11</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>1FFFFFu</bitwidthHexString>) &lt;&lt; 11);
        </code>
                        </set>
                    </field>
                </struct>
            </struct>
        </struct>
    </namespace>
</bindings>
