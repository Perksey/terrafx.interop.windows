<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from shared/dxgi1_2.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDXGIResource1" access="public" native="struct IDXGIResource1 : IDXGIResource" uuid="30961379-4609-4a41-998e-54fe567ee0c1" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIResource1*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDXGIResource1*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIResource1*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDXGIResource1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIResource1*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDXGIResource1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetPrivateData" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Name">
                    <type>Guid*</type>
                </param>
                <param name="DataSize">
                    <type>uint</type>
                </param>
                <param name="pData">
                    <type>void*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIResource1*, Guid*, uint, void*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDXGIResource1*)Unsafe.AsPointer(ref this)</param>, <param name="Name">Name</param>, <param name="DataSize">DataSize</param>, <param name="pData">pData</param>);
        </code>
                </body>
            </function>
            <function name="SetPrivateDataInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Name">
                    <type>Guid*</type>
                </param>
                <param name="pUnknown">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIResource1*, Guid*, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDXGIResource1*)Unsafe.AsPointer(ref this)</param>, <param name="Name">Name</param>, <param name="pUnknown">pUnknown</param>);
        </code>
                </body>
            </function>
            <function name="GetPrivateData" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Name">
                    <type>Guid*</type>
                </param>
                <param name="pDataSize">
                    <type>uint*</type>
                </param>
                <param name="pData">
                    <type>void*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIResource1*, Guid*, uint*, void*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDXGIResource1*)Unsafe.AsPointer(ref this)</param>, <param name="Name">Name</param>, <param name="pDataSize">pDataSize</param>, <param name="pData">pData</param>);
        </code>
                </body>
            </function>
            <function name="GetParent" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppParent">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIResource1*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDXGIResource1*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppParent">ppParent</param>);
        </code>
                </body>
            </function>
            <function name="GetDevice" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppDevice">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIResource1*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDXGIResource1*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppDevice">ppDevice</param>);
        </code>
                </body>
            </function>
            <function name="GetSharedHandle" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pSharedHandle">
                    <type>IntPtr*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIResource1*, IntPtr*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDXGIResource1*)Unsafe.AsPointer(ref this)</param>, <param name="pSharedHandle">pSharedHandle</param>);
        </code>
                </body>
            </function>
            <function name="GetUsage" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pUsage">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIResource1*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IDXGIResource1*)Unsafe.AsPointer(ref this)</param>, <param name="pUsage">pUsage</param>);
        </code>
                </body>
            </function>
            <function name="SetEvictionPriority" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="EvictionPriority">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIResource1*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IDXGIResource1*)Unsafe.AsPointer(ref this)</param>, <param name="EvictionPriority">EvictionPriority</param>);
        </code>
                </body>
            </function>
            <function name="GetEvictionPriority" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pEvictionPriority">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIResource1*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IDXGIResource1*)Unsafe.AsPointer(ref this)</param>, <param name="pEvictionPriority">pEvictionPriority</param>);
        </code>
                </body>
            </function>
            <function name="CreateSubresourceSurface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="index">
                    <type>uint</type>
                </param>
                <param name="ppSurface">
                    <type>IDXGISurface2**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIResource1*, uint, IDXGISurface2**, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IDXGIResource1*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>, <param name="ppSurface">ppSurface</param>);
        </code>
                </body>
            </function>
            <function name="CreateSharedHandle" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
                <param name="dwAccess">
                    <type>uint</type>
                </param>
                <param name="lpName">
                    <type>ushort*</type>
                </param>
                <param name="pHandle">
                    <type>IntPtr*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIResource1*, SECURITY_ATTRIBUTES*, uint, ushort*, IntPtr*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IDXGIResource1*)Unsafe.AsPointer(ref this)</param>, <param name="pAttributes">pAttributes</param>, <param name="dwAccess">dwAccess</param>, <param name="lpName">lpName</param>, <param name="pHandle">pHandle</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
