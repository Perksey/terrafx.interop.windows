<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from shared/dxgi1_2.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDXGIOutput1" access="public" native="struct IDXGIOutput1 : IDXGIOutput" uuid="00cddea8-939b-4b83-a340-a685226666cc" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetPrivateData" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Name">
                    <type>Guid*</type>
                </param>
                <param name="DataSize">
                    <type>uint</type>
                </param>
                <param name="pData">
                    <type>void*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, Guid*, uint, void*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="Name">Name</param>, <param name="DataSize">DataSize</param>, <param name="pData">pData</param>);
        </code>
                </body>
            </function>
            <function name="SetPrivateDataInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Name">
                    <type>Guid*</type>
                </param>
                <param name="pUnknown">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, Guid*, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="Name">Name</param>, <param name="pUnknown">pUnknown</param>);
        </code>
                </body>
            </function>
            <function name="GetPrivateData" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Name">
                    <type>Guid*</type>
                </param>
                <param name="pDataSize">
                    <type>uint*</type>
                </param>
                <param name="pData">
                    <type>void*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, Guid*, uint*, void*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="Name">Name</param>, <param name="pDataSize">pDataSize</param>, <param name="pData">pData</param>);
        </code>
                </body>
            </function>
            <function name="GetParent" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppParent">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppParent">ppParent</param>);
        </code>
                </body>
            </function>
            <function name="GetDesc" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDesc">
                    <type>DXGI_OUTPUT_DESC*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, DXGI_OUTPUT_DESC*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>);
        </code>
                </body>
            </function>
            <function name="GetDisplayModeList" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="EnumFormat">
                    <type>DXGI_FORMAT</type>
                </param>
                <param name="Flags">
                    <type>uint</type>
                </param>
                <param name="pNumModes">
                    <type>uint*</type>
                </param>
                <param name="pDesc">
                    <type>DXGI_MODE_DESC*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, DXGI_FORMAT, uint, uint*, DXGI_MODE_DESC*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="EnumFormat">EnumFormat</param>, <param name="Flags">Flags</param>, <param name="pNumModes">pNumModes</param>, <param name="pDesc">pDesc</param>);
        </code>
                </body>
            </function>
            <function name="FindClosestMatchingMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pModeToMatch">
                    <type>DXGI_MODE_DESC*</type>
                </param>
                <param name="pClosestMatch">
                    <type>DXGI_MODE_DESC*</type>
                </param>
                <param name="pConcernedDevice">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, DXGI_MODE_DESC*, DXGI_MODE_DESC*, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="pModeToMatch">pModeToMatch</param>, <param name="pClosestMatch">pClosestMatch</param>, <param name="pConcernedDevice">pConcernedDevice</param>);
        </code>
                </body>
            </function>
            <function name="WaitForVBlank" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="TakeOwnership" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDevice">
                    <type>IUnknown*</type>
                </param>
                <param name="Exclusive">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, IUnknown*, int, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="pDevice">pDevice</param>, <param name="Exclusive">Exclusive</param>);
        </code>
                </body>
            </function>
            <function name="ReleaseOwnership" access="public" unsafe="true">
                <type>void</type>
                <body>
                    <code>((delegate* unmanaged&lt;IDXGIOutput1*, void&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetGammaControlCapabilities" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pGammaCaps">
                    <type>DXGI_GAMMA_CONTROL_CAPABILITIES*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, DXGI_GAMMA_CONTROL_CAPABILITIES*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="pGammaCaps">pGammaCaps</param>);
        </code>
                </body>
            </function>
            <function name="SetGammaControl" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pArray">
                    <type>DXGI_GAMMA_CONTROL*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, DXGI_GAMMA_CONTROL*, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="pArray">pArray</param>);
        </code>
                </body>
            </function>
            <function name="GetGammaControl" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pArray">
                    <type>DXGI_GAMMA_CONTROL*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, DXGI_GAMMA_CONTROL*, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="pArray">pArray</param>);
        </code>
                </body>
            </function>
            <function name="SetDisplaySurface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pScanoutSurface">
                    <type>IDXGISurface*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, IDXGISurface*, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="pScanoutSurface">pScanoutSurface</param>);
        </code>
                </body>
            </function>
            <function name="GetDisplaySurfaceData" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDestination">
                    <type>IDXGISurface*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, IDXGISurface*, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="pDestination">pDestination</param>);
        </code>
                </body>
            </function>
            <function name="GetFrameStatistics" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pStats">
                    <type>DXGI_FRAME_STATISTICS*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, DXGI_FRAME_STATISTICS*, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="pStats">pStats</param>);
        </code>
                </body>
            </function>
            <function name="GetDisplayModeList1" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="EnumFormat">
                    <type>DXGI_FORMAT</type>
                </param>
                <param name="Flags">
                    <type>uint</type>
                </param>
                <param name="pNumModes">
                    <type>uint*</type>
                </param>
                <param name="pDesc">
                    <type>DXGI_MODE_DESC1*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, DXGI_FORMAT, uint, uint*, DXGI_MODE_DESC1*, int&gt;)(lpVtbl[<vtbl explicit="False">19</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="EnumFormat">EnumFormat</param>, <param name="Flags">Flags</param>, <param name="pNumModes">pNumModes</param>, <param name="pDesc">pDesc</param>);
        </code>
                </body>
            </function>
            <function name="FindClosestMatchingMode1" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pModeToMatch">
                    <type>DXGI_MODE_DESC1*</type>
                </param>
                <param name="pClosestMatch">
                    <type>DXGI_MODE_DESC1*</type>
                </param>
                <param name="pConcernedDevice">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, DXGI_MODE_DESC1*, DXGI_MODE_DESC1*, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">20</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="pModeToMatch">pModeToMatch</param>, <param name="pClosestMatch">pClosestMatch</param>, <param name="pConcernedDevice">pConcernedDevice</param>);
        </code>
                </body>
            </function>
            <function name="GetDisplaySurfaceData1" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDestination">
                    <type>IDXGIResource*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, IDXGIResource*, int&gt;)(lpVtbl[<vtbl explicit="False">21</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="pDestination">pDestination</param>);
        </code>
                </body>
            </function>
            <function name="DuplicateOutput" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDevice">
                    <type>IUnknown*</type>
                </param>
                <param name="ppOutputDuplication">
                    <type>IDXGIOutputDuplication**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXGIOutput1*, IUnknown*, IDXGIOutputDuplication**, int&gt;)(lpVtbl[<vtbl explicit="False">22</vtbl>]))(<param special="thisPtr">(IDXGIOutput1*)Unsafe.AsPointer(ref this)</param>, <param name="pDevice">pDevice</param>, <param name="ppOutputDuplication">ppOutputDuplication</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
