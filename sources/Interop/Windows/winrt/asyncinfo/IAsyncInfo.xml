<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from winrt/asyncinfo.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IAsyncInfo" access="public" native="struct IAsyncInfo : IInspectable" uuid="00000036-0000-0000-c000-000000000046" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAsyncInfo*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IAsyncInfo*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAsyncInfo*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IAsyncInfo*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAsyncInfo*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IAsyncInfo*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetIids" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="iidCount">
                    <type>uint*</type>
                </param>
                <param name="iids">
                    <type>Guid**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAsyncInfo*, uint*, Guid**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IAsyncInfo*)Unsafe.AsPointer(ref this)</param>, <param name="iidCount">iidCount</param>, <param name="iids">iids</param>);
        </code>
                </body>
            </function>
            <function name="GetRuntimeClassName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="className">
                    <type>IntPtr*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAsyncInfo*, IntPtr*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IAsyncInfo*)Unsafe.AsPointer(ref this)</param>, <param name="className">className</param>);
        </code>
                </body>
            </function>
            <function name="GetTrustLevel" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="trustLevel">
                    <type>TrustLevel*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAsyncInfo*, TrustLevel*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IAsyncInfo*)Unsafe.AsPointer(ref this)</param>, <param name="trustLevel">trustLevel</param>);
        </code>
                </body>
            </function>
            <function name="get_Id" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="id">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAsyncInfo*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IAsyncInfo*)Unsafe.AsPointer(ref this)</param>, <param name="id">id</param>);
        </code>
                </body>
            </function>
            <function name="get_Status" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="status">
                    <type>AsyncStatus*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAsyncInfo*, AsyncStatus*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IAsyncInfo*)Unsafe.AsPointer(ref this)</param>, <param name="status">status</param>);
        </code>
                </body>
            </function>
            <function name="get_ErrorCode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="errorCode">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAsyncInfo*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IAsyncInfo*)Unsafe.AsPointer(ref this)</param>, <param name="errorCode">errorCode</param>);
        </code>
                </body>
            </function>
            <function name="Cancel" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAsyncInfo*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IAsyncInfo*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Close" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAsyncInfo*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IAsyncInfo*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
