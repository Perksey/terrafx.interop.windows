<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d3d11_1.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ID3D11VideoProcessorEnumerator1" access="public" native="struct ID3D11VideoProcessorEnumerator1 : ID3D11VideoProcessorEnumerator" uuid="465217f2-5568-43cf-b5b9-f61d54531ca1" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11VideoProcessorEnumerator1*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ID3D11VideoProcessorEnumerator1*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11VideoProcessorEnumerator1*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ID3D11VideoProcessorEnumerator1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11VideoProcessorEnumerator1*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ID3D11VideoProcessorEnumerator1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetDevice" access="public" unsafe="true">
                <type>void</type>
                <param name="ppDevice">
                    <type>ID3D11Device**</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID3D11VideoProcessorEnumerator1*, ID3D11Device**, void&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ID3D11VideoProcessorEnumerator1*)Unsafe.AsPointer(ref this)</param>, <param name="ppDevice">ppDevice</param>);
        </code>
                </body>
            </function>
            <function name="GetPrivateData" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="guid">
                    <type>Guid*</type>
                </param>
                <param name="pDataSize">
                    <type>uint*</type>
                </param>
                <param name="pData">
                    <type>void*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11VideoProcessorEnumerator1*, Guid*, uint*, void*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ID3D11VideoProcessorEnumerator1*)Unsafe.AsPointer(ref this)</param>, <param name="guid">guid</param>, <param name="pDataSize">pDataSize</param>, <param name="pData">pData</param>);
        </code>
                </body>
            </function>
            <function name="SetPrivateData" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="guid">
                    <type>Guid*</type>
                </param>
                <param name="DataSize">
                    <type>uint</type>
                </param>
                <param name="pData">
                    <type>void*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11VideoProcessorEnumerator1*, Guid*, uint, void*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ID3D11VideoProcessorEnumerator1*)Unsafe.AsPointer(ref this)</param>, <param name="guid">guid</param>, <param name="DataSize">DataSize</param>, <param name="pData">pData</param>);
        </code>
                </body>
            </function>
            <function name="SetPrivateDataInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="guid">
                    <type>Guid*</type>
                </param>
                <param name="pData">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11VideoProcessorEnumerator1*, Guid*, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ID3D11VideoProcessorEnumerator1*)Unsafe.AsPointer(ref this)</param>, <param name="guid">guid</param>, <param name="pData">pData</param>);
        </code>
                </body>
            </function>
            <function name="GetVideoProcessorContentDesc" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pContentDesc">
                    <type>D3D11_VIDEO_PROCESSOR_CONTENT_DESC*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11VideoProcessorEnumerator1*, D3D11_VIDEO_PROCESSOR_CONTENT_DESC*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ID3D11VideoProcessorEnumerator1*)Unsafe.AsPointer(ref this)</param>, <param name="pContentDesc">pContentDesc</param>);
        </code>
                </body>
            </function>
            <function name="CheckVideoProcessorFormat" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Format">
                    <type>DXGI_FORMAT</type>
                </param>
                <param name="pFlags">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11VideoProcessorEnumerator1*, DXGI_FORMAT, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ID3D11VideoProcessorEnumerator1*)Unsafe.AsPointer(ref this)</param>, <param name="Format">Format</param>, <param name="pFlags">pFlags</param>);
        </code>
                </body>
            </function>
            <function name="GetVideoProcessorCaps" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pCaps">
                    <type>D3D11_VIDEO_PROCESSOR_CAPS*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11VideoProcessorEnumerator1*, D3D11_VIDEO_PROCESSOR_CAPS*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ID3D11VideoProcessorEnumerator1*)Unsafe.AsPointer(ref this)</param>, <param name="pCaps">pCaps</param>);
        </code>
                </body>
            </function>
            <function name="GetVideoProcessorRateConversionCaps" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="TypeIndex">
                    <type>uint</type>
                </param>
                <param name="pCaps">
                    <type>D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11VideoProcessorEnumerator1*, uint, D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ID3D11VideoProcessorEnumerator1*)Unsafe.AsPointer(ref this)</param>, <param name="TypeIndex">TypeIndex</param>, <param name="pCaps">pCaps</param>);
        </code>
                </body>
            </function>
            <function name="GetVideoProcessorCustomRate" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="TypeIndex">
                    <type>uint</type>
                </param>
                <param name="CustomRateIndex">
                    <type>uint</type>
                </param>
                <param name="pRate">
                    <type>D3D11_VIDEO_PROCESSOR_CUSTOM_RATE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11VideoProcessorEnumerator1*, uint, uint, D3D11_VIDEO_PROCESSOR_CUSTOM_RATE*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ID3D11VideoProcessorEnumerator1*)Unsafe.AsPointer(ref this)</param>, <param name="TypeIndex">TypeIndex</param>, <param name="CustomRateIndex">CustomRateIndex</param>, <param name="pRate">pRate</param>);
        </code>
                </body>
            </function>
            <function name="GetVideoProcessorFilterRange" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Filter">
                    <type>D3D11_VIDEO_PROCESSOR_FILTER</type>
                </param>
                <param name="pRange">
                    <type>D3D11_VIDEO_PROCESSOR_FILTER_RANGE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11VideoProcessorEnumerator1*, D3D11_VIDEO_PROCESSOR_FILTER, D3D11_VIDEO_PROCESSOR_FILTER_RANGE*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ID3D11VideoProcessorEnumerator1*)Unsafe.AsPointer(ref this)</param>, <param name="Filter">Filter</param>, <param name="pRange">pRange</param>);
        </code>
                </body>
            </function>
            <function name="CheckVideoProcessorFormatConversion" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="InputFormat">
                    <type>DXGI_FORMAT</type>
                </param>
                <param name="InputColorSpace">
                    <type>DXGI_COLOR_SPACE_TYPE</type>
                </param>
                <param name="OutputFormat">
                    <type>DXGI_FORMAT</type>
                </param>
                <param name="OutputColorSpace">
                    <type>DXGI_COLOR_SPACE_TYPE</type>
                </param>
                <param name="pSupported">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11VideoProcessorEnumerator1*, DXGI_FORMAT, DXGI_COLOR_SPACE_TYPE, DXGI_FORMAT, DXGI_COLOR_SPACE_TYPE, int*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(ID3D11VideoProcessorEnumerator1*)Unsafe.AsPointer(ref this)</param>, <param name="InputFormat">InputFormat</param>, <param name="InputColorSpace">InputColorSpace</param>, <param name="OutputFormat">OutputFormat</param>, <param name="OutputColorSpace">OutputColorSpace</param>, <param name="pSupported">pSupported</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
