<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d3d11_1.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <enumeration name="D3D11_LOGIC_OP" access="public">
            <type>int</type>
            <enumerator name="D3D11_LOGIC_OP_CLEAR" access="">
                <type primitive="False">int</type>
                <value>
                    <code>0
        </code>
                </value>
            </enumerator>
            <enumerator name="D3D11_LOGIC_OP_SET" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(D3D11_LOGIC_OP_CLEAR + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="D3D11_LOGIC_OP_COPY" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(D3D11_LOGIC_OP_SET + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="D3D11_LOGIC_OP_COPY_INVERTED" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(D3D11_LOGIC_OP_COPY + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="D3D11_LOGIC_OP_NOOP" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(D3D11_LOGIC_OP_COPY_INVERTED + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="D3D11_LOGIC_OP_INVERT" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(D3D11_LOGIC_OP_NOOP + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="D3D11_LOGIC_OP_AND" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(D3D11_LOGIC_OP_INVERT + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="D3D11_LOGIC_OP_NAND" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(D3D11_LOGIC_OP_AND + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="D3D11_LOGIC_OP_OR" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(D3D11_LOGIC_OP_NAND + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="D3D11_LOGIC_OP_NOR" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(D3D11_LOGIC_OP_OR + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="D3D11_LOGIC_OP_XOR" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(D3D11_LOGIC_OP_NOR + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="D3D11_LOGIC_OP_EQUIV" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(D3D11_LOGIC_OP_XOR + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="D3D11_LOGIC_OP_AND_REVERSE" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(D3D11_LOGIC_OP_EQUIV + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="D3D11_LOGIC_OP_AND_INVERTED" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(D3D11_LOGIC_OP_AND_REVERSE + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="D3D11_LOGIC_OP_OR_REVERSE" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(D3D11_LOGIC_OP_AND_INVERTED + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="D3D11_LOGIC_OP_OR_INVERTED" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(D3D11_LOGIC_OP_OR_REVERSE + 1)
        </code>
                </value>
            </enumerator>
        </enumeration>
    </namespace>
</bindings>
