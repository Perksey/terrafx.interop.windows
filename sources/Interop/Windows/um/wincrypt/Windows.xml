<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright Â© Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/wincrypt.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright Â© Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <class name="Windows" access="public" static="true" unsafe="true">
            <function name="CryptAcquireContextA" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="phProv">
                    <type>nuint*</type>
                </param>
                <param name="szContainer">
                    <type>sbyte*</type>
                </param>
                <param name="szProvider">
                    <type>sbyte*</type>
                </param>
                <param name="dwProvType">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptAcquireContextW" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="phProv">
                    <type>nuint*</type>
                </param>
                <param name="szContainer">
                    <type>ushort*</type>
                </param>
                <param name="szProvider">
                    <type>ushort*</type>
                </param>
                <param name="dwProvType">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptReleaseContext" access="public" lib="advapi32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hProv">
                    <type>nuint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptGenKey" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hProv">
                    <type>nuint</type>
                </param>
                <param name="Algid">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="phKey">
                    <type>nuint*</type>
                </param>
            </function>
            <function name="CryptDeriveKey" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hProv">
                    <type>nuint</type>
                </param>
                <param name="Algid">
                    <type>uint</type>
                </param>
                <param name="hBaseData">
                    <type>nuint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="phKey">
                    <type>nuint*</type>
                </param>
            </function>
            <function name="CryptDestroyKey" access="public" lib="advapi32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hKey">
                    <type>nuint</type>
                </param>
            </function>
            <function name="CryptSetKeyParam" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hKey">
                    <type>nuint</type>
                </param>
                <param name="dwParam">
                    <type>uint</type>
                </param>
                <param name="pbData">
                    <type>byte*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptGetKeyParam" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hKey">
                    <type>nuint</type>
                </param>
                <param name="dwParam">
                    <type>uint</type>
                </param>
                <param name="pbData">
                    <type>byte*</type>
                </param>
                <param name="pdwDataLen">
                    <type>uint*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptSetHashParam" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hHash">
                    <type>nuint</type>
                </param>
                <param name="dwParam">
                    <type>uint</type>
                </param>
                <param name="pbData">
                    <type>byte*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptGetHashParam" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hHash">
                    <type>nuint</type>
                </param>
                <param name="dwParam">
                    <type>uint</type>
                </param>
                <param name="pbData">
                    <type>byte*</type>
                </param>
                <param name="pdwDataLen">
                    <type>uint*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptSetProvParam" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hProv">
                    <type>nuint</type>
                </param>
                <param name="dwParam">
                    <type>uint</type>
                </param>
                <param name="pbData">
                    <type>byte*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptGetProvParam" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hProv">
                    <type>nuint</type>
                </param>
                <param name="dwParam">
                    <type>uint</type>
                </param>
                <param name="pbData">
                    <type>byte*</type>
                </param>
                <param name="pdwDataLen">
                    <type>uint*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptGenRandom" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hProv">
                    <type>nuint</type>
                </param>
                <param name="dwLen">
                    <type>uint</type>
                </param>
                <param name="pbBuffer">
                    <type>byte*</type>
                </param>
            </function>
            <function name="CryptGetUserKey" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hProv">
                    <type>nuint</type>
                </param>
                <param name="dwKeySpec">
                    <type>uint</type>
                </param>
                <param name="phUserKey">
                    <type>nuint*</type>
                </param>
            </function>
            <function name="CryptExportKey" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hKey">
                    <type>nuint</type>
                </param>
                <param name="hExpKey">
                    <type>nuint</type>
                </param>
                <param name="dwBlobType">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pbData">
                    <type>byte*</type>
                </param>
                <param name="pdwDataLen">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptImportKey" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hProv">
                    <type>nuint</type>
                </param>
                <param name="pbData">
                    <type>byte*</type>
                </param>
                <param name="dwDataLen">
                    <type>uint</type>
                </param>
                <param name="hPubKey">
                    <type>nuint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="phKey">
                    <type>nuint*</type>
                </param>
            </function>
            <function name="CryptEncrypt" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hKey">
                    <type>nuint</type>
                </param>
                <param name="hHash">
                    <type>nuint</type>
                </param>
                <param name="Final">
                    <type>int</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pbData">
                    <type>byte*</type>
                </param>
                <param name="pdwDataLen">
                    <type>uint*</type>
                </param>
                <param name="dwBufLen">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptDecrypt" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hKey">
                    <type>nuint</type>
                </param>
                <param name="hHash">
                    <type>nuint</type>
                </param>
                <param name="Final">
                    <type>int</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pbData">
                    <type>byte*</type>
                </param>
                <param name="pdwDataLen">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptCreateHash" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hProv">
                    <type>nuint</type>
                </param>
                <param name="Algid">
                    <type>uint</type>
                </param>
                <param name="hKey">
                    <type>nuint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="phHash">
                    <type>nuint*</type>
                </param>
            </function>
            <function name="CryptHashData" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hHash">
                    <type>nuint</type>
                </param>
                <param name="pbData">
                    <type>byte*</type>
                </param>
                <param name="dwDataLen">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptHashSessionKey" access="public" lib="advapi32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hHash">
                    <type>nuint</type>
                </param>
                <param name="hKey">
                    <type>nuint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptDestroyHash" access="public" lib="advapi32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hHash">
                    <type>nuint</type>
                </param>
            </function>
            <function name="CryptSignHashA" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="hHash">
                    <type>nuint</type>
                </param>
                <param name="dwKeySpec">
                    <type>uint</type>
                </param>
                <param name="szDescription">
                    <type>sbyte*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pbSignature">
                    <type>byte*</type>
                </param>
                <param name="pdwSigLen">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptSignHashW" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="hHash">
                    <type>nuint</type>
                </param>
                <param name="dwKeySpec">
                    <type>uint</type>
                </param>
                <param name="szDescription">
                    <type>ushort*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pbSignature">
                    <type>byte*</type>
                </param>
                <param name="pdwSigLen">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptVerifySignatureA" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="hHash">
                    <type>nuint</type>
                </param>
                <param name="pbSignature">
                    <type>byte*</type>
                </param>
                <param name="dwSigLen">
                    <type>uint</type>
                </param>
                <param name="hPubKey">
                    <type>nuint</type>
                </param>
                <param name="szDescription">
                    <type>sbyte*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptVerifySignatureW" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="hHash">
                    <type>nuint</type>
                </param>
                <param name="pbSignature">
                    <type>byte*</type>
                </param>
                <param name="dwSigLen">
                    <type>uint</type>
                </param>
                <param name="hPubKey">
                    <type>nuint</type>
                </param>
                <param name="szDescription">
                    <type>ushort*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptSetProviderA" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pszProvName">
                    <type>sbyte*</type>
                </param>
                <param name="dwProvType">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptSetProviderW" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pszProvName">
                    <type>ushort*</type>
                </param>
                <param name="dwProvType">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptSetProviderExA" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pszProvName">
                    <type>sbyte*</type>
                </param>
                <param name="dwProvType">
                    <type>uint</type>
                </param>
                <param name="pdwReserved">
                    <type>uint*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptSetProviderExW" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pszProvName">
                    <type>ushort*</type>
                </param>
                <param name="dwProvType">
                    <type>uint</type>
                </param>
                <param name="pdwReserved">
                    <type>uint*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptGetDefaultProviderA" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwProvType">
                    <type>uint</type>
                </param>
                <param name="pdwReserved">
                    <type>uint*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pszProvName">
                    <type>sbyte*</type>
                </param>
                <param name="pcbProvName">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptGetDefaultProviderW" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwProvType">
                    <type>uint</type>
                </param>
                <param name="pdwReserved">
                    <type>uint*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pszProvName">
                    <type>ushort*</type>
                </param>
                <param name="pcbProvName">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptEnumProviderTypesA" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwIndex">
                    <type>uint</type>
                </param>
                <param name="pdwReserved">
                    <type>uint*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pdwProvType">
                    <type>uint*</type>
                </param>
                <param name="szTypeName">
                    <type>sbyte*</type>
                </param>
                <param name="pcbTypeName">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptEnumProviderTypesW" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwIndex">
                    <type>uint</type>
                </param>
                <param name="pdwReserved">
                    <type>uint*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pdwProvType">
                    <type>uint*</type>
                </param>
                <param name="szTypeName">
                    <type>ushort*</type>
                </param>
                <param name="pcbTypeName">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptEnumProvidersA" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwIndex">
                    <type>uint</type>
                </param>
                <param name="pdwReserved">
                    <type>uint*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pdwProvType">
                    <type>uint*</type>
                </param>
                <param name="szProvName">
                    <type>sbyte*</type>
                </param>
                <param name="pcbProvName">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptEnumProvidersW" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwIndex">
                    <type>uint</type>
                </param>
                <param name="pdwReserved">
                    <type>uint*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pdwProvType">
                    <type>uint*</type>
                </param>
                <param name="szProvName">
                    <type>ushort*</type>
                </param>
                <param name="pcbProvName">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptContextAddRef" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hProv">
                    <type>nuint</type>
                </param>
                <param name="pdwReserved">
                    <type>uint*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptDuplicateKey" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hKey">
                    <type>nuint</type>
                </param>
                <param name="pdwReserved">
                    <type>uint*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="phKey">
                    <type>nuint*</type>
                </param>
            </function>
            <function name="CryptDuplicateHash" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hHash">
                    <type>nuint</type>
                </param>
                <param name="pdwReserved">
                    <type>uint*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="phHash">
                    <type>nuint*</type>
                </param>
            </function>
            <function name="GetEncSChannel" access="public" lib="instrsa5" static="true">
                <type native="BOOL">int</type>
                <param name="pData">
                    <type>byte**</type>
                </param>
                <param name="dwDecSize">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptFormatObject" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="dwFormatType">
                    <type>uint</type>
                </param>
                <param name="dwFormatStrType">
                    <type>uint</type>
                </param>
                <param name="pFormatStruct">
                    <type>void*</type>
                </param>
                <param name="lpszStructType">
                    <type>sbyte*</type>
                </param>
                <param name="pbEncoded">
                    <type>byte*</type>
                </param>
                <param name="cbEncoded">
                    <type>uint</type>
                </param>
                <param name="pbFormat">
                    <type>void*</type>
                </param>
                <param name="pcbFormat">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptEncodeObjectEx" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="lpszStructType">
                    <type>sbyte*</type>
                </param>
                <param name="pvStructInfo">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pEncodePara">
                    <type>CRYPT_ENCODE_PARA*</type>
                </param>
                <param name="pvEncoded">
                    <type>void*</type>
                </param>
                <param name="pcbEncoded">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptEncodeObject" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="lpszStructType">
                    <type>sbyte*</type>
                </param>
                <param name="pvStructInfo">
                    <type>void*</type>
                </param>
                <param name="pbEncoded">
                    <type>byte*</type>
                </param>
                <param name="pcbEncoded">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptDecodeObjectEx" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="lpszStructType">
                    <type>sbyte*</type>
                </param>
                <param name="pbEncoded">
                    <type>byte*</type>
                </param>
                <param name="cbEncoded">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pDecodePara">
                    <type>CRYPT_DECODE_PARA*</type>
                </param>
                <param name="pvStructInfo">
                    <type>void*</type>
                </param>
                <param name="pcbStructInfo">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptDecodeObject" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="lpszStructType">
                    <type>sbyte*</type>
                </param>
                <param name="pbEncoded">
                    <type>byte*</type>
                </param>
                <param name="cbEncoded">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvStructInfo">
                    <type>void*</type>
                </param>
                <param name="pcbStructInfo">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptInstallOIDFunctionAddress" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="hModule">
                    <type>IntPtr</type>
                </param>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="pszFuncName">
                    <type>sbyte*</type>
                </param>
                <param name="cFuncEntry">
                    <type>uint</type>
                </param>
                <param name="rgFuncEntry">
                    <type>CRYPT_OID_FUNC_ENTRY*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptInitOIDFunctionSet" access="public" lib="crypt32" static="true">
                <type native="HCRYPTOIDFUNCSET">void*</type>
                <param name="pszFuncName">
                    <type>sbyte*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptGetOIDFunctionAddress" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hFuncSet">
                    <type>void*</type>
                </param>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="pszOID">
                    <type>sbyte*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="ppvFuncAddr">
                    <type>void**</type>
                </param>
                <param name="phFuncAddr">
                    <type>void**</type>
                </param>
            </function>
            <function name="CryptGetDefaultOIDDllList" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hFuncSet">
                    <type>void*</type>
                </param>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="pwszDllList">
                    <type>ushort*</type>
                </param>
                <param name="pcchDllList">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptGetDefaultOIDFunctionAddress" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="hFuncSet">
                    <type>void*</type>
                </param>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="pwszDll">
                    <type>ushort*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="ppvFuncAddr">
                    <type>void**</type>
                </param>
                <param name="phFuncAddr">
                    <type>void**</type>
                </param>
            </function>
            <function name="CryptFreeOIDFunctionAddress" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="hFuncAddr">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptRegisterOIDFunction" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="pszFuncName">
                    <type>sbyte*</type>
                </param>
                <param name="pszOID">
                    <type>sbyte*</type>
                </param>
                <param name="pwszDll">
                    <type>ushort*</type>
                </param>
                <param name="pszOverrideFuncName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="CryptUnregisterOIDFunction" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="pszFuncName">
                    <type>sbyte*</type>
                </param>
                <param name="pszOID">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="CryptRegisterDefaultOIDFunction" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="pszFuncName">
                    <type>sbyte*</type>
                </param>
                <param name="dwIndex">
                    <type>uint</type>
                </param>
                <param name="pwszDll">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="CryptUnregisterDefaultOIDFunction" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="pszFuncName">
                    <type>sbyte*</type>
                </param>
                <param name="pwszDll">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="CryptSetOIDFunctionValue" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="pszFuncName">
                    <type>sbyte*</type>
                </param>
                <param name="pszOID">
                    <type>sbyte*</type>
                </param>
                <param name="pwszValueName">
                    <type>ushort*</type>
                </param>
                <param name="dwValueType">
                    <type>uint</type>
                </param>
                <param name="pbValueData">
                    <type>byte*</type>
                </param>
                <param name="cbValueData">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptGetOIDFunctionValue" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="pszFuncName">
                    <type>sbyte*</type>
                </param>
                <param name="pszOID">
                    <type>sbyte*</type>
                </param>
                <param name="pwszValueName">
                    <type>ushort*</type>
                </param>
                <param name="pdwValueType">
                    <type>uint*</type>
                </param>
                <param name="pbValueData">
                    <type>byte*</type>
                </param>
                <param name="pcbValueData">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptEnumOIDFunction" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="pszFuncName">
                    <type>sbyte*</type>
                </param>
                <param name="pszOID">
                    <type>sbyte*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvArg">
                    <type>void*</type>
                </param>
                <param name="pfnEnumOIDFunc">
                    <type>delegate* unmanaged&lt;uint, sbyte*, sbyte*, uint, uint*, ushort**, byte**, uint*, void*, int&gt;</type>
                </param>
            </function>
            <function name="CryptFindOIDInfo" access="public" lib="crypt32" static="true">
                <type native="PCCRYPT_OID_INFO">CRYPT_OID_INFO*</type>
                <param name="dwKeyType">
                    <type>uint</type>
                </param>
                <param name="pvKey">
                    <type>void*</type>
                </param>
                <param name="dwGroupId">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptRegisterOIDInfo" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pInfo">
                    <type>CRYPT_OID_INFO*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptUnregisterOIDInfo" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pInfo">
                    <type>CRYPT_OID_INFO*</type>
                </param>
            </function>
            <function name="CryptEnumOIDInfo" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwGroupId">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvArg">
                    <type>void*</type>
                </param>
                <param name="pfnEnumOIDInfo">
                    <type>delegate* unmanaged&lt;CRYPT_OID_INFO*, void*, int&gt;</type>
                </param>
            </function>
            <function name="CryptFindLocalizedName" access="public" lib="crypt32" static="true">
                <type native="LPCWSTR">ushort*</type>
                <param name="pwszCryptName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="CryptMsgOpenToEncode" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="HCRYPTMSG">void*</type>
                <param name="dwMsgEncodingType">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="dwMsgType">
                    <type>uint</type>
                </param>
                <param name="pvMsgEncodeInfo">
                    <type>void*</type>
                </param>
                <param name="pszInnerContentObjID">
                    <type>sbyte*</type>
                </param>
                <param name="pStreamInfo">
                    <type>CMSG_STREAM_INFO*</type>
                </param>
            </function>
            <function name="CryptMsgCalculateEncodedLength" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="DWORD">uint</type>
                <param name="dwMsgEncodingType">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="dwMsgType">
                    <type>uint</type>
                </param>
                <param name="pvMsgEncodeInfo">
                    <type>void*</type>
                </param>
                <param name="pszInnerContentObjID">
                    <type>sbyte*</type>
                </param>
                <param name="cbData">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptMsgOpenToDecode" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="HCRYPTMSG">void*</type>
                <param name="dwMsgEncodingType">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="dwMsgType">
                    <type>uint</type>
                </param>
                <param name="hCryptProv">
                    <type>nuint</type>
                </param>
                <param name="pRecipientInfo">
                    <type>CERT_INFO*</type>
                </param>
                <param name="pStreamInfo">
                    <type>CMSG_STREAM_INFO*</type>
                </param>
            </function>
            <function name="CryptMsgDuplicate" access="public" lib="crypt32" static="true">
                <type native="HCRYPTMSG">void*</type>
                <param name="hCryptMsg">
                    <type>void*</type>
                </param>
            </function>
            <function name="CryptMsgClose" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptMsg">
                    <type>void*</type>
                </param>
            </function>
            <function name="CryptMsgUpdate" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptMsg">
                    <type>void*</type>
                </param>
                <param name="pbData">
                    <type>byte*</type>
                </param>
                <param name="cbData">
                    <type>uint</type>
                </param>
                <param name="fFinal">
                    <type>int</type>
                </param>
            </function>
            <function name="CryptMsgGetParam" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptMsg">
                    <type>void*</type>
                </param>
                <param name="dwParamType">
                    <type>uint</type>
                </param>
                <param name="dwIndex">
                    <type>uint</type>
                </param>
                <param name="pvData">
                    <type>void*</type>
                </param>
                <param name="pcbData">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptMsgControl" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptMsg">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="dwCtrlType">
                    <type>uint</type>
                </param>
                <param name="pvCtrlPara">
                    <type>void*</type>
                </param>
            </function>
            <function name="CryptMsgVerifyCountersignatureEncoded" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptProv">
                    <type>nuint</type>
                </param>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="pbSignerInfo">
                    <type>byte*</type>
                </param>
                <param name="cbSignerInfo">
                    <type>uint</type>
                </param>
                <param name="pbSignerInfoCountersignature">
                    <type>byte*</type>
                </param>
                <param name="cbSignerInfoCountersignature">
                    <type>uint</type>
                </param>
                <param name="pciCountersigner">
                    <type>CERT_INFO*</type>
                </param>
            </function>
            <function name="CryptMsgVerifyCountersignatureEncodedEx" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptProv">
                    <type>nuint</type>
                </param>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="pbSignerInfo">
                    <type>byte*</type>
                </param>
                <param name="cbSignerInfo">
                    <type>uint</type>
                </param>
                <param name="pbSignerInfoCountersignature">
                    <type>byte*</type>
                </param>
                <param name="cbSignerInfoCountersignature">
                    <type>uint</type>
                </param>
                <param name="dwSignerType">
                    <type>uint</type>
                </param>
                <param name="pvSigner">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvExtra">
                    <type>void*</type>
                </param>
            </function>
            <function name="CryptMsgCountersign" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptMsg">
                    <type>void*</type>
                </param>
                <param name="dwIndex">
                    <type>uint</type>
                </param>
                <param name="cCountersigners">
                    <type>uint</type>
                </param>
                <param name="rgCountersigners">
                    <type>CMSG_SIGNER_ENCODE_INFO*</type>
                </param>
            </function>
            <function name="CryptMsgCountersignEncoded" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="pbSignerInfo">
                    <type>byte*</type>
                </param>
                <param name="cbSignerInfo">
                    <type>uint</type>
                </param>
                <param name="cCountersigners">
                    <type>uint</type>
                </param>
                <param name="rgCountersigners">
                    <type>CMSG_SIGNER_ENCODE_INFO*</type>
                </param>
                <param name="pbCountersignature">
                    <type>byte*</type>
                </param>
                <param name="pcbCountersignature">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CertOpenStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="HCERTSTORE">void*</type>
                <param name="lpszStoreProvider">
                    <type>sbyte*</type>
                </param>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="hCryptProv">
                    <type>nuint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvPara">
                    <type>void*</type>
                </param>
            </function>
            <function name="CertDuplicateStore" access="public" lib="crypt32" static="true">
                <type native="HCERTSTORE">void*</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
            </function>
            <function name="CertSaveStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="dwSaveAs">
                    <type>uint</type>
                </param>
                <param name="dwSaveTo">
                    <type>uint</type>
                </param>
                <param name="pvSaveToPara">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertCloseStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertGetSubjectCertificateFromStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="PCCERT_CONTEXT">CERT_CONTEXT*</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pCertId">
                    <type>CERT_INFO*</type>
                </param>
            </function>
            <function name="CertEnumCertificatesInStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="PCCERT_CONTEXT">CERT_CONTEXT*</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="pPrevCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
            </function>
            <function name="CertFindCertificateInStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="PCCERT_CONTEXT">CERT_CONTEXT*</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="dwFindFlags">
                    <type>uint</type>
                </param>
                <param name="dwFindType">
                    <type>uint</type>
                </param>
                <param name="pvFindPara">
                    <type>void*</type>
                </param>
                <param name="pPrevCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
            </function>
            <function name="CertGetIssuerCertificateFromStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="PCCERT_CONTEXT">CERT_CONTEXT*</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="pSubjectContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="pPrevIssuerContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="pdwFlags">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CertVerifySubjectCertificateContext" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pSubject">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="pIssuer">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="pdwFlags">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CertDuplicateCertificateContext" access="public" lib="crypt32" static="true">
                <type native="PCCERT_CONTEXT">CERT_CONTEXT*</type>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
            </function>
            <function name="CertCreateCertificateContext" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="PCCERT_CONTEXT">CERT_CONTEXT*</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pbCertEncoded">
                    <type>byte*</type>
                </param>
                <param name="cbCertEncoded">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertFreeCertificateContext" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
            </function>
            <function name="CertSetCertificateContextProperty" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="dwPropId">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvData">
                    <type>void*</type>
                </param>
            </function>
            <function name="CertGetCertificateContextProperty" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="dwPropId">
                    <type>uint</type>
                </param>
                <param name="pvData">
                    <type>void*</type>
                </param>
                <param name="pcbData">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CertEnumCertificateContextProperties" access="public" lib="crypt32" static="true">
                <type native="DWORD">uint</type>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="dwPropId">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertCreateCTLEntryFromCertificateContextProperties" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="cOptAttr">
                    <type>uint</type>
                </param>
                <param name="rgOptAttr">
                    <type>CRYPT_ATTRIBUTE*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
                <param name="pCtlEntry">
                    <type>CTL_ENTRY*</type>
                </param>
                <param name="pcbCtlEntry">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CertSetCertificateContextPropertiesFromCTLEntry" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="pCtlEntry">
                    <type>CTL_ENTRY*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertGetCRLFromStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="PCCRL_CONTEXT">CRL_CONTEXT*</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="pIssuerContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="pPrevCrlContext">
                    <type>CRL_CONTEXT*</type>
                </param>
                <param name="pdwFlags">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CertEnumCRLsInStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="PCCRL_CONTEXT">CRL_CONTEXT*</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="pPrevCrlContext">
                    <type>CRL_CONTEXT*</type>
                </param>
            </function>
            <function name="CertFindCRLInStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="PCCRL_CONTEXT">CRL_CONTEXT*</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="dwFindFlags">
                    <type>uint</type>
                </param>
                <param name="dwFindType">
                    <type>uint</type>
                </param>
                <param name="pvFindPara">
                    <type>void*</type>
                </param>
                <param name="pPrevCrlContext">
                    <type>CRL_CONTEXT*</type>
                </param>
            </function>
            <function name="CertDuplicateCRLContext" access="public" lib="crypt32" static="true">
                <type native="PCCRL_CONTEXT">CRL_CONTEXT*</type>
                <param name="pCrlContext">
                    <type>CRL_CONTEXT*</type>
                </param>
            </function>
            <function name="CertCreateCRLContext" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="PCCRL_CONTEXT">CRL_CONTEXT*</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pbCrlEncoded">
                    <type>byte*</type>
                </param>
                <param name="cbCrlEncoded">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertFreeCRLContext" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pCrlContext">
                    <type>CRL_CONTEXT*</type>
                </param>
            </function>
            <function name="CertSetCRLContextProperty" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCrlContext">
                    <type>CRL_CONTEXT*</type>
                </param>
                <param name="dwPropId">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvData">
                    <type>void*</type>
                </param>
            </function>
            <function name="CertGetCRLContextProperty" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCrlContext">
                    <type>CRL_CONTEXT*</type>
                </param>
                <param name="dwPropId">
                    <type>uint</type>
                </param>
                <param name="pvData">
                    <type>void*</type>
                </param>
                <param name="pcbData">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CertEnumCRLContextProperties" access="public" lib="crypt32" static="true">
                <type native="DWORD">uint</type>
                <param name="pCrlContext">
                    <type>CRL_CONTEXT*</type>
                </param>
                <param name="dwPropId">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertFindCertificateInCRL" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pCert">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="pCrlContext">
                    <type>CRL_CONTEXT*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
                <param name="ppCrlEntry">
                    <type>CRL_ENTRY**</type>
                </param>
            </function>
            <function name="CertIsValidCRLForCertificate" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pCert">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="pCrl">
                    <type>CRL_CONTEXT*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
            </function>
            <function name="CertAddEncodedCertificateToStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pbCertEncoded">
                    <type>byte*</type>
                </param>
                <param name="cbCertEncoded">
                    <type>uint</type>
                </param>
                <param name="dwAddDisposition">
                    <type>uint</type>
                </param>
                <param name="ppCertContext">
                    <type>CERT_CONTEXT**</type>
                </param>
            </function>
            <function name="CertAddCertificateContextToStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="dwAddDisposition">
                    <type>uint</type>
                </param>
                <param name="ppStoreContext">
                    <type>CERT_CONTEXT**</type>
                </param>
            </function>
            <function name="CertAddSerializedElementToStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="pbElement">
                    <type>byte*</type>
                </param>
                <param name="cbElement">
                    <type>uint</type>
                </param>
                <param name="dwAddDisposition">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="dwContextTypeFlags">
                    <type>uint</type>
                </param>
                <param name="pdwContextType">
                    <type>uint*</type>
                </param>
                <param name="ppvContext">
                    <type>void**</type>
                </param>
            </function>
            <function name="CertDeleteCertificateFromStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
            </function>
            <function name="CertAddEncodedCRLToStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pbCrlEncoded">
                    <type>byte*</type>
                </param>
                <param name="cbCrlEncoded">
                    <type>uint</type>
                </param>
                <param name="dwAddDisposition">
                    <type>uint</type>
                </param>
                <param name="ppCrlContext">
                    <type>CRL_CONTEXT**</type>
                </param>
            </function>
            <function name="CertAddCRLContextToStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="pCrlContext">
                    <type>CRL_CONTEXT*</type>
                </param>
                <param name="dwAddDisposition">
                    <type>uint</type>
                </param>
                <param name="ppStoreContext">
                    <type>CRL_CONTEXT**</type>
                </param>
            </function>
            <function name="CertDeleteCRLFromStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCrlContext">
                    <type>CRL_CONTEXT*</type>
                </param>
            </function>
            <function name="CertSerializeCertificateStoreElement" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pbElement">
                    <type>byte*</type>
                </param>
                <param name="pcbElement">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CertSerializeCRLStoreElement" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCrlContext">
                    <type>CRL_CONTEXT*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pbElement">
                    <type>byte*</type>
                </param>
                <param name="pcbElement">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CertDuplicateCTLContext" access="public" lib="crypt32" static="true">
                <type native="PCCTL_CONTEXT">CTL_CONTEXT*</type>
                <param name="pCtlContext">
                    <type>CTL_CONTEXT*</type>
                </param>
            </function>
            <function name="CertCreateCTLContext" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="PCCTL_CONTEXT">CTL_CONTEXT*</type>
                <param name="dwMsgAndCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pbCtlEncoded">
                    <type>byte*</type>
                </param>
                <param name="cbCtlEncoded">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertFreeCTLContext" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pCtlContext">
                    <type>CTL_CONTEXT*</type>
                </param>
            </function>
            <function name="CertSetCTLContextProperty" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCtlContext">
                    <type>CTL_CONTEXT*</type>
                </param>
                <param name="dwPropId">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvData">
                    <type>void*</type>
                </param>
            </function>
            <function name="CertGetCTLContextProperty" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCtlContext">
                    <type>CTL_CONTEXT*</type>
                </param>
                <param name="dwPropId">
                    <type>uint</type>
                </param>
                <param name="pvData">
                    <type>void*</type>
                </param>
                <param name="pcbData">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CertEnumCTLContextProperties" access="public" lib="crypt32" static="true">
                <type native="DWORD">uint</type>
                <param name="pCtlContext">
                    <type>CTL_CONTEXT*</type>
                </param>
                <param name="dwPropId">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertEnumCTLsInStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="PCCTL_CONTEXT">CTL_CONTEXT*</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="pPrevCtlContext">
                    <type>CTL_CONTEXT*</type>
                </param>
            </function>
            <function name="CertFindSubjectInCTL" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="PCTL_ENTRY">CTL_ENTRY*</type>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="dwSubjectType">
                    <type>uint</type>
                </param>
                <param name="pvSubject">
                    <type>void*</type>
                </param>
                <param name="pCtlContext">
                    <type>CTL_CONTEXT*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertFindCTLInStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="PCCTL_CONTEXT">CTL_CONTEXT*</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="dwMsgAndCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="dwFindFlags">
                    <type>uint</type>
                </param>
                <param name="dwFindType">
                    <type>uint</type>
                </param>
                <param name="pvFindPara">
                    <type>void*</type>
                </param>
                <param name="pPrevCtlContext">
                    <type>CTL_CONTEXT*</type>
                </param>
            </function>
            <function name="CertAddEncodedCTLToStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="dwMsgAndCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pbCtlEncoded">
                    <type>byte*</type>
                </param>
                <param name="cbCtlEncoded">
                    <type>uint</type>
                </param>
                <param name="dwAddDisposition">
                    <type>uint</type>
                </param>
                <param name="ppCtlContext">
                    <type>CTL_CONTEXT**</type>
                </param>
            </function>
            <function name="CertAddCTLContextToStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="pCtlContext">
                    <type>CTL_CONTEXT*</type>
                </param>
                <param name="dwAddDisposition">
                    <type>uint</type>
                </param>
                <param name="ppStoreContext">
                    <type>CTL_CONTEXT**</type>
                </param>
            </function>
            <function name="CertSerializeCTLStoreElement" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCtlContext">
                    <type>CTL_CONTEXT*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pbElement">
                    <type>byte*</type>
                </param>
                <param name="pcbElement">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CertDeleteCTLFromStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCtlContext">
                    <type>CTL_CONTEXT*</type>
                </param>
            </function>
            <function name="CertAddCertificateLinkToStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="dwAddDisposition">
                    <type>uint</type>
                </param>
                <param name="ppStoreContext">
                    <type>CERT_CONTEXT**</type>
                </param>
            </function>
            <function name="CertAddCRLLinkToStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="pCrlContext">
                    <type>CRL_CONTEXT*</type>
                </param>
                <param name="dwAddDisposition">
                    <type>uint</type>
                </param>
                <param name="ppStoreContext">
                    <type>CRL_CONTEXT**</type>
                </param>
            </function>
            <function name="CertAddCTLLinkToStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="pCtlContext">
                    <type>CTL_CONTEXT*</type>
                </param>
                <param name="dwAddDisposition">
                    <type>uint</type>
                </param>
                <param name="ppStoreContext">
                    <type>CTL_CONTEXT**</type>
                </param>
            </function>
            <function name="CertAddStoreToCollection" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="hCollectionStore">
                    <type>void*</type>
                </param>
                <param name="hSiblingStore">
                    <type>void*</type>
                </param>
                <param name="dwUpdateFlags">
                    <type>uint</type>
                </param>
                <param name="dwPriority">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertRemoveStoreFromCollection" access="public" lib="crypt32" static="true">
                <type>void</type>
                <param name="hCollectionStore">
                    <type>void*</type>
                </param>
                <param name="hSiblingStore">
                    <type>void*</type>
                </param>
            </function>
            <function name="CertControlStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="dwCtrlType">
                    <type>uint</type>
                </param>
                <param name="pvCtrlPara">
                    <type>void*</type>
                </param>
            </function>
            <function name="CertSetStoreProperty" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="dwPropId">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvData">
                    <type>void*</type>
                </param>
            </function>
            <function name="CertGetStoreProperty" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="dwPropId">
                    <type>uint</type>
                </param>
                <param name="pvData">
                    <type>void*</type>
                </param>
                <param name="pcbData">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CertCreateContext" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="const void *">void*</type>
                <param name="dwContextType">
                    <type>uint</type>
                </param>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="pbEncoded">
                    <type>byte*</type>
                </param>
                <param name="cbEncoded">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pCreatePara">
                    <type>CERT_CREATE_CONTEXT_PARA*</type>
                </param>
            </function>
            <function name="CertRegisterSystemStore" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pvSystemStore">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pStoreInfo">
                    <type>CERT_SYSTEM_STORE_INFO*</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
            </function>
            <function name="CertRegisterPhysicalStore" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pvSystemStore">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pwszStoreName">
                    <type>ushort*</type>
                </param>
                <param name="pStoreInfo">
                    <type>CERT_PHYSICAL_STORE_INFO*</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
            </function>
            <function name="CertUnregisterSystemStore" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pvSystemStore">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertUnregisterPhysicalStore" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pvSystemStore">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pwszStoreName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="CertEnumSystemStoreLocation" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvArg">
                    <type>void*</type>
                </param>
                <param name="pfnEnum">
                    <type>delegate* unmanaged&lt;ushort*, uint, void*, void*, int&gt;</type>
                </param>
            </function>
            <function name="CertEnumSystemStore" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvSystemStoreLocationPara">
                    <type>void*</type>
                </param>
                <param name="pvArg">
                    <type>void*</type>
                </param>
                <param name="pfnEnum">
                    <type>delegate* unmanaged&lt;void*, uint, CERT_SYSTEM_STORE_INFO*, void*, void*, int&gt;</type>
                </param>
            </function>
            <function name="CertEnumPhysicalStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pvSystemStore">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvArg">
                    <type>void*</type>
                </param>
                <param name="pfnEnum">
                    <type>delegate* unmanaged&lt;void*, uint, ushort*, CERT_PHYSICAL_STORE_INFO*, void*, void*, int&gt;</type>
                </param>
            </function>
            <function name="CertGetEnhancedKeyUsage" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pUsage">
                    <type>CTL_USAGE*</type>
                </param>
                <param name="pcbUsage">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CertSetEnhancedKeyUsage" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="pUsage">
                    <type>CTL_USAGE*</type>
                </param>
            </function>
            <function name="CertAddEnhancedKeyUsageIdentifier" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="pszUsageIdentifier">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="CertRemoveEnhancedKeyUsageIdentifier" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="pszUsageIdentifier">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="CertGetValidUsages" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="cCerts">
                    <type>uint</type>
                </param>
                <param name="rghCerts">
                    <type>CERT_CONTEXT**</type>
                </param>
                <param name="cNumOIDs">
                    <type>int*</type>
                </param>
                <param name="rghOIDs">
                    <type>sbyte**</type>
                </param>
                <param name="pcbOIDs">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptMsgGetAndVerifySigner" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptMsg">
                    <type>void*</type>
                </param>
                <param name="cSignerStore">
                    <type>uint</type>
                </param>
                <param name="rghSignerStore">
                    <type>void**</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="ppSigner">
                    <type>CERT_CONTEXT**</type>
                </param>
                <param name="pdwSignerIndex">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptMsgSignCTL" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwMsgEncodingType">
                    <type>uint</type>
                </param>
                <param name="pbCtlContent">
                    <type>byte*</type>
                </param>
                <param name="cbCtlContent">
                    <type>uint</type>
                </param>
                <param name="pSignInfo">
                    <type>CMSG_SIGNED_ENCODE_INFO*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pbEncoded">
                    <type>byte*</type>
                </param>
                <param name="pcbEncoded">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptMsgEncodeAndSignCTL" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwMsgEncodingType">
                    <type>uint</type>
                </param>
                <param name="pCtlInfo">
                    <type>CTL_INFO*</type>
                </param>
                <param name="pSignInfo">
                    <type>CMSG_SIGNED_ENCODE_INFO*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pbEncoded">
                    <type>byte*</type>
                </param>
                <param name="pcbEncoded">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CertFindSubjectInSortedCTL" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pSubjectIdentifier">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
                <param name="pCtlContext">
                    <type>CTL_CONTEXT*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
                <param name="pEncodedAttributes">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
            </function>
            <function name="CertEnumSubjectInSortedCTL" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pCtlContext">
                    <type>CTL_CONTEXT*</type>
                </param>
                <param name="ppvNextSubject">
                    <type>void**</type>
                </param>
                <param name="pSubjectIdentifier">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
                <param name="pEncodedAttributes">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
            </function>
            <function name="CertVerifyCTLUsage" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="dwSubjectType">
                    <type>uint</type>
                </param>
                <param name="pvSubject">
                    <type>void*</type>
                </param>
                <param name="pSubjectUsage">
                    <type>CTL_USAGE*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pVerifyUsagePara">
                    <type>CTL_VERIFY_USAGE_PARA*</type>
                </param>
                <param name="pVerifyUsageStatus">
                    <type>CTL_VERIFY_USAGE_STATUS*</type>
                </param>
            </function>
            <function name="CertVerifyRevocation" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwEncodingType">
                    <type>uint</type>
                </param>
                <param name="dwRevType">
                    <type>uint</type>
                </param>
                <param name="cContext">
                    <type>uint</type>
                </param>
                <param name="rgpvContext">
                    <type>void**</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pRevPara">
                    <type>CERT_REVOCATION_PARA*</type>
                </param>
                <param name="pRevStatus">
                    <type>CERT_REVOCATION_STATUS*</type>
                </param>
            </function>
            <function name="CertCompareIntegerBlob" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pInt1">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
                <param name="pInt2">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
            </function>
            <function name="CertCompareCertificate" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pCertId1">
                    <type>CERT_INFO*</type>
                </param>
                <param name="pCertId2">
                    <type>CERT_INFO*</type>
                </param>
            </function>
            <function name="CertCompareCertificateName" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pCertName1">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
                <param name="pCertName2">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
            </function>
            <function name="CertIsRDNAttrsInCertificateName" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pCertName">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
                <param name="pRDN">
                    <type>CERT_RDN*</type>
                </param>
            </function>
            <function name="CertComparePublicKeyInfo" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pPublicKey1">
                    <type>CERT_PUBLIC_KEY_INFO*</type>
                </param>
                <param name="pPublicKey2">
                    <type>CERT_PUBLIC_KEY_INFO*</type>
                </param>
            </function>
            <function name="CertGetPublicKeyLength" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="DWORD">uint</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pPublicKey">
                    <type>CERT_PUBLIC_KEY_INFO*</type>
                </param>
            </function>
            <function name="CryptVerifyCertificateSignature" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptProv">
                    <type>nuint</type>
                </param>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pbEncoded">
                    <type>byte*</type>
                </param>
                <param name="cbEncoded">
                    <type>uint</type>
                </param>
                <param name="pPublicKey">
                    <type>CERT_PUBLIC_KEY_INFO*</type>
                </param>
            </function>
            <function name="CryptVerifyCertificateSignatureEx" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptProv">
                    <type>nuint</type>
                </param>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="dwSubjectType">
                    <type>uint</type>
                </param>
                <param name="pvSubject">
                    <type>void*</type>
                </param>
                <param name="dwIssuerType">
                    <type>uint</type>
                </param>
                <param name="pvIssuer">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvExtra">
                    <type>void*</type>
                </param>
            </function>
            <function name="CertIsStrongHashToSign" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pStrongSignPara">
                    <type>CERT_STRONG_SIGN_PARA*</type>
                </param>
                <param name="pwszCNGHashAlgid">
                    <type>ushort*</type>
                </param>
                <param name="pSigningCert">
                    <type>CERT_CONTEXT*</type>
                </param>
            </function>
            <function name="CryptHashToBeSigned" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptProv">
                    <type>nuint</type>
                </param>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pbEncoded">
                    <type>byte*</type>
                </param>
                <param name="cbEncoded">
                    <type>uint</type>
                </param>
                <param name="pbComputedHash">
                    <type>byte*</type>
                </param>
                <param name="pcbComputedHash">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptHashCertificate" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptProv">
                    <type>nuint</type>
                </param>
                <param name="Algid">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pbEncoded">
                    <type>byte*</type>
                </param>
                <param name="cbEncoded">
                    <type>uint</type>
                </param>
                <param name="pbComputedHash">
                    <type>byte*</type>
                </param>
                <param name="pcbComputedHash">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptHashCertificate2" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pwszCNGHashAlgid">
                    <type>ushort*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
                <param name="pbEncoded">
                    <type>byte*</type>
                </param>
                <param name="cbEncoded">
                    <type>uint</type>
                </param>
                <param name="pbComputedHash">
                    <type>byte*</type>
                </param>
                <param name="pcbComputedHash">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptSignCertificate" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptProvOrNCryptKey">
                    <type>nuint</type>
                </param>
                <param name="dwKeySpec">
                    <type>uint</type>
                </param>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pbEncodedToBeSigned">
                    <type>byte*</type>
                </param>
                <param name="cbEncodedToBeSigned">
                    <type>uint</type>
                </param>
                <param name="pSignatureAlgorithm">
                    <type>CRYPT_ALGORITHM_IDENTIFIER*</type>
                </param>
                <param name="pvHashAuxInfo">
                    <type>void*</type>
                </param>
                <param name="pbSignature">
                    <type>byte*</type>
                </param>
                <param name="pcbSignature">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptSignAndEncodeCertificate" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptProvOrNCryptKey">
                    <type>nuint</type>
                </param>
                <param name="dwKeySpec">
                    <type>uint</type>
                </param>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="lpszStructType">
                    <type>sbyte*</type>
                </param>
                <param name="pvStructInfo">
                    <type>void*</type>
                </param>
                <param name="pSignatureAlgorithm">
                    <type>CRYPT_ALGORITHM_IDENTIFIER*</type>
                </param>
                <param name="pvHashAuxInfo">
                    <type>void*</type>
                </param>
                <param name="pbEncoded">
                    <type>byte*</type>
                </param>
                <param name="pcbEncoded">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CertVerifyTimeValidity" access="public" lib="crypt32" static="true">
                <type native="LONG">int</type>
                <param name="pTimeToVerify">
                    <type>FILETIME*</type>
                </param>
                <param name="pCertInfo">
                    <type>CERT_INFO*</type>
                </param>
            </function>
            <function name="CertVerifyCRLTimeValidity" access="public" lib="crypt32" static="true">
                <type native="LONG">int</type>
                <param name="pTimeToVerify">
                    <type>FILETIME*</type>
                </param>
                <param name="pCrlInfo">
                    <type>CRL_INFO*</type>
                </param>
            </function>
            <function name="CertVerifyValidityNesting" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pSubjectInfo">
                    <type>CERT_INFO*</type>
                </param>
                <param name="pIssuerInfo">
                    <type>CERT_INFO*</type>
                </param>
            </function>
            <function name="CertVerifyCRLRevocation" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pCertId">
                    <type>CERT_INFO*</type>
                </param>
                <param name="cCrlInfo">
                    <type>uint</type>
                </param>
                <param name="rgpCrlInfo">
                    <type>CRL_INFO**</type>
                </param>
            </function>
            <function name="CertAlgIdToOID" access="public" lib="crypt32" static="true">
                <type native="LPCSTR">sbyte*</type>
                <param name="dwAlgId">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertOIDToAlgId" access="public" lib="crypt32" static="true">
                <type native="DWORD">uint</type>
                <param name="pszObjId">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="CertFindExtension" access="public" lib="crypt32" static="true">
                <type native="PCERT_EXTENSION">CERT_EXTENSION*</type>
                <param name="pszObjId">
                    <type>sbyte*</type>
                </param>
                <param name="cExtensions">
                    <type>uint</type>
                </param>
                <param name="rgExtensions">
                    <type>CERT_EXTENSION*</type>
                </param>
            </function>
            <function name="CertFindAttribute" access="public" lib="crypt32" static="true">
                <type native="PCRYPT_ATTRIBUTE">CRYPT_ATTRIBUTE*</type>
                <param name="pszObjId">
                    <type>sbyte*</type>
                </param>
                <param name="cAttr">
                    <type>uint</type>
                </param>
                <param name="rgAttr">
                    <type>CRYPT_ATTRIBUTE*</type>
                </param>
            </function>
            <function name="CertFindRDNAttr" access="public" lib="crypt32" static="true">
                <type native="PCERT_RDN_ATTR">CERT_RDN_ATTR*</type>
                <param name="pszObjId">
                    <type>sbyte*</type>
                </param>
                <param name="pName">
                    <type>CERT_NAME_INFO*</type>
                </param>
            </function>
            <function name="CertGetIntendedKeyUsage" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pCertInfo">
                    <type>CERT_INFO*</type>
                </param>
                <param name="pbKeyUsage">
                    <type>byte*</type>
                </param>
                <param name="cbKeyUsage">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptInstallDefaultContext" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptProv">
                    <type>nuint</type>
                </param>
                <param name="dwDefaultType">
                    <type>uint</type>
                </param>
                <param name="pvDefaultPara">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
                <param name="phDefaultContext">
                    <type>void**</type>
                </param>
            </function>
            <function name="CryptUninstallDefaultContext" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hDefaultContext">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
            </function>
            <function name="CryptExportPublicKeyInfo" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptProvOrNCryptKey">
                    <type>nuint</type>
                </param>
                <param name="dwKeySpec">
                    <type>uint</type>
                </param>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pInfo">
                    <type>CERT_PUBLIC_KEY_INFO*</type>
                </param>
                <param name="pcbInfo">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptExportPublicKeyInfoEx" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptProvOrNCryptKey">
                    <type>nuint</type>
                </param>
                <param name="dwKeySpec">
                    <type>uint</type>
                </param>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pszPublicKeyObjId">
                    <type>sbyte*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvAuxInfo">
                    <type>void*</type>
                </param>
                <param name="pInfo">
                    <type>CERT_PUBLIC_KEY_INFO*</type>
                </param>
                <param name="pcbInfo">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptExportPublicKeyInfoFromBCryptKeyHandle" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="hBCryptKey">
                    <type>void*</type>
                </param>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pszPublicKeyObjId">
                    <type>sbyte*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvAuxInfo">
                    <type>void*</type>
                </param>
                <param name="pInfo">
                    <type>CERT_PUBLIC_KEY_INFO*</type>
                </param>
                <param name="pcbInfo">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptImportPublicKeyInfo" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptProv">
                    <type>nuint</type>
                </param>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pInfo">
                    <type>CERT_PUBLIC_KEY_INFO*</type>
                </param>
                <param name="phKey">
                    <type>nuint*</type>
                </param>
            </function>
            <function name="CryptImportPublicKeyInfoEx" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptProv">
                    <type>nuint</type>
                </param>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pInfo">
                    <type>CERT_PUBLIC_KEY_INFO*</type>
                </param>
                <param name="aiKeyAlg">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvAuxInfo">
                    <type>void*</type>
                </param>
                <param name="phKey">
                    <type>nuint*</type>
                </param>
            </function>
            <function name="CryptImportPublicKeyInfoEx2" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pInfo">
                    <type>CERT_PUBLIC_KEY_INFO*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvAuxInfo">
                    <type>void*</type>
                </param>
                <param name="phKey">
                    <type>void**</type>
                </param>
            </function>
            <function name="CryptAcquireCertificatePrivateKey" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCert">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvParameters">
                    <type>void*</type>
                </param>
                <param name="phCryptProvOrNCryptKey">
                    <type>nuint*</type>
                </param>
                <param name="pdwKeySpec">
                    <type>uint*</type>
                </param>
                <param name="pfCallerFreeProvOrNCryptKey">
                    <type>int*</type>
                </param>
            </function>
            <function name="CryptFindCertificateKeyProvInfo" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCert">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
            </function>
            <function name="CryptImportPKCS8" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="sPrivateKeyAndParams">
                    <type>CRYPT_PKCS8_IMPORT_PARAMS</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="phCryptProv">
                    <type>nuint*</type>
                </param>
                <param name="pvAuxInfo">
                    <type>void*</type>
                </param>
            </function>
            <function name="CryptExportPKCS8" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptProv">
                    <type>nuint</type>
                </param>
                <param name="dwKeySpec">
                    <type>uint</type>
                </param>
                <param name="pszPrivateKeyObjId">
                    <type>sbyte*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvAuxInfo">
                    <type>void*</type>
                </param>
                <param name="pbPrivateKeyBlob">
                    <type>byte*</type>
                </param>
                <param name="pcbPrivateKeyBlob">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptExportPKCS8Ex" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="psExportParams">
                    <type>CRYPT_PKCS8_EXPORT_PARAMS*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvAuxInfo">
                    <type>void*</type>
                </param>
                <param name="pbPrivateKeyBlob">
                    <type>byte*</type>
                </param>
                <param name="pcbPrivateKeyBlob">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptHashPublicKeyInfo" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCryptProv">
                    <type>nuint</type>
                </param>
                <param name="Algid">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pInfo">
                    <type>CERT_PUBLIC_KEY_INFO*</type>
                </param>
                <param name="pbComputedHash">
                    <type>byte*</type>
                </param>
                <param name="pcbComputedHash">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CertRDNValueToStrA" access="public" lib="crypt32" static="true">
                <type native="DWORD">uint</type>
                <param name="dwValueType">
                    <type>uint</type>
                </param>
                <param name="pValue">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
                <param name="psz">
                    <type>sbyte*</type>
                </param>
                <param name="csz">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertRDNValueToStrW" access="public" lib="crypt32" static="true">
                <type native="DWORD">uint</type>
                <param name="dwValueType">
                    <type>uint</type>
                </param>
                <param name="pValue">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
                <param name="psz">
                    <type>ushort*</type>
                </param>
                <param name="csz">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertNameToStrA" access="public" lib="crypt32" static="true">
                <type native="DWORD">uint</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pName">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
                <param name="dwStrType">
                    <type>uint</type>
                </param>
                <param name="psz">
                    <type>sbyte*</type>
                </param>
                <param name="csz">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertNameToStrW" access="public" lib="crypt32" static="true">
                <type native="DWORD">uint</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pName">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
                <param name="dwStrType">
                    <type>uint</type>
                </param>
                <param name="psz">
                    <type>ushort*</type>
                </param>
                <param name="csz">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertStrToNameA" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pszX500">
                    <type>sbyte*</type>
                </param>
                <param name="dwStrType">
                    <type>uint</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
                <param name="pbEncoded">
                    <type>byte*</type>
                </param>
                <param name="pcbEncoded">
                    <type>uint*</type>
                </param>
                <param name="ppszError">
                    <type>sbyte**</type>
                </param>
            </function>
            <function name="CertStrToNameW" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pszX500">
                    <type>ushort*</type>
                </param>
                <param name="dwStrType">
                    <type>uint</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
                <param name="pbEncoded">
                    <type>byte*</type>
                </param>
                <param name="pcbEncoded">
                    <type>uint*</type>
                </param>
                <param name="ppszError">
                    <type>ushort**</type>
                </param>
            </function>
            <function name="CertGetNameStringA" access="public" lib="crypt32" static="true">
                <type native="DWORD">uint</type>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="dwType">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvTypePara">
                    <type>void*</type>
                </param>
                <param name="pszNameString">
                    <type>sbyte*</type>
                </param>
                <param name="cchNameString">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertGetNameStringW" access="public" lib="crypt32" static="true">
                <type native="DWORD">uint</type>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="dwType">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvTypePara">
                    <type>void*</type>
                </param>
                <param name="pszNameString">
                    <type>ushort*</type>
                </param>
                <param name="cchNameString">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptSignMessage" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pSignPara">
                    <type>CRYPT_SIGN_MESSAGE_PARA*</type>
                </param>
                <param name="fDetachedSignature">
                    <type>int</type>
                </param>
                <param name="cToBeSigned">
                    <type>uint</type>
                </param>
                <param name="rgpbToBeSigned">
                    <type>byte**</type>
                </param>
                <param name="rgcbToBeSigned">
                    <type>uint*</type>
                </param>
                <param name="pbSignedBlob">
                    <type>byte*</type>
                </param>
                <param name="pcbSignedBlob">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptVerifyMessageSignature" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pVerifyPara">
                    <type>CRYPT_VERIFY_MESSAGE_PARA*</type>
                </param>
                <param name="dwSignerIndex">
                    <type>uint</type>
                </param>
                <param name="pbSignedBlob">
                    <type>byte*</type>
                </param>
                <param name="cbSignedBlob">
                    <type>uint</type>
                </param>
                <param name="pbDecoded">
                    <type>byte*</type>
                </param>
                <param name="pcbDecoded">
                    <type>uint*</type>
                </param>
                <param name="ppSignerCert">
                    <type>CERT_CONTEXT**</type>
                </param>
            </function>
            <function name="CryptGetMessageSignerCount" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="LONG">int</type>
                <param name="dwMsgEncodingType">
                    <type>uint</type>
                </param>
                <param name="pbSignedBlob">
                    <type>byte*</type>
                </param>
                <param name="cbSignedBlob">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptGetMessageCertificates" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="HCERTSTORE">void*</type>
                <param name="dwMsgAndCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="hCryptProv">
                    <type>nuint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pbSignedBlob">
                    <type>byte*</type>
                </param>
                <param name="cbSignedBlob">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptVerifyDetachedMessageSignature" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pVerifyPara">
                    <type>CRYPT_VERIFY_MESSAGE_PARA*</type>
                </param>
                <param name="dwSignerIndex">
                    <type>uint</type>
                </param>
                <param name="pbDetachedSignBlob">
                    <type>byte*</type>
                </param>
                <param name="cbDetachedSignBlob">
                    <type>uint</type>
                </param>
                <param name="cToBeSigned">
                    <type>uint</type>
                </param>
                <param name="rgpbToBeSigned">
                    <type>byte**</type>
                </param>
                <param name="rgcbToBeSigned">
                    <type>uint*</type>
                </param>
                <param name="ppSignerCert">
                    <type>CERT_CONTEXT**</type>
                </param>
            </function>
            <function name="CryptEncryptMessage" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pEncryptPara">
                    <type>CRYPT_ENCRYPT_MESSAGE_PARA*</type>
                </param>
                <param name="cRecipientCert">
                    <type>uint</type>
                </param>
                <param name="rgpRecipientCert">
                    <type>CERT_CONTEXT**</type>
                </param>
                <param name="pbToBeEncrypted">
                    <type>byte*</type>
                </param>
                <param name="cbToBeEncrypted">
                    <type>uint</type>
                </param>
                <param name="pbEncryptedBlob">
                    <type>byte*</type>
                </param>
                <param name="pcbEncryptedBlob">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptDecryptMessage" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pDecryptPara">
                    <type>CRYPT_DECRYPT_MESSAGE_PARA*</type>
                </param>
                <param name="pbEncryptedBlob">
                    <type>byte*</type>
                </param>
                <param name="cbEncryptedBlob">
                    <type>uint</type>
                </param>
                <param name="pbDecrypted">
                    <type>byte*</type>
                </param>
                <param name="pcbDecrypted">
                    <type>uint*</type>
                </param>
                <param name="ppXchgCert">
                    <type>CERT_CONTEXT**</type>
                </param>
            </function>
            <function name="CryptSignAndEncryptMessage" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pSignPara">
                    <type>CRYPT_SIGN_MESSAGE_PARA*</type>
                </param>
                <param name="pEncryptPara">
                    <type>CRYPT_ENCRYPT_MESSAGE_PARA*</type>
                </param>
                <param name="cRecipientCert">
                    <type>uint</type>
                </param>
                <param name="rgpRecipientCert">
                    <type>CERT_CONTEXT**</type>
                </param>
                <param name="pbToBeSignedAndEncrypted">
                    <type>byte*</type>
                </param>
                <param name="cbToBeSignedAndEncrypted">
                    <type>uint</type>
                </param>
                <param name="pbSignedAndEncryptedBlob">
                    <type>byte*</type>
                </param>
                <param name="pcbSignedAndEncryptedBlob">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptDecryptAndVerifyMessageSignature" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pDecryptPara">
                    <type>CRYPT_DECRYPT_MESSAGE_PARA*</type>
                </param>
                <param name="pVerifyPara">
                    <type>CRYPT_VERIFY_MESSAGE_PARA*</type>
                </param>
                <param name="dwSignerIndex">
                    <type>uint</type>
                </param>
                <param name="pbEncryptedBlob">
                    <type>byte*</type>
                </param>
                <param name="cbEncryptedBlob">
                    <type>uint</type>
                </param>
                <param name="pbDecrypted">
                    <type>byte*</type>
                </param>
                <param name="pcbDecrypted">
                    <type>uint*</type>
                </param>
                <param name="ppXchgCert">
                    <type>CERT_CONTEXT**</type>
                </param>
                <param name="ppSignerCert">
                    <type>CERT_CONTEXT**</type>
                </param>
            </function>
            <function name="CryptDecodeMessage" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwMsgTypeFlags">
                    <type>uint</type>
                </param>
                <param name="pDecryptPara">
                    <type>CRYPT_DECRYPT_MESSAGE_PARA*</type>
                </param>
                <param name="pVerifyPara">
                    <type>CRYPT_VERIFY_MESSAGE_PARA*</type>
                </param>
                <param name="dwSignerIndex">
                    <type>uint</type>
                </param>
                <param name="pbEncodedBlob">
                    <type>byte*</type>
                </param>
                <param name="cbEncodedBlob">
                    <type>uint</type>
                </param>
                <param name="dwPrevInnerContentType">
                    <type>uint</type>
                </param>
                <param name="pdwMsgType">
                    <type>uint*</type>
                </param>
                <param name="pdwInnerContentType">
                    <type>uint*</type>
                </param>
                <param name="pbDecoded">
                    <type>byte*</type>
                </param>
                <param name="pcbDecoded">
                    <type>uint*</type>
                </param>
                <param name="ppXchgCert">
                    <type>CERT_CONTEXT**</type>
                </param>
                <param name="ppSignerCert">
                    <type>CERT_CONTEXT**</type>
                </param>
            </function>
            <function name="CryptHashMessage" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pHashPara">
                    <type>CRYPT_HASH_MESSAGE_PARA*</type>
                </param>
                <param name="fDetachedHash">
                    <type>int</type>
                </param>
                <param name="cToBeHashed">
                    <type>uint</type>
                </param>
                <param name="rgpbToBeHashed">
                    <type>byte**</type>
                </param>
                <param name="rgcbToBeHashed">
                    <type>uint*</type>
                </param>
                <param name="pbHashedBlob">
                    <type>byte*</type>
                </param>
                <param name="pcbHashedBlob">
                    <type>uint*</type>
                </param>
                <param name="pbComputedHash">
                    <type>byte*</type>
                </param>
                <param name="pcbComputedHash">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptVerifyMessageHash" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pHashPara">
                    <type>CRYPT_HASH_MESSAGE_PARA*</type>
                </param>
                <param name="pbHashedBlob">
                    <type>byte*</type>
                </param>
                <param name="cbHashedBlob">
                    <type>uint</type>
                </param>
                <param name="pbToBeHashed">
                    <type>byte*</type>
                </param>
                <param name="pcbToBeHashed">
                    <type>uint*</type>
                </param>
                <param name="pbComputedHash">
                    <type>byte*</type>
                </param>
                <param name="pcbComputedHash">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptVerifyDetachedMessageHash" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pHashPara">
                    <type>CRYPT_HASH_MESSAGE_PARA*</type>
                </param>
                <param name="pbDetachedHashBlob">
                    <type>byte*</type>
                </param>
                <param name="cbDetachedHashBlob">
                    <type>uint</type>
                </param>
                <param name="cToBeHashed">
                    <type>uint</type>
                </param>
                <param name="rgpbToBeHashed">
                    <type>byte**</type>
                </param>
                <param name="rgcbToBeHashed">
                    <type>uint*</type>
                </param>
                <param name="pbComputedHash">
                    <type>byte*</type>
                </param>
                <param name="pcbComputedHash">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptSignMessageWithKey" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pSignPara">
                    <type>CRYPT_KEY_SIGN_MESSAGE_PARA*</type>
                </param>
                <param name="pbToBeSigned">
                    <type>byte*</type>
                </param>
                <param name="cbToBeSigned">
                    <type>uint</type>
                </param>
                <param name="pbSignedBlob">
                    <type>byte*</type>
                </param>
                <param name="pcbSignedBlob">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptVerifyMessageSignatureWithKey" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pVerifyPara">
                    <type>CRYPT_KEY_VERIFY_MESSAGE_PARA*</type>
                </param>
                <param name="pPublicKeyInfo">
                    <type>CERT_PUBLIC_KEY_INFO*</type>
                </param>
                <param name="pbSignedBlob">
                    <type>byte*</type>
                </param>
                <param name="cbSignedBlob">
                    <type>uint</type>
                </param>
                <param name="pbDecoded">
                    <type>byte*</type>
                </param>
                <param name="pcbDecoded">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CertOpenSystemStoreA" access="public" lib="crypt32" static="true">
                <type native="HCERTSTORE">void*</type>
                <param name="hProv">
                    <type>nuint</type>
                </param>
                <param name="szSubsystemProtocol">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="CertOpenSystemStoreW" access="public" lib="crypt32" static="true">
                <type native="HCERTSTORE">void*</type>
                <param name="hProv">
                    <type>nuint</type>
                </param>
                <param name="szSubsystemProtocol">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="CertAddEncodedCertificateToSystemStoreA" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="szCertStoreName">
                    <type>sbyte*</type>
                </param>
                <param name="pbCertEncoded">
                    <type>byte*</type>
                </param>
                <param name="cbCertEncoded">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertAddEncodedCertificateToSystemStoreW" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="szCertStoreName">
                    <type>ushort*</type>
                </param>
                <param name="pbCertEncoded">
                    <type>byte*</type>
                </param>
                <param name="cbCertEncoded">
                    <type>uint</type>
                </param>
            </function>
            <function name="FindCertsByIssuer" access="public" lib="crypt32" static="true">
                <type native="HRESULT">int</type>
                <param name="pCertChains">
                    <type>CERT_CHAIN*</type>
                </param>
                <param name="pcbCertChains">
                    <type>uint*</type>
                </param>
                <param name="pcCertChains">
                    <type>uint*</type>
                </param>
                <param name="pbEncodedIssuerName">
                    <type>byte*</type>
                </param>
                <param name="cbEncodedIssuerName">
                    <type>uint</type>
                </param>
                <param name="pwszPurpose">
                    <type>ushort*</type>
                </param>
                <param name="dwKeySpec">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptQueryObject" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwObjectType">
                    <type>uint</type>
                </param>
                <param name="pvObject">
                    <type>void*</type>
                </param>
                <param name="dwExpectedContentTypeFlags">
                    <type>uint</type>
                </param>
                <param name="dwExpectedFormatTypeFlags">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pdwMsgAndCertEncodingType">
                    <type>uint*</type>
                </param>
                <param name="pdwContentType">
                    <type>uint*</type>
                </param>
                <param name="pdwFormatType">
                    <type>uint*</type>
                </param>
                <param name="phCertStore">
                    <type>void**</type>
                </param>
                <param name="phMsg">
                    <type>void**</type>
                </param>
                <param name="ppvContext">
                    <type>void**</type>
                </param>
            </function>
            <function name="CryptMemAlloc" access="public" lib="crypt32" static="true">
                <type native="LPVOID">void*</type>
                <param name="cbSize">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptMemRealloc" access="public" lib="crypt32" static="true">
                <type native="LPVOID">void*</type>
                <param name="pv">
                    <type>void*</type>
                </param>
                <param name="cbSize">
                    <type>uint</type>
                </param>
            </function>
            <function name="CryptMemFree" access="public" lib="crypt32" static="true">
                <type>void</type>
                <param name="pv">
                    <type>void*</type>
                </param>
            </function>
            <function name="CryptCreateAsyncHandle" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="phAsync">
                    <type>IntPtr*</type>
                </param>
            </function>
            <function name="CryptSetAsyncParam" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="hAsync">
                    <type>IntPtr</type>
                </param>
                <param name="pszParamOid">
                    <type>sbyte*</type>
                </param>
                <param name="pvParam">
                    <type>void*</type>
                </param>
                <param name="pfnFree">
                    <type>delegate* unmanaged&lt;sbyte*, void*, void&gt;</type>
                </param>
            </function>
            <function name="CryptGetAsyncParam" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="hAsync">
                    <type>IntPtr</type>
                </param>
                <param name="pszParamOid">
                    <type>sbyte*</type>
                </param>
                <param name="ppvParam">
                    <type>void**</type>
                </param>
                <param name="ppfnFree">
                    <type>delegate* unmanaged&lt;sbyte*, void*, void&gt;*</type>
                </param>
            </function>
            <function name="CryptCloseAsyncHandle" access="public" lib="crypt32" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hAsync">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="CryptRetrieveObjectByUrlA" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pszUrl">
                    <type>sbyte*</type>
                </param>
                <param name="pszObjectOid">
                    <type>sbyte*</type>
                </param>
                <param name="dwRetrievalFlags">
                    <type>uint</type>
                </param>
                <param name="dwTimeout">
                    <type>uint</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <param name="hAsyncRetrieve">
                    <type>IntPtr</type>
                </param>
                <param name="pCredentials">
                    <type>CRYPT_CREDENTIALS*</type>
                </param>
                <param name="pvVerify">
                    <type>void*</type>
                </param>
                <param name="pAuxInfo">
                    <type>CRYPT_RETRIEVE_AUX_INFO*</type>
                </param>
            </function>
            <function name="CryptRetrieveObjectByUrlW" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pszUrl">
                    <type>ushort*</type>
                </param>
                <param name="pszObjectOid">
                    <type>sbyte*</type>
                </param>
                <param name="dwRetrievalFlags">
                    <type>uint</type>
                </param>
                <param name="dwTimeout">
                    <type>uint</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <param name="hAsyncRetrieve">
                    <type>IntPtr</type>
                </param>
                <param name="pCredentials">
                    <type>CRYPT_CREDENTIALS*</type>
                </param>
                <param name="pvVerify">
                    <type>void*</type>
                </param>
                <param name="pAuxInfo">
                    <type>CRYPT_RETRIEVE_AUX_INFO*</type>
                </param>
            </function>
            <function name="CryptInstallCancelRetrieval" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pfnCancel">
                    <type>delegate* unmanaged&lt;uint, void*, int&gt;</type>
                </param>
                <param name="pvArg">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
            </function>
            <function name="CryptUninstallCancelRetrieval" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
            </function>
            <function name="CryptCancelAsyncRetrieval" access="public" lib="crypt32" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hAsyncRetrieval">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="CryptGetObjectUrl" access="public" lib="cryptnet" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pszUrlOid">
                    <type>sbyte*</type>
                </param>
                <param name="pvPara">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pUrlArray">
                    <type>CRYPT_URL_ARRAY*</type>
                </param>
                <param name="pcbUrlArray">
                    <type>uint*</type>
                </param>
                <param name="pUrlInfo">
                    <type>CRYPT_URL_INFO*</type>
                </param>
                <param name="pcbUrlInfo">
                    <type>uint*</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
            </function>
            <function name="CryptGetTimeValidObject" access="public" lib="cryptnet" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pszTimeValidOid">
                    <type>sbyte*</type>
                </param>
                <param name="pvPara">
                    <type>void*</type>
                </param>
                <param name="pIssuer">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="pftValidFor">
                    <type>FILETIME*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="dwTimeout">
                    <type>uint</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <param name="pCredentials">
                    <type>CRYPT_CREDENTIALS*</type>
                </param>
                <param name="pExtraInfo">
                    <type>CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO*</type>
                </param>
            </function>
            <function name="CryptFlushTimeValidObject" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pszFlushTimeValidOid">
                    <type>sbyte*</type>
                </param>
                <param name="pvPara">
                    <type>void*</type>
                </param>
                <param name="pIssuer">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
            </function>
            <function name="CertCreateSelfSignCertificate" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="PCCERT_CONTEXT">CERT_CONTEXT*</type>
                <param name="hCryptProvOrNCryptKey">
                    <type>nuint</type>
                </param>
                <param name="pSubjectIssuerBlob">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pKeyProvInfo">
                    <type>CRYPT_KEY_PROV_INFO*</type>
                </param>
                <param name="pSignatureAlgorithm">
                    <type>CRYPT_ALGORITHM_IDENTIFIER*</type>
                </param>
                <param name="pStartTime">
                    <type>SYSTEMTIME*</type>
                </param>
                <param name="pEndTime">
                    <type>SYSTEMTIME*</type>
                </param>
                <param name="pExtensions">
                    <type>CERT_EXTENSIONS*</type>
                </param>
            </function>
            <function name="CryptGetKeyIdentifierProperty" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pKeyIdentifier">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
                <param name="dwPropId">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pwszComputerName">
                    <type>ushort*</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
                <param name="pvData">
                    <type>void*</type>
                </param>
                <param name="pcbData">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptSetKeyIdentifierProperty" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pKeyIdentifier">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
                <param name="dwPropId">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pwszComputerName">
                    <type>ushort*</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
                <param name="pvData">
                    <type>void*</type>
                </param>
            </function>
            <function name="CryptEnumKeyIdentifierProperties" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pKeyIdentifier">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
                <param name="dwPropId">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pwszComputerName">
                    <type>ushort*</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
                <param name="pvArg">
                    <type>void*</type>
                </param>
                <param name="pfnEnum">
                    <type>delegate* unmanaged&lt;CRYPTOAPI_BLOB*, uint, void*, void*, uint, uint*, void**, uint*, int&gt;</type>
                </param>
            </function>
            <function name="CryptCreateKeyIdentifierFromCSP" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="pszPubKeyOID">
                    <type>sbyte*</type>
                </param>
                <param name="pPubKeyStruc">
                    <type>PUBLICKEYSTRUC*</type>
                </param>
                <param name="cbPubKeyStruc">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
                <param name="pbHash">
                    <type>byte*</type>
                </param>
                <param name="pcbHash">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CertCreateCertificateChainEngine" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pConfig">
                    <type>CERT_CHAIN_ENGINE_CONFIG*</type>
                </param>
                <param name="phChainEngine">
                    <type>IntPtr*</type>
                </param>
            </function>
            <function name="CertFreeCertificateChainEngine" access="public" lib="crypt32" static="true" unsafe="true">
                <type>void</type>
                <param name="hChainEngine">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="CertResyncCertificateChainEngine" access="public" lib="crypt32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hChainEngine">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="CertGetCertificateChain" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hChainEngine">
                    <type>IntPtr</type>
                </param>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="pTime">
                    <type>FILETIME*</type>
                </param>
                <param name="hAdditionalStore">
                    <type>void*</type>
                </param>
                <param name="pChainPara">
                    <type>CERT_CHAIN_PARA*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
                <param name="ppChainContext">
                    <type>CERT_CHAIN_CONTEXT**</type>
                </param>
            </function>
            <function name="CertFreeCertificateChain" access="public" lib="crypt32" static="true">
                <type>void</type>
                <param name="pChainContext">
                    <type>CERT_CHAIN_CONTEXT*</type>
                </param>
            </function>
            <function name="CertDuplicateCertificateChain" access="public" lib="crypt32" static="true">
                <type native="PCCERT_CHAIN_CONTEXT">CERT_CHAIN_CONTEXT*</type>
                <param name="pChainContext">
                    <type>CERT_CHAIN_CONTEXT*</type>
                </param>
            </function>
            <function name="CertFindChainInStore" access="public" lib="crypt32" static="true">
                <type native="PCCERT_CHAIN_CONTEXT">CERT_CHAIN_CONTEXT*</type>
                <param name="hCertStore">
                    <type>void*</type>
                </param>
                <param name="dwCertEncodingType">
                    <type>uint</type>
                </param>
                <param name="dwFindFlags">
                    <type>uint</type>
                </param>
                <param name="dwFindType">
                    <type>uint</type>
                </param>
                <param name="pvFindPara">
                    <type>void*</type>
                </param>
                <param name="pPrevChainContext">
                    <type>CERT_CHAIN_CONTEXT*</type>
                </param>
            </function>
            <function name="CertVerifyCertificateChainPolicy" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pszPolicyOID">
                    <type>sbyte*</type>
                </param>
                <param name="pChainContext">
                    <type>CERT_CHAIN_CONTEXT*</type>
                </param>
                <param name="pPolicyPara">
                    <type>CERT_CHAIN_POLICY_PARA*</type>
                </param>
                <param name="pPolicyStatus">
                    <type>CERT_CHAIN_POLICY_STATUS*</type>
                </param>
            </function>
            <function name="CryptStringToBinaryA" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pszString">
                    <type>sbyte*</type>
                </param>
                <param name="cchString">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pbBinary">
                    <type>byte*</type>
                </param>
                <param name="pcbBinary">
                    <type>uint*</type>
                </param>
                <param name="pdwSkip">
                    <type>uint*</type>
                </param>
                <param name="pdwFlags">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptStringToBinaryW" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pszString">
                    <type>ushort*</type>
                </param>
                <param name="cchString">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pbBinary">
                    <type>byte*</type>
                </param>
                <param name="pcbBinary">
                    <type>uint*</type>
                </param>
                <param name="pdwSkip">
                    <type>uint*</type>
                </param>
                <param name="pdwFlags">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptBinaryToStringA" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pbBinary">
                    <type>byte*</type>
                </param>
                <param name="cbBinary">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pszString">
                    <type>sbyte*</type>
                </param>
                <param name="pcchString">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CryptBinaryToStringW" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pbBinary">
                    <type>byte*</type>
                </param>
                <param name="cbBinary">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pszString">
                    <type>ushort*</type>
                </param>
                <param name="pcchString">
                    <type>uint*</type>
                </param>
            </function>
            <function name="PFXImportCertStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="HCERTSTORE">void*</type>
                <param name="pPFX">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
                <param name="szPassword">
                    <type>ushort*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="PFXIsPFXBlob" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pPFX">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
            </function>
            <function name="PFXVerifyPassword" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="pPFX">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
                <param name="szPassword">
                    <type>ushort*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="PFXExportCertStoreEx" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hStore">
                    <type>void*</type>
                </param>
                <param name="pPFX">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
                <param name="szPassword">
                    <type>ushort*</type>
                </param>
                <param name="pvPara">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="PFXExportCertStore" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hStore">
                    <type>void*</type>
                </param>
                <param name="pPFX">
                    <type>CRYPTOAPI_BLOB*</type>
                </param>
                <param name="szPassword">
                    <type>ushort*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertOpenServerOcspResponse" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="HCERT_SERVER_OCSP_RESPONSE">void*</type>
                <param name="pChainContext">
                    <type>CERT_CHAIN_CONTEXT*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pOpenPara">
                    <type>CERT_SERVER_OCSP_RESPONSE_OPEN_PARA*</type>
                </param>
            </function>
            <function name="CertAddRefServerOcspResponse" access="public" lib="crypt32" static="true">
                <type>void</type>
                <param name="hServerOcspResponse">
                    <type>void*</type>
                </param>
            </function>
            <function name="CertCloseServerOcspResponse" access="public" lib="crypt32" static="true">
                <type>void</type>
                <param name="hServerOcspResponse">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CertGetServerOcspResponseContext" access="public" lib="crypt32" static="true">
                <type native="PCCERT_SERVER_OCSP_RESPONSE_CONTEXT">CERT_SERVER_OCSP_RESPONSE_CONTEXT*</type>
                <param name="hServerOcspResponse">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
            </function>
            <function name="CertAddRefServerOcspResponseContext" access="public" lib="crypt32" static="true">
                <type>void</type>
                <param name="pServerOcspResponseContext">
                    <type>CERT_SERVER_OCSP_RESPONSE_CONTEXT*</type>
                </param>
            </function>
            <function name="CertFreeServerOcspResponseContext" access="public" lib="crypt32" static="true">
                <type>void</type>
                <param name="pServerOcspResponseContext">
                    <type>CERT_SERVER_OCSP_RESPONSE_CONTEXT*</type>
                </param>
            </function>
            <function name="CertRetrieveLogoOrBiometricInfo" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pCertContext">
                    <type>CERT_CONTEXT*</type>
                </param>
                <param name="lpszLogoOrBiometricType">
                    <type>sbyte*</type>
                </param>
                <param name="dwRetrievalFlags">
                    <type>uint</type>
                </param>
                <param name="dwTimeout">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pvReserved">
                    <type>void*</type>
                </param>
                <param name="ppbData">
                    <type>byte**</type>
                </param>
                <param name="pcbData">
                    <type>uint*</type>
                </param>
                <param name="ppwszMimeType">
                    <type>ushort**</type>
                </param>
            </function>
            <function name="CertSelectCertificateChains" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pSelectionContext">
                    <type>Guid*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pChainParameters">
                    <type>CERT_SELECT_CHAIN_PARA*</type>
                </param>
                <param name="cCriteria">
                    <type>uint</type>
                </param>
                <param name="rgpCriteria">
                    <type>CERT_SELECT_CRITERIA*</type>
                </param>
                <param name="hStore">
                    <type>void*</type>
                </param>
                <param name="pcSelection">
                    <type>uint*</type>
                </param>
                <param name="pprgpSelection">
                    <type>CERT_CHAIN_CONTEXT***</type>
                </param>
            </function>
            <function name="CertFreeCertificateChainList" access="public" lib="crypt32" static="true">
                <type>void</type>
                <param name="prgpSelection">
                    <type>CERT_CHAIN_CONTEXT**</type>
                </param>
            </function>
            <function name="CryptRetrieveTimeStamp" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="wszUrl">
                    <type>ushort*</type>
                </param>
                <param name="dwRetrievalFlags">
                    <type>uint</type>
                </param>
                <param name="dwTimeout">
                    <type>uint</type>
                </param>
                <param name="pszHashId">
                    <type>sbyte*</type>
                </param>
                <param name="pPara">
                    <type>CRYPT_TIMESTAMP_PARA*</type>
                </param>
                <param name="pbData">
                    <type>byte*</type>
                </param>
                <param name="cbData">
                    <type>uint</type>
                </param>
                <param name="ppTsContext">
                    <type>CRYPT_TIMESTAMP_CONTEXT**</type>
                </param>
                <param name="ppTsSigner">
                    <type>CERT_CONTEXT**</type>
                </param>
                <param name="phStore">
                    <type>void**</type>
                </param>
            </function>
            <function name="CryptVerifyTimeStampSignature" access="public" lib="crypt32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pbTSContentInfo">
                    <type>byte*</type>
                </param>
                <param name="cbTSContentInfo">
                    <type>uint</type>
                </param>
                <param name="pbData">
                    <type>byte*</type>
                </param>
                <param name="cbData">
                    <type>uint</type>
                </param>
                <param name="hAdditionalStore">
                    <type>void*</type>
                </param>
                <param name="ppTsContext">
                    <type>CRYPT_TIMESTAMP_CONTEXT**</type>
                </param>
                <param name="ppTsSigner">
                    <type>CERT_CONTEXT**</type>
                </param>
                <param name="phStore">
                    <type>void**</type>
                </param>
            </function>
            <function name="CertIsWeakHash" access="public" lib="crypt32" static="true">
                <type native="BOOL">int</type>
                <param name="dwHashUseType">
                    <type>uint</type>
                </param>
                <param name="pwszCNGHashAlgid">
                    <type>ushort*</type>
                </param>
                <param name="dwChainFlags">
                    <type>uint</type>
                </param>
                <param name="pSignerChainContext">
                    <type>CERT_CHAIN_CONTEXT*</type>
                </param>
                <param name="pTimeStamp">
                    <type>FILETIME*</type>
                </param>
                <param name="pwszFileName">
                    <type>ushort*</type>
                </param>
            </function>
            <constant name="ALG_CLASS_ANY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0)
            </code>
                </value>
            </constant>
            <constant name="ALG_CLASS_SIGNATURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 13)
            </code>
                </value>
            </constant>
            <constant name="ALG_CLASS_MSG_ENCRYPT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(2 &lt;&lt; 13)
            </code>
                </value>
            </constant>
            <constant name="ALG_CLASS_DATA_ENCRYPT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(3 &lt;&lt; 13)
            </code>
                </value>
            </constant>
            <constant name="ALG_CLASS_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(4 &lt;&lt; 13)
            </code>
                </value>
            </constant>
            <constant name="ALG_CLASS_KEY_EXCHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(5 &lt;&lt; 13)
            </code>
                </value>
            </constant>
            <constant name="ALG_CLASS_ALL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(7 &lt;&lt; 13)
            </code>
                </value>
            </constant>
            <constant name="ALG_TYPE_ANY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0)
            </code>
                </value>
            </constant>
            <constant name="ALG_TYPE_DSS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 9)
            </code>
                </value>
            </constant>
            <constant name="ALG_TYPE_RSA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(2 &lt;&lt; 9)
            </code>
                </value>
            </constant>
            <constant name="ALG_TYPE_BLOCK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(3 &lt;&lt; 9)
            </code>
                </value>
            </constant>
            <constant name="ALG_TYPE_STREAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(4 &lt;&lt; 9)
            </code>
                </value>
            </constant>
            <constant name="ALG_TYPE_DH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(5 &lt;&lt; 9)
            </code>
                </value>
            </constant>
            <constant name="ALG_TYPE_SECURECHANNEL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(6 &lt;&lt; 9)
            </code>
                </value>
            </constant>
            <constant name="ALG_TYPE_ECDH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(7 &lt;&lt; 9)
            </code>
                </value>
            </constant>
            <constant name="ALG_TYPE_THIRDPARTY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(8 &lt;&lt; 9)
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_ANY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0)
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_THIRDPARTY_ANY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0)
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_RSA_ANY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_RSA_PKCS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_RSA_MSATWORK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_RSA_ENTRUST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_RSA_PGP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_DSS_ANY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_DSS_PKCS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_DSS_DMS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_ECDSA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_DES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_3DES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_DESX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_IDEA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_CAST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_SAFERSK64" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_SAFERSK128" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_3DES_112" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_CYLINK_MEK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>12
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_RC5" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>13
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_AES_128" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>14
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_AES_192" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>15
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_AES_256" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_AES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>17
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_SKIPJACK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_TEK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>11
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MODE_CBCI" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MODE_CFBP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MODE_OFBP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MODE_CBCOFM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MODE_CBCOFMI" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_RC2" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_RC4" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_SEAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_DH_SANDF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_DH_EPHEM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_AGREED_KEY_ANY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_KEA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_ECDH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_ECDH_EPHEM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_MD2" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_MD4" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_MD5" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_SHA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_SHA1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_MAC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_RIPEMD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_RIPEMD160" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_SSL3SHAMD5" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_HMAC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_TLS1PRF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_HASH_REPLACE_OWF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>11
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_SHA_256" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>12
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_SHA_384" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>13
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_SHA_512" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>14
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_SSL3_MASTER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_SCHANNEL_MASTER_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_SCHANNEL_MAC_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_PCT1_MASTER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_SSL2_MASTER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_TLS1_MASTER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_SCHANNEL_ENC_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_ECMQV" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="ALG_SID_EXAMPLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>80
            </code>
                </value>
            </constant>
            <constant name="CALG_MD2" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((4 &lt;&lt; 13) | (0) | 1)
            </code>
                </value>
            </constant>
            <constant name="CALG_MD4" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((4 &lt;&lt; 13) | (0) | 2)
            </code>
                </value>
            </constant>
            <constant name="CALG_MD5" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((4 &lt;&lt; 13) | (0) | 3)
            </code>
                </value>
            </constant>
            <constant name="CALG_SHA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((4 &lt;&lt; 13) | (0) | 4)
            </code>
                </value>
            </constant>
            <constant name="CALG_SHA1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((4 &lt;&lt; 13) | (0) | 4)
            </code>
                </value>
            </constant>
            <constant name="CALG_MAC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((4 &lt;&lt; 13) | (0) | 5)
            </code>
                </value>
            </constant>
            <constant name="CALG_RSA_SIGN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((1 &lt;&lt; 13) | (2 &lt;&lt; 9) | 0)
            </code>
                </value>
            </constant>
            <constant name="CALG_DSS_SIGN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((1 &lt;&lt; 13) | (1 &lt;&lt; 9) | 0)
            </code>
                </value>
            </constant>
            <constant name="CALG_NO_SIGN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((1 &lt;&lt; 13) | (0) | (0))
            </code>
                </value>
            </constant>
            <constant name="CALG_RSA_KEYX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((5 &lt;&lt; 13) | (2 &lt;&lt; 9) | 0)
            </code>
                </value>
            </constant>
            <constant name="CALG_DES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((3 &lt;&lt; 13) | (3 &lt;&lt; 9) | 1)
            </code>
                </value>
            </constant>
            <constant name="CALG_3DES_112" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((3 &lt;&lt; 13) | (3 &lt;&lt; 9) | 9)
            </code>
                </value>
            </constant>
            <constant name="CALG_3DES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((3 &lt;&lt; 13) | (3 &lt;&lt; 9) | 3)
            </code>
                </value>
            </constant>
            <constant name="CALG_DESX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((3 &lt;&lt; 13) | (3 &lt;&lt; 9) | 4)
            </code>
                </value>
            </constant>
            <constant name="CALG_RC2" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((3 &lt;&lt; 13) | (3 &lt;&lt; 9) | 2)
            </code>
                </value>
            </constant>
            <constant name="CALG_RC4" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((3 &lt;&lt; 13) | (4 &lt;&lt; 9) | 1)
            </code>
                </value>
            </constant>
            <constant name="CALG_SEAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((3 &lt;&lt; 13) | (4 &lt;&lt; 9) | 2)
            </code>
                </value>
            </constant>
            <constant name="CALG_DH_SF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((5 &lt;&lt; 13) | (5 &lt;&lt; 9) | 1)
            </code>
                </value>
            </constant>
            <constant name="CALG_DH_EPHEM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((5 &lt;&lt; 13) | (5 &lt;&lt; 9) | 2)
            </code>
                </value>
            </constant>
            <constant name="CALG_AGREEDKEY_ANY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((5 &lt;&lt; 13) | (5 &lt;&lt; 9) | 3)
            </code>
                </value>
            </constant>
            <constant name="CALG_KEA_KEYX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((5 &lt;&lt; 13) | (5 &lt;&lt; 9) | 4)
            </code>
                </value>
            </constant>
            <constant name="CALG_HUGHES_MD5" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((5 &lt;&lt; 13) | (0) | 3)
            </code>
                </value>
            </constant>
            <constant name="CALG_SKIPJACK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((3 &lt;&lt; 13) | (3 &lt;&lt; 9) | 10)
            </code>
                </value>
            </constant>
            <constant name="CALG_TEK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((3 &lt;&lt; 13) | (3 &lt;&lt; 9) | 11)
            </code>
                </value>
            </constant>
            <constant name="CALG_CYLINK_MEK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((3 &lt;&lt; 13) | (3 &lt;&lt; 9) | 12)
            </code>
                </value>
            </constant>
            <constant name="CALG_SSL3_SHAMD5" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((4 &lt;&lt; 13) | (0) | 8)
            </code>
                </value>
            </constant>
            <constant name="CALG_SSL3_MASTER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((2 &lt;&lt; 13) | (6 &lt;&lt; 9) | 1)
            </code>
                </value>
            </constant>
            <constant name="CALG_SCHANNEL_MASTER_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((2 &lt;&lt; 13) | (6 &lt;&lt; 9) | 2)
            </code>
                </value>
            </constant>
            <constant name="CALG_SCHANNEL_MAC_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((2 &lt;&lt; 13) | (6 &lt;&lt; 9) | 3)
            </code>
                </value>
            </constant>
            <constant name="CALG_SCHANNEL_ENC_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((2 &lt;&lt; 13) | (6 &lt;&lt; 9) | 7)
            </code>
                </value>
            </constant>
            <constant name="CALG_PCT1_MASTER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((2 &lt;&lt; 13) | (6 &lt;&lt; 9) | 4)
            </code>
                </value>
            </constant>
            <constant name="CALG_SSL2_MASTER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((2 &lt;&lt; 13) | (6 &lt;&lt; 9) | 5)
            </code>
                </value>
            </constant>
            <constant name="CALG_TLS1_MASTER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((2 &lt;&lt; 13) | (6 &lt;&lt; 9) | 6)
            </code>
                </value>
            </constant>
            <constant name="CALG_RC5" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((3 &lt;&lt; 13) | (3 &lt;&lt; 9) | 13)
            </code>
                </value>
            </constant>
            <constant name="CALG_HMAC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((4 &lt;&lt; 13) | (0) | 9)
            </code>
                </value>
            </constant>
            <constant name="CALG_TLS1PRF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((4 &lt;&lt; 13) | (0) | 10)
            </code>
                </value>
            </constant>
            <constant name="CALG_HASH_REPLACE_OWF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((4 &lt;&lt; 13) | (0) | 11)
            </code>
                </value>
            </constant>
            <constant name="CALG_AES_128" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((3 &lt;&lt; 13) | (3 &lt;&lt; 9) | 14)
            </code>
                </value>
            </constant>
            <constant name="CALG_AES_192" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((3 &lt;&lt; 13) | (3 &lt;&lt; 9) | 15)
            </code>
                </value>
            </constant>
            <constant name="CALG_AES_256" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((3 &lt;&lt; 13) | (3 &lt;&lt; 9) | 16)
            </code>
                </value>
            </constant>
            <constant name="CALG_AES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((3 &lt;&lt; 13) | (3 &lt;&lt; 9) | 17)
            </code>
                </value>
            </constant>
            <constant name="CALG_SHA_256" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((4 &lt;&lt; 13) | (0) | 12)
            </code>
                </value>
            </constant>
            <constant name="CALG_SHA_384" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((4 &lt;&lt; 13) | (0) | 13)
            </code>
                </value>
            </constant>
            <constant name="CALG_SHA_512" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((4 &lt;&lt; 13) | (0) | 14)
            </code>
                </value>
            </constant>
            <constant name="CALG_ECDH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((5 &lt;&lt; 13) | (5 &lt;&lt; 9) | 5)
            </code>
                </value>
            </constant>
            <constant name="CALG_ECDH_EPHEM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((5 &lt;&lt; 13) | (7 &lt;&lt; 9) | 6)
            </code>
                </value>
            </constant>
            <constant name="CALG_ECMQV" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((5 &lt;&lt; 13) | (0) | 1)
            </code>
                </value>
            </constant>
            <constant name="CALG_ECDSA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((1 &lt;&lt; 13) | (1 &lt;&lt; 9) | 3)
            </code>
                </value>
            </constant>
            <constant name="CALG_NULLCIPHER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((3 &lt;&lt; 13) | (0) | 0)
            </code>
                </value>
            </constant>
            <constant name="CALG_THIRDPARTY_KEY_EXCHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((5 &lt;&lt; 13) | (8 &lt;&lt; 9) | (0))
            </code>
                </value>
            </constant>
            <constant name="CALG_THIRDPARTY_SIGNATURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((1 &lt;&lt; 13) | (8 &lt;&lt; 9) | (0))
            </code>
                </value>
            </constant>
            <constant name="CALG_THIRDPARTY_CIPHER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((3 &lt;&lt; 13) | (8 &lt;&lt; 9) | (0))
            </code>
                </value>
            </constant>
            <constant name="CALG_THIRDPARTY_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((4 &lt;&lt; 13) | (8 &lt;&lt; 9) | (0))
            </code>
                </value>
            </constant>
            <constant name="CRYPT_VERIFYCONTEXT" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xF0000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_NEWKEYSET" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DELETEKEYSET" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MACHINE_KEYSET" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="CRYPT_SILENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DEFAULT_CONTAINER_OPTIONAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000080
            </code>
                </value>
            </constant>
            <constant name="CRYPT_EXPORTABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_USER_PROTECTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CRYPT_CREATE_SALT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CRYPT_UPDATE_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="CRYPT_NO_SALT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="CRYPT_PREGEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="CRYPT_RECIPIENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="CRYPT_INITIATOR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ONLINE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000080
            </code>
                </value>
            </constant>
            <constant name="CRYPT_SF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="CRYPT_CREATE_IV" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000200
            </code>
                </value>
            </constant>
            <constant name="CRYPT_KEK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000400
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DATA_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000800
            </code>
                </value>
            </constant>
            <constant name="CRYPT_VOLATILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00001000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_SGCKEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00002000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_USER_PROTECTED_STRONG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00100000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ARCHIVABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00004000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FORCE_KEY_PROTECTION_HIGH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="RSA1024BIT_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_SERVER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000400
            </code>
                </value>
            </constant>
            <constant name="KEY_LENGTH_MASK" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFF0000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_Y_ONLY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_SSL2_FALLBACK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DESTROYKEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OAEP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="CRYPT_BLOB_VER3" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000080
            </code>
                </value>
            </constant>
            <constant name="CRYPT_IPSEC_HMAC_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DECRYPT_RSA_NO_PADDING_CHECK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="CRYPT_SECRETDIGEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OWF_REPL_LM_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_LITTLE_ENDIAN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_NOHASHOID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_TYPE2_FORMAT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CRYPT_X931_FORMAT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MACHINE_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_USER_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DELETE_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="SIMPLEBLOB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="PUBLICKEYBLOB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x6
            </code>
                </value>
            </constant>
            <constant name="PRIVATEKEYBLOB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x7
            </code>
                </value>
            </constant>
            <constant name="PLAINTEXTKEYBLOB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8
            </code>
                </value>
            </constant>
            <constant name="OPAQUEKEYBLOB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x9
            </code>
                </value>
            </constant>
            <constant name="PUBLICKEYBLOBEX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xA
            </code>
                </value>
            </constant>
            <constant name="SYMMETRICWRAPKEYBLOB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xB
            </code>
                </value>
            </constant>
            <constant name="KEYSTATEBLOB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xC
            </code>
                </value>
            </constant>
            <constant name="AT_KEYEXCHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="AT_SIGNATURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CRYPT_USERDATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="KP_IV" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="KP_SALT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="KP_PADDING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="KP_MODE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="KP_MODE_BITS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="KP_PERMISSIONS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="KP_ALGID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="KP_BLOCKLEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="KP_KEYLEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="KP_SALT_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="KP_P" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>11
            </code>
                </value>
            </constant>
            <constant name="KP_G" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>12
            </code>
                </value>
            </constant>
            <constant name="KP_Q" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>13
            </code>
                </value>
            </constant>
            <constant name="KP_X" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>14
            </code>
                </value>
            </constant>
            <constant name="KP_Y" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>15
            </code>
                </value>
            </constant>
            <constant name="KP_RA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="KP_RB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>17
            </code>
                </value>
            </constant>
            <constant name="KP_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>18
            </code>
                </value>
            </constant>
            <constant name="KP_EFFECTIVE_KEYLEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>19
            </code>
                </value>
            </constant>
            <constant name="KP_SCHANNEL_ALG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>20
            </code>
                </value>
            </constant>
            <constant name="KP_CLIENT_RANDOM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>21
            </code>
                </value>
            </constant>
            <constant name="KP_SERVER_RANDOM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>22
            </code>
                </value>
            </constant>
            <constant name="KP_RP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>23
            </code>
                </value>
            </constant>
            <constant name="KP_PRECOMP_MD5" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>24
            </code>
                </value>
            </constant>
            <constant name="KP_PRECOMP_SHA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>25
            </code>
                </value>
            </constant>
            <constant name="KP_CERTIFICATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>26
            </code>
                </value>
            </constant>
            <constant name="KP_CLEAR_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>27
            </code>
                </value>
            </constant>
            <constant name="KP_PUB_EX_LEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>28
            </code>
                </value>
            </constant>
            <constant name="KP_PUB_EX_VAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>29
            </code>
                </value>
            </constant>
            <constant name="KP_KEYVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>30
            </code>
                </value>
            </constant>
            <constant name="KP_ADMIN_PIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>31
            </code>
                </value>
            </constant>
            <constant name="KP_KEYEXCHANGE_PIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>32
            </code>
                </value>
            </constant>
            <constant name="KP_SIGNATURE_PIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>33
            </code>
                </value>
            </constant>
            <constant name="KP_PREHASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>34
            </code>
                </value>
            </constant>
            <constant name="KP_ROUNDS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>35
            </code>
                </value>
            </constant>
            <constant name="KP_OAEP_PARAMS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>36
            </code>
                </value>
            </constant>
            <constant name="KP_CMS_KEY_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>37
            </code>
                </value>
            </constant>
            <constant name="KP_CMS_DH_KEY_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>38
            </code>
                </value>
            </constant>
            <constant name="KP_PUB_PARAMS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>39
            </code>
                </value>
            </constant>
            <constant name="KP_VERIFY_PARAMS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>40
            </code>
                </value>
            </constant>
            <constant name="KP_HIGHEST_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>41
            </code>
                </value>
            </constant>
            <constant name="KP_GET_USE_COUNT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>42
            </code>
                </value>
            </constant>
            <constant name="KP_PIN_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>43
            </code>
                </value>
            </constant>
            <constant name="KP_PIN_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>44
            </code>
                </value>
            </constant>
            <constant name="PKCS5_PADDING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="RANDOM_PADDING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="ZERO_PADDING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MODE_CBC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MODE_ECB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MODE_OFB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MODE_CFB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MODE_CTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ENCRYPT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DECRYPT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0002
            </code>
                </value>
            </constant>
            <constant name="CRYPT_EXPORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0004
            </code>
                </value>
            </constant>
            <constant name="CRYPT_READ" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0008
            </code>
                </value>
            </constant>
            <constant name="CRYPT_WRITE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0010
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MAC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0020
            </code>
                </value>
            </constant>
            <constant name="CRYPT_EXPORT_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0040
            </code>
                </value>
            </constant>
            <constant name="CRYPT_IMPORT_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0080
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ARCHIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0100
            </code>
                </value>
            </constant>
            <constant name="HP_ALGID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="HP_HASHVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0002
            </code>
                </value>
            </constant>
            <constant name="HP_HASHSIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0004
            </code>
                </value>
            </constant>
            <constant name="HP_HMAC_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0005
            </code>
                </value>
            </constant>
            <constant name="HP_TLS1PRF_LABEL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0006
            </code>
                </value>
            </constant>
            <constant name="HP_TLS1PRF_SEED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0007
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FAILED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CRYPT_SUCCEED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="PP_ENUMALGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="PP_ENUMCONTAINERS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="PP_IMPTYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="PP_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="PP_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="PP_CONTAINER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="PP_CHANGE_PASSWORD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="PP_KEYSET_SEC_DESCR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="PP_CERTCHAIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="PP_KEY_TYPE_SUBTYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="PP_PROVTYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="PP_KEYSTORAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>17
            </code>
                </value>
            </constant>
            <constant name="PP_APPLI_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>18
            </code>
                </value>
            </constant>
            <constant name="PP_SYM_KEYSIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>19
            </code>
                </value>
            </constant>
            <constant name="PP_SESSION_KEYSIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>20
            </code>
                </value>
            </constant>
            <constant name="PP_UI_PROMPT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>21
            </code>
                </value>
            </constant>
            <constant name="PP_ENUMALGS_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>22
            </code>
                </value>
            </constant>
            <constant name="PP_ENUMMANDROOTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>25
            </code>
                </value>
            </constant>
            <constant name="PP_ENUMELECTROOTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>26
            </code>
                </value>
            </constant>
            <constant name="PP_KEYSET_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>27
            </code>
                </value>
            </constant>
            <constant name="PP_ADMIN_PIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>31
            </code>
                </value>
            </constant>
            <constant name="PP_KEYEXCHANGE_PIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>32
            </code>
                </value>
            </constant>
            <constant name="PP_SIGNATURE_PIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>33
            </code>
                </value>
            </constant>
            <constant name="PP_SIG_KEYSIZE_INC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>34
            </code>
                </value>
            </constant>
            <constant name="PP_KEYX_KEYSIZE_INC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>35
            </code>
                </value>
            </constant>
            <constant name="PP_UNIQUE_CONTAINER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>36
            </code>
                </value>
            </constant>
            <constant name="PP_SGC_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>37
            </code>
                </value>
            </constant>
            <constant name="PP_USE_HARDWARE_RNG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>38
            </code>
                </value>
            </constant>
            <constant name="PP_KEYSPEC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>39
            </code>
                </value>
            </constant>
            <constant name="PP_ENUMEX_SIGNING_PROT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>40
            </code>
                </value>
            </constant>
            <constant name="PP_CRYPT_COUNT_KEY_USE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>41
            </code>
                </value>
            </constant>
            <constant name="PP_USER_CERTSTORE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>42
            </code>
                </value>
            </constant>
            <constant name="PP_SMARTCARD_READER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>43
            </code>
                </value>
            </constant>
            <constant name="PP_SMARTCARD_GUID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>45
            </code>
                </value>
            </constant>
            <constant name="PP_ROOT_CERTSTORE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>46
            </code>
                </value>
            </constant>
            <constant name="PP_SMARTCARD_READER_ICON" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>47
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FIRST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CRYPT_NEXT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CRYPT_SGC_ENUM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CRYPT_IMPL_HARDWARE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CRYPT_IMPL_SOFTWARE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CRYPT_IMPL_MIXED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CRYPT_IMPL_UNKNOWN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CRYPT_IMPL_REMOVABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CRYPT_SEC_DESCR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_PSTORE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CRYPT_UI_PROMPT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FLAG_PCT1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FLAG_SSL2" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0002
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FLAG_SSL3" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0004
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FLAG_TLS1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0008
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FLAG_IPSEC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0010
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FLAG_SIGNING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0020
            </code>
                </value>
            </constant>
            <constant name="CRYPT_SGC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FASTSGC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0002
            </code>
                </value>
            </constant>
            <constant name="PP_CLIENT_HWND" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="PP_CONTEXT_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>11
            </code>
                </value>
            </constant>
            <constant name="PP_KEYEXCHANGE_KEYSIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>12
            </code>
                </value>
            </constant>
            <constant name="PP_SIGNATURE_KEYSIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>13
            </code>
                </value>
            </constant>
            <constant name="PP_KEYEXCHANGE_ALG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>14
            </code>
                </value>
            </constant>
            <constant name="PP_SIGNATURE_ALG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>15
            </code>
                </value>
            </constant>
            <constant name="PP_DELETEKEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>24
            </code>
                </value>
            </constant>
            <constant name="PP_PIN_PROMPT_STRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>44
            </code>
                </value>
            </constant>
            <constant name="PP_SECURE_KEYEXCHANGE_PIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>47
            </code>
                </value>
            </constant>
            <constant name="PP_SECURE_SIGNATURE_PIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>48
            </code>
                </value>
            </constant>
            <constant name="PP_DISMISS_PIN_UI_SEC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>49
            </code>
                </value>
            </constant>
            <constant name="PROV_RSA_FULL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="PROV_RSA_SIG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="PROV_DSS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="PROV_FORTEZZA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="PROV_MS_EXCHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="PROV_SSL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="PROV_RSA_SCHANNEL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>12
            </code>
                </value>
            </constant>
            <constant name="PROV_DSS_DH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>13
            </code>
                </value>
            </constant>
            <constant name="PROV_EC_ECDSA_SIG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>14
            </code>
                </value>
            </constant>
            <constant name="PROV_EC_ECNRA_SIG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>15
            </code>
                </value>
            </constant>
            <constant name="PROV_EC_ECDSA_FULL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="PROV_EC_ECNRA_FULL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>17
            </code>
                </value>
            </constant>
            <constant name="PROV_DH_SCHANNEL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>18
            </code>
                </value>
            </constant>
            <constant name="PROV_SPYRUS_LYNKS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>20
            </code>
                </value>
            </constant>
            <constant name="PROV_RNG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>21
            </code>
                </value>
            </constant>
            <constant name="PROV_INTEL_SEC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>22
            </code>
                </value>
            </constant>
            <constant name="PROV_REPLACE_OWF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>23
            </code>
                </value>
            </constant>
            <constant name="PROV_RSA_AES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>24
            </code>
                </value>
            </constant>
            <constant name="MS_DEF_PROV_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x42, 0x61, 0x73, 0x65, 0x20, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x50, 0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x76, 0x31, 0x2E, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="MS_DEF_PROV_W" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft Base Cryptographic Provider v1.0"
            </code>
                </value>
            </constant>
            <constant name="MS_DEF_PROV" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft Base Cryptographic Provider v1.0"
            </code>
                </value>
            </constant>
            <constant name="MS_ENHANCED_PROV_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x45, 0x6E, 0x68, 0x61, 0x6E, 0x63, 0x65, 0x64, 0x20, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x50, 0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x76, 0x31, 0x2E, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="MS_ENHANCED_PROV_W" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft Enhanced Cryptographic Provider v1.0"
            </code>
                </value>
            </constant>
            <constant name="MS_ENHANCED_PROV" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft Enhanced Cryptographic Provider v1.0"
            </code>
                </value>
            </constant>
            <constant name="MS_STRONG_PROV_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x53, 0x74, 0x72, 0x6F, 0x6E, 0x67, 0x20, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x50, 0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x72, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="MS_STRONG_PROV_W" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft Strong Cryptographic Provider"
            </code>
                </value>
            </constant>
            <constant name="MS_STRONG_PROV" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft Strong Cryptographic Provider"
            </code>
                </value>
            </constant>
            <constant name="MS_DEF_RSA_SIG_PROV_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x52, 0x53, 0x41, 0x20, 0x53, 0x69, 0x67, 0x6E, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x50, 0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x72, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="MS_DEF_RSA_SIG_PROV_W" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft RSA Signature Cryptographic Provider"
            </code>
                </value>
            </constant>
            <constant name="MS_DEF_RSA_SIG_PROV" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft RSA Signature Cryptographic Provider"
            </code>
                </value>
            </constant>
            <constant name="MS_DEF_RSA_SCHANNEL_PROV_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x52, 0x53, 0x41, 0x20, 0x53, 0x43, 0x68, 0x61, 0x6E, 0x6E, 0x65, 0x6C, 0x20, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x50, 0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x72, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="MS_DEF_RSA_SCHANNEL_PROV_W" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft RSA SChannel Cryptographic Provider"
            </code>
                </value>
            </constant>
            <constant name="MS_DEF_RSA_SCHANNEL_PROV" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft RSA SChannel Cryptographic Provider"
            </code>
                </value>
            </constant>
            <constant name="MS_DEF_DSS_PROV_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x42, 0x61, 0x73, 0x65, 0x20, 0x44, 0x53, 0x53, 0x20, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x50, 0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x72, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="MS_DEF_DSS_PROV_W" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft Base DSS Cryptographic Provider"
            </code>
                </value>
            </constant>
            <constant name="MS_DEF_DSS_PROV" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft Base DSS Cryptographic Provider"
            </code>
                </value>
            </constant>
            <constant name="MS_DEF_DSS_DH_PROV_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x42, 0x61, 0x73, 0x65, 0x20, 0x44, 0x53, 0x53, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x44, 0x69, 0x66, 0x66, 0x69, 0x65, 0x2D, 0x48, 0x65, 0x6C, 0x6C, 0x6D, 0x61, 0x6E, 0x20, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x50, 0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x72, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="MS_DEF_DSS_DH_PROV_W" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
            </code>
                </value>
            </constant>
            <constant name="MS_DEF_DSS_DH_PROV" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
            </code>
                </value>
            </constant>
            <constant name="MS_ENH_DSS_DH_PROV_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x45, 0x6E, 0x68, 0x61, 0x6E, 0x63, 0x65, 0x64, 0x20, 0x44, 0x53, 0x53, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x44, 0x69, 0x66, 0x66, 0x69, 0x65, 0x2D, 0x48, 0x65, 0x6C, 0x6C, 0x6D, 0x61, 0x6E, 0x20, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x50, 0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x72, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="MS_ENH_DSS_DH_PROV_W" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
            </code>
                </value>
            </constant>
            <constant name="MS_ENH_DSS_DH_PROV" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
            </code>
                </value>
            </constant>
            <constant name="MS_DEF_DH_SCHANNEL_PROV_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x44, 0x48, 0x20, 0x53, 0x43, 0x68, 0x61, 0x6E, 0x6E, 0x65, 0x6C, 0x20, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x50, 0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x72, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="MS_DEF_DH_SCHANNEL_PROV_W" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft DH SChannel Cryptographic Provider"
            </code>
                </value>
            </constant>
            <constant name="MS_DEF_DH_SCHANNEL_PROV" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft DH SChannel Cryptographic Provider"
            </code>
                </value>
            </constant>
            <constant name="MS_SCARD_PROV_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x42, 0x61, 0x73, 0x65, 0x20, 0x53, 0x6D, 0x61, 0x72, 0x74, 0x20, 0x43, 0x61, 0x72, 0x64, 0x20, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x20, 0x50, 0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x72, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="MS_SCARD_PROV_W" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft Base Smart Card Crypto Provider"
            </code>
                </value>
            </constant>
            <constant name="MS_SCARD_PROV" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft Base Smart Card Crypto Provider"
            </code>
                </value>
            </constant>
            <constant name="MS_ENH_RSA_AES_PROV_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x45, 0x6E, 0x68, 0x61, 0x6E, 0x63, 0x65, 0x64, 0x20, 0x52, 0x53, 0x41, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x41, 0x45, 0x53, 0x20, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x50, 0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x72, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="MS_ENH_RSA_AES_PROV_W" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft Enhanced RSA and AES Cryptographic Provider"
            </code>
                </value>
            </constant>
            <constant name="MS_ENH_RSA_AES_PROV_XP_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x45, 0x6E, 0x68, 0x61, 0x6E, 0x63, 0x65, 0x64, 0x20, 0x52, 0x53, 0x41, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x41, 0x45, 0x53, 0x20, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x50, 0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x72, 0x20, 0x28, 0x50, 0x72, 0x6F, 0x74, 0x6F, 0x74, 0x79, 0x70, 0x65, 0x29, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="MS_ENH_RSA_AES_PROV_XP_W" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)"
            </code>
                </value>
            </constant>
            <constant name="MS_ENH_RSA_AES_PROV_XP" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)"
            </code>
                </value>
            </constant>
            <constant name="MS_ENH_RSA_AES_PROV" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Microsoft Enhanced RSA and AES Cryptographic Provider"
            </code>
                </value>
            </constant>
            <constant name="MAXUIDLEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>64
            </code>
                </value>
            </constant>
            <constant name="EXPO_OFFLOAD_REG_VALUE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x45, 0x78, 0x70, 0x6F, 0x4F, 0x66, 0x66, 0x6C, 0x6F, 0x61, 0x64, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="EXPO_OFFLOAD_FUNC_NAME" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x4F, 0x66, 0x66, 0x6C, 0x6F, 0x61, 0x64, 0x4D, 0x6F, 0x64, 0x45, 0x78, 0x70, 0x6F, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szKEY_CRYPTOAPI_PRIVATE_KEY_OPTIONS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5C, 0x50, 0x6F, 0x6C, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5C, 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x5C, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szKEY_CACHE_ENABLED" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4B, 0x65, 0x79, 0x73, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szKEY_CACHE_SECONDS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4B, 0x65, 0x79, 0x4C, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6D, 0x65, 0x53, 0x65, 0x63, 0x6F, 0x6E, 0x64, 0x73, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szPRIV_KEY_CACHE_MAX_ITEMS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x50, 0x72, 0x69, 0x76, 0x4B, 0x65, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4D, 0x61, 0x78, 0x49, 0x74, 0x65, 0x6D, 0x73, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="cPRIV_KEY_CACHE_MAX_ITEMS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>20
            </code>
                </value>
            </constant>
            <constant name="szPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x50, 0x72, 0x69, 0x76, 0x4B, 0x65, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x50, 0x75, 0x72, 0x67, 0x65, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6C, 0x53, 0x65, 0x63, 0x6F, 0x6E, 0x64, 0x73, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="cPRIV_KEY_CACHE_PURGE_INTERVAL_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>86400
            </code>
                </value>
            </constant>
            <constant name="CUR_BLOB_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="SCHANNEL_MAC_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="SCHANNEL_ENC_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="INTERNATIONAL_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CryptAcquireContext" access="public">
                <type primitive="False">delegate*&lt;nuint*, ushort*, ushort*, uint, uint, int&gt;</type>
                <value>
                    <deref>
                        <code>CryptAcquireContextW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CryptSignHash" access="public">
                <type primitive="False">delegate*&lt;nuint, uint, ushort*, uint, byte*, uint*, int&gt;</type>
                <value>
                    <deref>
                        <code>CryptSignHashW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CryptVerifySignature" access="public">
                <type primitive="False">delegate*&lt;nuint, byte*, uint, nuint, ushort*, uint, int&gt;</type>
                <value>
                    <deref>
                        <code>CryptVerifySignatureW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CryptSetProvider" access="public">
                <type primitive="False">delegate*&lt;ushort*, uint, int&gt;</type>
                <value>
                    <deref>
                        <code>CryptSetProviderW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CryptSetProviderEx" access="public">
                <type primitive="False">delegate*&lt;ushort*, uint, uint*, uint, int&gt;</type>
                <value>
                    <deref>
                        <code>CryptSetProviderExW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CryptGetDefaultProvider" access="public">
                <type primitive="False">delegate*&lt;uint, uint*, uint, ushort*, uint*, int&gt;</type>
                <value>
                    <deref>
                        <code>CryptGetDefaultProviderW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CryptEnumProviderTypes" access="public">
                <type primitive="False">delegate*&lt;uint, uint*, uint, uint*, ushort*, uint*, int&gt;</type>
                <value>
                    <deref>
                        <code>CryptEnumProviderTypesW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CryptEnumProviders" access="public">
                <type primitive="False">delegate*&lt;uint, uint*, uint, uint*, ushort*, uint*, int&gt;</type>
                <value>
                    <deref>
                        <code>CryptEnumProvidersW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="szOID_RSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_HASH" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_ENCRYPT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_2" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_3" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_4" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_5" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_6" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_7" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_8" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_9" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_10" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_12" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_RSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_MD2RSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_MD4RSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_MD5RSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_SHA1RSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_SETOAEP_RSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSAES_OAEP" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_MGF1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_PSPECIFIED" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_SSA_PSS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_SHA256RSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_SHA384RSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_SHA512RSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_DH" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_data" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x37, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_signedData" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x37, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_envelopedData" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x37, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_signEnvData" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x37, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_digestedData" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x37, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_hashedData" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x37, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_encryptedData" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x37, 0x2E, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_emailAddr" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_unstructName" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_contentType" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_messageDigest" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_signingTime" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_counterSign" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_challengePwd" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_unstructAddr" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_extCertAttrs" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_certExtensions" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x31, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_SMIMECapabilities" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x31, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_preferSignedData" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x31, 0x35, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_TIMESTAMP_TOKEN" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x31, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RFC3161_counterSign" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x33, 0x2E, 0x33, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_SMIMEalg" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x31, 0x36, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_SMIMEalgESDH" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x31, 0x36, 0x2E, 0x33, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_SMIMEalgCMS3DESwrap" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x31, 0x36, 0x2E, 0x33, 0x2E, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_SMIMEalgCMSRC2wrap" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x31, 0x36, 0x2E, 0x33, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_MD2" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x32, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_MD4" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x32, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_MD5" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x32, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_RC2CBC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x33, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_RC4" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x33, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_DES_EDE3_CBC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x33, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RSA_RC5_CBCPad" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x33, 0x2E, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ANSI_X942" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ANSI_X942_DH" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x36, 0x2E, 0x32, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_X957" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_X957_DSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x30, 0x2E, 0x34, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_X957_SHA1DSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x30, 0x2E, 0x34, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_PUBLIC_KEY" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x35, 0x2E, 0x32, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_P256" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x35, 0x2E, 0x33, 0x2E, 0x31, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_P384" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x32, 0x2E, 0x30, 0x2E, 0x33, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_P521" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x32, 0x2E, 0x30, 0x2E, 0x33, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_BRAINPOOLP160R1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x33, 0x36, 0x2E, 0x33, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x38, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_BRAINPOOLP160T1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x33, 0x36, 0x2E, 0x33, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x38, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_BRAINPOOLP192R1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x33, 0x36, 0x2E, 0x33, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x38, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_BRAINPOOLP192T1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x33, 0x36, 0x2E, 0x33, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x38, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_BRAINPOOLP224R1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x33, 0x36, 0x2E, 0x33, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x38, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_BRAINPOOLP224T1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x33, 0x36, 0x2E, 0x33, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x38, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_BRAINPOOLP256R1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x33, 0x36, 0x2E, 0x33, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x38, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_BRAINPOOLP256T1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x33, 0x36, 0x2E, 0x33, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x38, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_BRAINPOOLP320R1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x33, 0x36, 0x2E, 0x33, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x38, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_BRAINPOOLP320T1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x33, 0x36, 0x2E, 0x33, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x38, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_BRAINPOOLP384R1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x33, 0x36, 0x2E, 0x33, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x38, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_BRAINPOOLP384T1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x33, 0x36, 0x2E, 0x33, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x38, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_BRAINPOOLP512R1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x33, 0x36, 0x2E, 0x33, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x38, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_BRAINPOOLP512T1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x33, 0x36, 0x2E, 0x33, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x38, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_EC192WAPI" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x35, 0x36, 0x2E, 0x31, 0x31, 0x32, 0x33, 0x35, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CN_ECDSA_SHA256" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x35, 0x36, 0x2E, 0x31, 0x31, 0x32, 0x33, 0x35, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_NISTP192" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x35, 0x2E, 0x33, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_NISTP224" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x32, 0x2E, 0x30, 0x2E, 0x33, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_NISTP256" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x35, 0x2E, 0x33, 0x2E, 0x31, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_NISTP384" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x32, 0x2E, 0x30, 0x2E, 0x33, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_NISTP521" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x32, 0x2E, 0x30, 0x2E, 0x33, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_SECP160K1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x32, 0x2E, 0x30, 0x2E, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_SECP160R1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x32, 0x2E, 0x30, 0x2E, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_SECP160R2" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x32, 0x2E, 0x30, 0x2E, 0x33, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_SECP192K1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x32, 0x2E, 0x30, 0x2E, 0x33, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_SECP192R1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x35, 0x2E, 0x33, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_SECP224K1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x32, 0x2E, 0x30, 0x2E, 0x33, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_SECP224R1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x32, 0x2E, 0x30, 0x2E, 0x33, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_SECP256K1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x32, 0x2E, 0x30, 0x2E, 0x31, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_SECP256R1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x35, 0x2E, 0x33, 0x2E, 0x31, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_SECP384R1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x32, 0x2E, 0x30, 0x2E, 0x33, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_SECP521R1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x32, 0x2E, 0x30, 0x2E, 0x33, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_WTLS7" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x32, 0x2E, 0x30, 0x2E, 0x33, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_WTLS9" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x32, 0x33, 0x2E, 0x34, 0x33, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_WTLS12" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x32, 0x2E, 0x30, 0x2E, 0x33, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_X962P192V1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x35, 0x2E, 0x33, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_X962P192V2" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x35, 0x2E, 0x33, 0x2E, 0x31, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_X962P192V3" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x35, 0x2E, 0x33, 0x2E, 0x31, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_X962P239V1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x35, 0x2E, 0x33, 0x2E, 0x31, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_X962P239V2" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x35, 0x2E, 0x33, 0x2E, 0x31, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_X962P239V3" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x35, 0x2E, 0x33, 0x2E, 0x31, 0x2E, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECC_CURVE_X962P256V1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x35, 0x2E, 0x33, 0x2E, 0x31, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECDSA_SHA1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x35, 0x2E, 0x34, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECDSA_SPECIFIED" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x35, 0x2E, 0x34, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECDSA_SHA256" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x35, 0x2E, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECDSA_SHA384" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x35, 0x2E, 0x34, 0x2E, 0x33, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ECDSA_SHA512" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x34, 0x35, 0x2E, 0x34, 0x2E, 0x33, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NIST_AES128_CBC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x33, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NIST_AES192_CBC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x33, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x32, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NIST_AES256_CBC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x33, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x34, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NIST_AES128_WRAP" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x33, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NIST_AES192_WRAP" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x33, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x32, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NIST_AES256_WRAP" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x33, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x34, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DH_SINGLE_PASS_STDDH_SHA1_KDF" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x33, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x36, 0x33, 0x2E, 0x30, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DH_SINGLE_PASS_STDDH_SHA256_KDF" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DH_SINGLE_PASS_STDDH_SHA384_KDF" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DSALG" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DSALG_CRPT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x38, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DSALG_HASH" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x38, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DSALG_SIGN" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x38, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DSALG_RSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x38, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIW" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_md4RSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_md5RSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_md4RSA2" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_desECB" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_desCBC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_desOFB" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_desCFB" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_desMAC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x31, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_rsaSign" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x31, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_dsa" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x31, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_shaDSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x31, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_mdc2RSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x31, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_shaRSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x31, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_dhCommMod" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x31, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_desEDE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x31, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_sha" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x31, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_mdc2" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x31, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_dsaComm" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x32, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_dsaCommSHA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x32, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_rsaXchg" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x32, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_keyHashSeal" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x32, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_md2RSASign" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x32, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_md5RSASign" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x32, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_sha1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x32, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_dsaSHA1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x32, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_dsaCommSHA1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x32, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWSEC_sha1RSASign" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x33, 0x2E, 0x32, 0x2E, 0x32, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWDIR" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x37, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWDIR_CRPT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x37, 0x2E, 0x32, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWDIR_HASH" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x37, 0x2E, 0x32, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWDIR_SIGN" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x37, 0x2E, 0x32, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWDIR_md2" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x37, 0x2E, 0x32, 0x2E, 0x32, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OIWDIR_md2RSA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x37, 0x2E, 0x32, 0x2E, 0x33, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_sdnsSignature" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_mosaicSignature" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_sdnsConfidentiality" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_mosaicConfidentiality" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_sdnsIntegrity" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_mosaicIntegrity" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_sdnsTokenProtection" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_mosaicTokenProtection" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_sdnsKeyManagement" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_mosaicKeyManagement" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_sdnsKMandSig" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_mosaicKMandSig" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_SuiteASignature" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_SuiteAConfidentiality" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_SuiteAIntegrity" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_SuiteATokenProtection" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_SuiteAKeyManagement" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_SuiteAKMandSig" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_mosaicUpdatedSig" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_mosaicKMandUpdSig" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x32, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INFOSEC_mosaicUpdatedInteg" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x32, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NIST_sha256" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x33, 0x2E, 0x34, 0x2E, 0x32, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NIST_sha384" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x33, 0x2E, 0x34, 0x2E, 0x32, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NIST_sha512" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x30, 0x31, 0x2E, 0x33, 0x2E, 0x34, 0x2E, 0x32, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_COMMON_NAME" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_SUR_NAME" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DEVICE_SERIAL_NUMBER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_COUNTRY_NAME" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_LOCALITY_NAME" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_STATE_OR_PROVINCE_NAME" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_STREET_ADDRESS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ORGANIZATION_NAME" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x31, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ORGANIZATIONAL_UNIT_NAME" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x31, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_TITLE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x31, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DESCRIPTION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x31, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_SEARCH_GUIDE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x31, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_BUSINESS_CATEGORY" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x31, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_POSTAL_ADDRESS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x31, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_POSTAL_CODE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x31, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_POST_OFFICE_BOX" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x31, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PHYSICAL_DELIVERY_OFFICE_NAME" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x31, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_TELEPHONE_NUMBER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x32, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_TELEX_NUMBER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x32, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_TELETEXT_TERMINAL_IDENTIFIER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x32, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_FACSIMILE_TELEPHONE_NUMBER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x32, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_X21_ADDRESS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x32, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INTERNATIONAL_ISDN_NUMBER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x32, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_REGISTERED_ADDRESS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x32, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DESTINATION_INDICATOR" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x32, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PREFERRED_DELIVERY_METHOD" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x32, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PRESENTATION_ADDRESS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x32, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_SUPPORTED_APPLICATION_CONTEXT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x33, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_MEMBER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x33, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OWNER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x33, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ROLE_OCCUPANT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x33, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_SEE_ALSO" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x33, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_USER_PASSWORD" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x33, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_USER_CERTIFICATE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x33, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CA_CERTIFICATE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x33, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_AUTHORITY_REVOCATION_LIST" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x33, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERTIFICATE_REVOCATION_LIST" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x33, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CROSS_CERTIFICATE_PAIR" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x34, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_GIVEN_NAME" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x34, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INITIALS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x34, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DN_QUALIFIER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x34, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DOMAIN_COMPONENT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x30, 0x2E, 0x39, 0x2E, 0x32, 0x33, 0x34, 0x32, 0x2E, 0x31, 0x39, 0x32, 0x30, 0x30, 0x33, 0x30, 0x30, 0x2E, 0x31, 0x30, 0x30, 0x2E, 0x31, 0x2E, 0x32, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_12_FRIENDLY_NAME_ATTR" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x32, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_12_LOCAL_KEY_ID" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x32, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_12_KEY_PROVIDER_NAME_ATTR" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x37, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_LOCAL_MACHINE_KEYSET" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x37, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_12_EXTENDED_ATTRIBUTES" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x37, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x37, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KEYID_RDN" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x37, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_EV_RDN_LOCALE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x36, 0x30, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_EV_RDN_STATE_OR_PROVINCE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x36, 0x30, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_EV_RDN_COUNTRY" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x36, 0x30, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_ANY_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_ENCODED_BLOB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_OCTET_STRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_NUMERIC_STRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_PRINTABLE_STRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_TELETEX_STRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_T61_STRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_VIDEOTEX_STRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_IA5_STRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_GRAPHIC_STRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_VISIBLE_STRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_ISO646_STRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_GENERAL_STRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_UNIVERSAL_STRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>11
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_INT4_STRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>11
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_BMP_STRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>12
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_UNICODE_STRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>12
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_UTF8_STRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>13
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_TYPE_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x000000FF
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_FLAGS_MASK" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFF000000
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_ENABLE_T61_UNICODE_FLAG" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_ENABLE_UTF8_UNICODE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20000000
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_FORCE_UTF8_UNICODE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000000
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_DISABLE_CHECK_TYPE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000000
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_DISABLE_IE4_UTF8_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01000000
            </code>
                </value>
            </constant>
            <constant name="CERT_RDN_ENABLE_PUNYCODE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02000000
            </code>
                </value>
            </constant>
            <constant name="CERT_RSA_PUBLIC_KEY_OBJID" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CERT_DEFAULT_OID_PUBLIC_KEY_SIGN" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CERT_DEFAULT_OID_PUBLIC_KEY_XCHG" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ECC_PRIVATE_KEY_INFO_v1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CERT_V2" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_V3" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_INFO_VERSION_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_INFO_SERIAL_NUMBER_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_INFO_SIGNATURE_ALGORITHM_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_INFO_ISSUER_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CERT_INFO_NOT_BEFORE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CERT_INFO_NOT_AFTER_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CERT_INFO_SUBJECT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CERT_INFO_ISSUER_UNIQUE_ID_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="CERT_INFO_SUBJECT_UNIQUE_ID_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="CERT_INFO_EXTENSION_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>11
            </code>
                </value>
            </constant>
            <constant name="CRL_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CRL_V2" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_BUNDLE_CERTIFICATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CERT_BUNDLE_CRL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_REQUEST_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CERT_KEYGEN_REQUEST_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CTL_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CERT_ENCODING_TYPE_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000FFFF
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENCODING_TYPE_MASK" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFF0000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ASN_ENCODING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_NDR_ENCODING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="X509_ASN_ENCODING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="X509_NDR_ENCODING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="PKCS_7_ASN_ENCODING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00010000
            </code>
                </value>
            </constant>
            <constant name="PKCS_7_NDR_ENCODING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00020000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FORMAT_STR_MULTI_LINE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FORMAT_STR_NO_HEX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0010
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FORMAT_SIMPLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FORMAT_X509" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0002
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FORMAT_OID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0004
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FORMAT_RDN_SEMICOLON" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0100
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FORMAT_RDN_CRLF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0200
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FORMAT_RDN_UNQUOTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0400
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FORMAT_RDN_REVERSE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0800
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FORMAT_COMMA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FORMAT_SEMICOLON" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0100
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FORMAT_CRLF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0200
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ENCODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ENCODE_ALLOC_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_UNICODE_NAME_ENCODE_FORCE_UTF8_UNICODE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_SORTED_CTL_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ENCODE_ENABLE_PUNYCODE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ENCODE_ENABLE_UTF8PERCENT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ENCODE_ENABLE_IA5CONVERSION_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x20000 | 0x40000)
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DECODE_NOCOPY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DECODE_TO_BE_SIGNED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DECODE_SHARE_OID_STRING_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DECODE_ALLOC_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DECODE_ENABLE_PUNYCODE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DECODE_ENABLE_UTF8PERCENT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DECODE_ENABLE_IA5CONVERSION_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x02000000 | 0x04000000)
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ENCODE_DECODE_NONE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="X509_CERT" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)1)
            </code>
                </value>
            </constant>
            <constant name="X509_CERT_TO_BE_SIGNED" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)2)
            </code>
                </value>
            </constant>
            <constant name="X509_CERT_CRL_TO_BE_SIGNED" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)3)
            </code>
                </value>
            </constant>
            <constant name="X509_CERT_REQUEST_TO_BE_SIGNED" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)4)
            </code>
                </value>
            </constant>
            <constant name="X509_EXTENSIONS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)5)
            </code>
                </value>
            </constant>
            <constant name="X509_NAME_VALUE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)6)
            </code>
                </value>
            </constant>
            <constant name="X509_NAME" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)7)
            </code>
                </value>
            </constant>
            <constant name="X509_PUBLIC_KEY_INFO" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)8)
            </code>
                </value>
            </constant>
            <constant name="X509_AUTHORITY_KEY_ID" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)9)
            </code>
                </value>
            </constant>
            <constant name="X509_KEY_ATTRIBUTES" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)10)
            </code>
                </value>
            </constant>
            <constant name="X509_KEY_USAGE_RESTRICTION" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)11)
            </code>
                </value>
            </constant>
            <constant name="X509_ALTERNATE_NAME" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)12)
            </code>
                </value>
            </constant>
            <constant name="X509_BASIC_CONSTRAINTS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)13)
            </code>
                </value>
            </constant>
            <constant name="X509_KEY_USAGE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)14)
            </code>
                </value>
            </constant>
            <constant name="X509_BASIC_CONSTRAINTS2" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)15)
            </code>
                </value>
            </constant>
            <constant name="X509_CERT_POLICIES" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)16)
            </code>
                </value>
            </constant>
            <constant name="PKCS_UTC_TIME" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)17)
            </code>
                </value>
            </constant>
            <constant name="PKCS_TIME_REQUEST" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)18)
            </code>
                </value>
            </constant>
            <constant name="RSA_CSP_PUBLICKEYBLOB" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)19)
            </code>
                </value>
            </constant>
            <constant name="X509_UNICODE_NAME" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)20)
            </code>
                </value>
            </constant>
            <constant name="X509_KEYGEN_REQUEST_TO_BE_SIGNED" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)21)
            </code>
                </value>
            </constant>
            <constant name="PKCS_ATTRIBUTE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)22)
            </code>
                </value>
            </constant>
            <constant name="PKCS_CONTENT_INFO_SEQUENCE_OF_ANY" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)23)
            </code>
                </value>
            </constant>
            <constant name="X509_UNICODE_NAME_VALUE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)24)
            </code>
                </value>
            </constant>
            <constant name="X509_ANY_STRING" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)6)
            </code>
                </value>
            </constant>
            <constant name="X509_UNICODE_ANY_STRING" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)24)
            </code>
                </value>
            </constant>
            <constant name="X509_OCTET_STRING" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)25)
            </code>
                </value>
            </constant>
            <constant name="X509_BITS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)26)
            </code>
                </value>
            </constant>
            <constant name="X509_INTEGER" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)27)
            </code>
                </value>
            </constant>
            <constant name="X509_MULTI_BYTE_INTEGER" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)28)
            </code>
                </value>
            </constant>
            <constant name="X509_ENUMERATED" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)29)
            </code>
                </value>
            </constant>
            <constant name="X509_CHOICE_OF_TIME" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)30)
            </code>
                </value>
            </constant>
            <constant name="X509_AUTHORITY_KEY_ID2" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)31)
            </code>
                </value>
            </constant>
            <constant name="X509_AUTHORITY_INFO_ACCESS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)32)
            </code>
                </value>
            </constant>
            <constant name="X509_SUBJECT_INFO_ACCESS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)32)
            </code>
                </value>
            </constant>
            <constant name="X509_CRL_REASON_CODE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)29)
            </code>
                </value>
            </constant>
            <constant name="PKCS_CONTENT_INFO" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)33)
            </code>
                </value>
            </constant>
            <constant name="X509_SEQUENCE_OF_ANY" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)34)
            </code>
                </value>
            </constant>
            <constant name="X509_CRL_DIST_POINTS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)35)
            </code>
                </value>
            </constant>
            <constant name="X509_ENHANCED_KEY_USAGE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)36)
            </code>
                </value>
            </constant>
            <constant name="PKCS_CTL" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)37)
            </code>
                </value>
            </constant>
            <constant name="X509_MULTI_BYTE_UINT" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)38)
            </code>
                </value>
            </constant>
            <constant name="X509_DSS_PUBLICKEY" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)38)
            </code>
                </value>
            </constant>
            <constant name="X509_DSS_PARAMETERS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)39)
            </code>
                </value>
            </constant>
            <constant name="X509_DSS_SIGNATURE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)40)
            </code>
                </value>
            </constant>
            <constant name="PKCS_RC2_CBC_PARAMETERS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)41)
            </code>
                </value>
            </constant>
            <constant name="PKCS_SMIME_CAPABILITIES" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)42)
            </code>
                </value>
            </constant>
            <constant name="X509_QC_STATEMENTS_EXT" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)42)
            </code>
                </value>
            </constant>
            <constant name="PKCS_RSA_PRIVATE_KEY" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)43)
            </code>
                </value>
            </constant>
            <constant name="PKCS_PRIVATE_KEY_INFO" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)44)
            </code>
                </value>
            </constant>
            <constant name="PKCS_ENCRYPTED_PRIVATE_KEY_INFO" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)45)
            </code>
                </value>
            </constant>
            <constant name="X509_PKIX_POLICY_QUALIFIER_USERNOTICE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)46)
            </code>
                </value>
            </constant>
            <constant name="X509_DH_PUBLICKEY" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)38)
            </code>
                </value>
            </constant>
            <constant name="X509_DH_PARAMETERS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)47)
            </code>
                </value>
            </constant>
            <constant name="PKCS_ATTRIBUTES" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)48)
            </code>
                </value>
            </constant>
            <constant name="PKCS_SORTED_CTL" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)49)
            </code>
                </value>
            </constant>
            <constant name="X509_ECC_SIGNATURE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)47)
            </code>
                </value>
            </constant>
            <constant name="X942_DH_PARAMETERS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)50)
            </code>
                </value>
            </constant>
            <constant name="X509_BITS_WITHOUT_TRAILING_ZEROES" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)51)
            </code>
                </value>
            </constant>
            <constant name="X942_OTHER_INFO" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)52)
            </code>
                </value>
            </constant>
            <constant name="X509_CERT_PAIR" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)53)
            </code>
                </value>
            </constant>
            <constant name="X509_ISSUING_DIST_POINT" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)54)
            </code>
                </value>
            </constant>
            <constant name="X509_NAME_CONSTRAINTS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)55)
            </code>
                </value>
            </constant>
            <constant name="X509_POLICY_MAPPINGS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)56)
            </code>
                </value>
            </constant>
            <constant name="X509_POLICY_CONSTRAINTS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)57)
            </code>
                </value>
            </constant>
            <constant name="X509_CROSS_CERT_DIST_POINTS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)58)
            </code>
                </value>
            </constant>
            <constant name="CMC_DATA" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)59)
            </code>
                </value>
            </constant>
            <constant name="CMC_RESPONSE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)60)
            </code>
                </value>
            </constant>
            <constant name="CMC_STATUS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)61)
            </code>
                </value>
            </constant>
            <constant name="CMC_ADD_EXTENSIONS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)62)
            </code>
                </value>
            </constant>
            <constant name="CMC_ADD_ATTRIBUTES" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)63)
            </code>
                </value>
            </constant>
            <constant name="X509_CERTIFICATE_TEMPLATE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)64)
            </code>
                </value>
            </constant>
            <constant name="OCSP_SIGNED_REQUEST" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)65)
            </code>
                </value>
            </constant>
            <constant name="OCSP_REQUEST" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)66)
            </code>
                </value>
            </constant>
            <constant name="OCSP_RESPONSE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)67)
            </code>
                </value>
            </constant>
            <constant name="OCSP_BASIC_SIGNED_RESPONSE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)68)
            </code>
                </value>
            </constant>
            <constant name="OCSP_BASIC_RESPONSE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)69)
            </code>
                </value>
            </constant>
            <constant name="X509_LOGOTYPE_EXT" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)70)
            </code>
                </value>
            </constant>
            <constant name="X509_BIOMETRIC_EXT" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)71)
            </code>
                </value>
            </constant>
            <constant name="CNG_RSA_PUBLIC_KEY_BLOB" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)72)
            </code>
                </value>
            </constant>
            <constant name="X509_OBJECT_IDENTIFIER" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)73)
            </code>
                </value>
            </constant>
            <constant name="X509_ALGORITHM_IDENTIFIER" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)74)
            </code>
                </value>
            </constant>
            <constant name="PKCS_RSA_SSA_PSS_PARAMETERS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)75)
            </code>
                </value>
            </constant>
            <constant name="PKCS_RSAES_OAEP_PARAMETERS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)76)
            </code>
                </value>
            </constant>
            <constant name="ECC_CMS_SHARED_INFO" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)77)
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_REQUEST" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)78)
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_RESPONSE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)79)
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_INFO" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)80)
            </code>
                </value>
            </constant>
            <constant name="X509_CERT_BUNDLE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)81)
            </code>
                </value>
            </constant>
            <constant name="X509_ECC_PRIVATE_KEY" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)82)
            </code>
                </value>
            </constant>
            <constant name="CNG_RSA_PRIVATE_KEY_BLOB" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)83)
            </code>
                </value>
            </constant>
            <constant name="X509_SUBJECT_DIR_ATTRS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)84)
            </code>
                </value>
            </constant>
            <constant name="X509_ECC_PARAMETERS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)85)
            </code>
                </value>
            </constant>
            <constant name="PKCS7_SIGNER_INFO" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)500)
            </code>
                </value>
            </constant>
            <constant name="CMS_SIGNER_INFO" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)501)
            </code>
                </value>
            </constant>
            <constant name="szOID_AUTHORITY_KEY_IDENTIFIER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KEY_ATTRIBUTES" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERT_POLICIES_95" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KEY_USAGE_RESTRICTION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_SUBJECT_ALT_NAME" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ISSUER_ALT_NAME" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_BASIC_CONSTRAINTS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x31, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KEY_USAGE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x31, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PRIVATEKEY_USAGE_PERIOD" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x31, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_BASIC_CONSTRAINTS2" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x31, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERT_POLICIES" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x33, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ANY_CERT_POLICY" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x33, 0x32, 0x2E, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INHIBIT_ANY_POLICY" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x35, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_AUTHORITY_KEY_IDENTIFIER2" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x33, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_SUBJECT_KEY_IDENTIFIER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x31, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_SUBJECT_ALT_NAME2" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x31, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ISSUER_ALT_NAME2" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x31, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CRL_REASON_CODE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x32, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_REASON_CODE_HOLD" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x32, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CRL_DIST_POINTS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x33, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENHANCED_KEY_USAGE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x33, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ANY_ENHANCED_KEY_USAGE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x33, 0x37, 0x2E, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CRL_NUMBER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x32, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DELTA_CRL_INDICATOR" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x32, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ISSUING_DIST_POINT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x32, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_FRESHEST_CRL" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x34, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NAME_CONSTRAINTS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x33, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_POLICY_MAPPINGS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x33, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_LEGACY_POLICY_MAPPINGS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_POLICY_CONSTRAINTS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x33, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RENEWAL_CERTIFICATE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x33, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLLMENT_NAME_VALUE_PAIR" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x33, 0x2E, 0x32, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLLMENT_CSP_PROVIDER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x33, 0x2E, 0x32, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OS_VERSION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x33, 0x2E, 0x32, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLLMENT_AGENT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x30, 0x2E, 0x32, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_PE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_AUTHORITY_INFO_ACCESS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_SUBJECT_INFO_ACCESS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_BIOMETRIC_EXT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x31, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_QC_STATEMENTS_EXT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x31, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_LOGOTYPE_EXT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x31, 0x2E, 0x31, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_TLS_FEATURES_EXT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x31, 0x2E, 0x32, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERT_EXTENSIONS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NEXT_UPDATE_LOCATION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_REMOVE_CERTIFICATE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x38, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CROSS_CERT_DIST_POINTS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x39, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CTL" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_SORTED_CTL" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_SERIALIZED" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x33, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NT_PRINCIPAL_NAME" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x30, 0x2E, 0x32, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_INTERNATIONALIZED_EMAIL_ADDRESS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x30, 0x2E, 0x32, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PRODUCT_UPDATE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x33, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ANY_APPLICATION_POLICY" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x31, 0x32, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_AUTO_ENROLL_CTL_USAGE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x30, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_CERTTYPE_EXTENSION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x30, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERT_MANIFOLD" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x30, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERTSRV_CA_VERSION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERTSRV_PREVIOUS_CERT_HASH" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CRL_VIRTUAL_BASE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CRL_NEXT_PUBLISH" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_CA_EXCHANGE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_PRIVACY_CA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x33, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_KEY_RECOVERY_AGENT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERTIFICATE_TEMPLATE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENTERPRISE_OID_ROOT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RDN_DUMMY_SIGNER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_APPLICATION_CERT_POLICIES" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_APPLICATION_POLICY_MAPPINGS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_APPLICATION_POLICY_CONSTRAINTS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ARCHIVED_KEY_ATTR" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CRL_SELF_CDP" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_REQUIRE_CERT_CHAIN_POLICY" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ARCHIVED_KEY_CERT_HASH" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ISSUED_CERT_HASH" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DS_EMAIL_REPLICATION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x31, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_REQUEST_CLIENT_INFO" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x32, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENCRYPTED_KEY_HASH" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x32, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERTSRV_CROSSCA_VERSION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x32, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NTDS_REPLICATION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x35, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_SUBJECT_DIR_ATTRS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x32, 0x39, 0x2E, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_KP" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_KP_SERVER_AUTH" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x33, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_KP_CLIENT_AUTH" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x33, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_KP_CODE_SIGNING" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x33, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_KP_EMAIL_PROTECTION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x33, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_KP_IPSEC_END_SYSTEM" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x33, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_KP_IPSEC_TUNNEL" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x33, 0x2E, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_KP_IPSEC_USER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x33, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_KP_TIMESTAMP_SIGNING" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x33, 0x2E, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_KP_OCSP_SIGNING" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x33, 0x2E, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_OCSP_NOCHECK" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x34, 0x38, 0x2E, 0x31, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_OCSP_NONCE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x34, 0x38, 0x2E, 0x31, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_IPSEC_KP_IKE_INTERMEDIATE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x38, 0x2E, 0x32, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKINIT_KP_KDC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x32, 0x2E, 0x33, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_CTL_USAGE_SIGNING" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_TIME_STAMP_SIGNING" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_SERVER_GATED_CRYPTO" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_SGC_NETSCAPE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x30, 0x2E, 0x34, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_EFS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_EFS_RECOVERY" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x34, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_WHQL_CRYPTO" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ATTEST_WHQL_CRYPTO" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x35, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NT5_CRYPTO" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_OEM_WHQL_CRYPTO" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_EMBEDDED_NT_CRYPTO" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ROOT_LIST_SIGNER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_QUALIFIED_SUBORDINATION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x31, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_KEY_RECOVERY" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x31, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_DOCUMENT_SIGNING" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x31, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_LIFETIME_SIGNING" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x31, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_MOBILE_DEVICE_SOFTWARE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x31, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_SMART_DISPLAY" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x31, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_CSP_SIGNATURE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x31, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_FLIGHT_SIGNING" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x32, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PLATFORM_MANIFEST_BINARY_ID" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x32, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DRM" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x35, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DRM_INDIVIDUALIZATION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x35, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_LICENSES" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x36, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_LICENSE_SERVER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x36, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_SMARTCARD_LOGON" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x30, 0x2E, 0x32, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_KERNEL_MODE_CODE_SIGNING" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x36, 0x31, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x36, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_REVOKED_LIST_SIGNER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x31, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_WINDOWS_KITS_SIGNER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x32, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_WINDOWS_RT_SIGNER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x32, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PROTECTED_PROCESS_LIGHT_SIGNER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x32, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_WINDOWS_TCB_SIGNER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x32, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PROTECTED_PROCESS_SIGNER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x32, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_WINDOWS_THIRD_PARTY_COMPONENT_SIGNER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x32, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_WINDOWS_SOFTWARE_EXTENSION_SIGNER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x32, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DISALLOWED_LIST" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x33, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PIN_RULES_SIGNER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x33, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PIN_RULES_CTL" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x33, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PIN_RULES_EXT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x33, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PIN_RULES_DOMAIN_NAME" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x33, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PIN_RULES_LOG_END_DATE_EXT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x33, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_IUM_SIGNING" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x33, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_EV_WHQL_CRYPTO" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x33, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_BIOMETRIC_SIGNING" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x34, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENCLAVE_SIGNING" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x34, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_SYNC_ROOT_CTL_EXT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x35, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_HPKP_DOMAIN_NAME_CTL" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x36, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_HPKP_HEADER_VALUE_CTL" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x36, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x36, 0x31, 0x2E, 0x35, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_WINDOWS_STORE_SIGNER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x37, 0x36, 0x2E, 0x33, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DYNAMIC_CODE_GEN_SIGNER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x37, 0x36, 0x2E, 0x35, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_MICROSOFT_PUBLISHER_SIGNER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x37, 0x36, 0x2E, 0x38, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_YESNO_TRUST_ATTR" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x34, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_SITE_PIN_RULES_INDEX_ATTR" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x34, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_SITE_PIN_RULES_FLAGS_ATTR" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x34, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="SITE_PIN_RULES_ALL_SUBDOMAINS_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_POLICY_QUALIFIER_CPS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x32, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_POLICY_QUALIFIER_USERNOTICE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x32, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ROOT_PROGRAM_FLAGS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x36, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CERT_ROOT_PROGRAM_FLAG_ORG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x80
            </code>
                </value>
            </constant>
            <constant name="CERT_ROOT_PROGRAM_FLAG_LSC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40
            </code>
                </value>
            </constant>
            <constant name="CERT_ROOT_PROGRAM_FLAG_SUBJECT_LOGO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20
            </code>
                </value>
            </constant>
            <constant name="CERT_ROOT_PROGRAM_FLAG_OU" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10
            </code>
                </value>
            </constant>
            <constant name="CERT_ROOT_PROGRAM_FLAG_ADDRESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x08
            </code>
                </value>
            </constant>
            <constant name="szOID_CERT_POLICIES_95_QUALIFIER1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x33, 0x2E, 0x31, 0x2E, 0x37, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RDN_TPM_MANUFACTURER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x32, 0x33, 0x2E, 0x31, 0x33, 0x33, 0x2E, 0x32, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RDN_TPM_MODEL" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x32, 0x33, 0x2E, 0x31, 0x33, 0x33, 0x2E, 0x32, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RDN_TPM_VERSION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x32, 0x33, 0x2E, 0x31, 0x33, 0x33, 0x2E, 0x32, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RDN_TCG_PLATFORM_MANUFACTURER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x32, 0x33, 0x2E, 0x31, 0x33, 0x33, 0x2E, 0x32, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RDN_TCG_PLATFORM_MODEL" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x32, 0x33, 0x2E, 0x31, 0x33, 0x33, 0x2E, 0x32, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_RDN_TCG_PLATFORM_VERSION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x32, 0x33, 0x2E, 0x31, 0x33, 0x33, 0x2E, 0x32, 0x2E, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CT_CERT_SCTLIST" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x31, 0x32, 0x39, 0x2E, 0x32, 0x2E, 0x34, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_EK_INFO" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x32, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_AIK_INFO" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x33, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_ATTESTATION_STATEMENT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x32, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_KSP_NAME" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x32, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_EKPUB_CHALLENGE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x32, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_CAXCHGCERT_HASH" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x32, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_ATTESTATION_CHALLENGE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x32, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_ENCRYPTION_ALGORITHM" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x32, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_TPM_EK_CERTIFICATE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x32, 0x33, 0x2E, 0x31, 0x33, 0x33, 0x2E, 0x38, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_TPM_PLATFORM_CERTIFICATE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x32, 0x33, 0x2E, 0x31, 0x33, 0x33, 0x2E, 0x38, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_KP_TPM_AIK_CERTIFICATE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x32, 0x33, 0x2E, 0x31, 0x33, 0x33, 0x2E, 0x38, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_EKVERIFYKEY" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x33, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_EKVERIFYCERT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x33, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_EKVERIFYCREDS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x33, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_SCEP_ERROR" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x33, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_SCEP_SERVER_STATE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x33, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_SCEP_CHALLENGE_ANSWER" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x33, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_SCEP_CLIENT_REQUEST" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x33, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_SCEP_SERVER_MESSAGE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x33, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_SCEP_SERVER_SECRET" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x34, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_KEY_AFFINITY" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x34, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_SCEP_SIGNER_HASH" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x34, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ENROLL_EK_CA_KEYID" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x32, 0x31, 0x2E, 0x34, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ATTR_SUPPORTED_ALGORITHMS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x35, 0x2E, 0x34, 0x2E, 0x35, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ATTR_TPM_SPECIFICATION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x32, 0x33, 0x2E, 0x31, 0x33, 0x33, 0x2E, 0x32, 0x2E, 0x31, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ATTR_PLATFORM_SPECIFICATION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x32, 0x33, 0x2E, 0x31, 0x33, 0x33, 0x2E, 0x32, 0x2E, 0x31, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ATTR_TPM_SECURITY_ASSERTIONS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x32, 0x33, 0x2E, 0x31, 0x33, 0x33, 0x2E, 0x32, 0x2E, 0x31, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CERT_UNICODE_RDN_ERR_INDEX_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x3FF
            </code>
                </value>
            </constant>
            <constant name="CERT_UNICODE_RDN_ERR_INDEX_SHIFT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>22
            </code>
                </value>
            </constant>
            <constant name="CERT_UNICODE_ATTR_ERR_INDEX_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x003F
            </code>
                </value>
            </constant>
            <constant name="CERT_UNICODE_ATTR_ERR_INDEX_SHIFT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="CERT_UNICODE_VALUE_ERR_INDEX_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000FFFF
            </code>
                </value>
            </constant>
            <constant name="CERT_UNICODE_VALUE_ERR_INDEX_SHIFT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CERT_DIGITAL_SIGNATURE_KEY_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x80
            </code>
                </value>
            </constant>
            <constant name="CERT_NON_REPUDIATION_KEY_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40
            </code>
                </value>
            </constant>
            <constant name="CERT_KEY_ENCIPHERMENT_KEY_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20
            </code>
                </value>
            </constant>
            <constant name="CERT_DATA_ENCIPHERMENT_KEY_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10
            </code>
                </value>
            </constant>
            <constant name="CERT_KEY_AGREEMENT_KEY_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x08
            </code>
                </value>
            </constant>
            <constant name="CERT_KEY_CERT_SIGN_KEY_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04
            </code>
                </value>
            </constant>
            <constant name="CERT_OFFLINE_CRL_SIGN_KEY_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="CERT_CRL_SIGN_KEY_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="CERT_ENCIPHER_ONLY_KEY_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="CERT_DECIPHER_ONLY_KEY_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x80
            </code>
                </value>
            </constant>
            <constant name="CERT_ALT_NAME_OTHER_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_ALT_NAME_RFC822_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_ALT_NAME_DNS_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_ALT_NAME_X400_ADDRESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CERT_ALT_NAME_DIRECTORY_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CERT_ALT_NAME_EDI_PARTY_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CERT_ALT_NAME_URL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="CERT_ALT_NAME_IP_ADDRESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CERT_ALT_NAME_REGISTERED_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xFF
            </code>
                </value>
            </constant>
            <constant name="CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="CERT_ALT_NAME_VALUE_ERR_INDEX_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000FFFF
            </code>
                </value>
            </constant>
            <constant name="CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CERT_CA_SUBJECT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x80
            </code>
                </value>
            </constant>
            <constant name="CERT_END_ENTITY_SUBJECT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_ACC_DESCR" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x34, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_OCSP" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x34, 0x38, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_CA_ISSUERS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x34, 0x38, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_TIME_STAMPING" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x34, 0x38, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_CA_REPOSITORY" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x34, 0x38, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_UNSPECIFIED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_KEY_COMPROMISE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_CA_COMPROMISE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_AFFILIATION_CHANGED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_SUPERSEDED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_CESSATION_OF_OPERATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_CERTIFICATE_HOLD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_REMOVE_FROM_CRL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_PRIVILEGE_WITHDRAWN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_AA_COMPROMISE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="CRL_DIST_POINT_NO_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CRL_DIST_POINT_FULL_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CRL_DIST_POINT_ISSUER_RDN_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_UNUSED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x80
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_KEY_COMPROMISE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_CA_COMPROMISE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_AFFILIATION_CHANGED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_SUPERSEDED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x08
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_CESSATION_OF_OPERATION_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_CERTIFICATE_HOLD_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_PRIVILEGE_WITHDRAWN_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="CRL_REASON_AA_COMPROMISE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x80
            </code>
                </value>
            </constant>
            <constant name="CRL_DIST_POINT_ERR_INDEX_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x7F
            </code>
                </value>
            </constant>
            <constant name="CRL_DIST_POINT_ERR_INDEX_SHIFT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>24
            </code>
                </value>
            </constant>
            <constant name="CRL_DIST_POINT_ERR_CRL_ISSUER_BIT" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="CROSS_CERT_DIST_POINT_ERR_INDEX_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xFF
            </code>
                </value>
            </constant>
            <constant name="CROSS_CERT_DIST_POINT_ERR_INDEX_SHIFT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>24
            </code>
                </value>
            </constant>
            <constant name="CERT_EXCLUDED_SUBTREE_BIT" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="SORTED_CTL_EXT_FLAGS_OFFSET" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0 * 4)
            </code>
                </value>
            </constant>
            <constant name="SORTED_CTL_EXT_COUNT_OFFSET" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 * 4)
            </code>
                </value>
            </constant>
            <constant name="SORTED_CTL_EXT_MAX_COLLISION_OFFSET" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(2 * 4)
            </code>
                </value>
            </constant>
            <constant name="SORTED_CTL_EXT_HASH_BUCKET_OFFSET" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(3 * 4)
            </code>
                </value>
            </constant>
            <constant name="SORTED_CTL_EXT_HASHED_SUBJECT_IDENTIFIER_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_DSS_R_LEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>20
            </code>
                </value>
            </constant>
            <constant name="CERT_DSS_S_LEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>20
            </code>
                </value>
            </constant>
            <constant name="CERT_DSS_SIGNATURE_LEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(20 + 20)
            </code>
                </value>
            </constant>
            <constant name="CERT_MAX_ASN_ENCODED_DSS_SIGNATURE_LEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(2 + 2 * (2 + 20 + 1))
            </code>
                </value>
            </constant>
            <constant name="CRYPT_X942_COUNTER_BYTE_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CRYPT_X942_KEY_LENGTH_BYTE_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CRYPT_X942_PUB_INFO_BYTE_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(512 / 8)
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ECC_CMS_SHARED_INFO_SUPPPUBINFO_BYTE_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CRYPT_RC2_40BIT_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>160
            </code>
                </value>
            </constant>
            <constant name="CRYPT_RC2_56BIT_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>52
            </code>
                </value>
            </constant>
            <constant name="CRYPT_RC2_64BIT_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>120
            </code>
                </value>
            </constant>
            <constant name="CRYPT_RC2_128BIT_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>58
            </code>
                </value>
            </constant>
            <constant name="szOID_QC_EU_COMPLIANCE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x30, 0x2E, 0x34, 0x2E, 0x30, 0x2E, 0x31, 0x38, 0x36, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_QC_SSCD" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x30, 0x2E, 0x34, 0x2E, 0x30, 0x2E, 0x31, 0x38, 0x36, 0x32, 0x2E, 0x31, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="PKCS_RSA_SSA_PSS_TRAILER_FIELD_BC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="szOID_VERISIGN_PRIVATE_6_9" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x33, 0x2E, 0x31, 0x2E, 0x36, 0x2E, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_VERISIGN_ONSITE_JURISDICTION_HASH" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x33, 0x2E, 0x31, 0x2E, 0x36, 0x2E, 0x31, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_VERISIGN_BITSTRING_6_13" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x33, 0x2E, 0x31, 0x2E, 0x36, 0x2E, 0x31, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_VERISIGN_ISS_STRONG_CRYPTO" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x33, 0x2E, 0x31, 0x2E, 0x38, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOIDVerisign_MessageType" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x33, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOIDVerisign_PkiStatus" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x33, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOIDVerisign_FailInfo" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x33, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOIDVerisign_SenderNonce" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x33, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOIDVerisign_RecipientNonce" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x33, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOIDVerisign_TransactionID" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x33, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NETSCAPE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NETSCAPE_CERT_EXTENSION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x30, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NETSCAPE_CERT_TYPE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NETSCAPE_BASE_URL" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x30, 0x2E, 0x31, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NETSCAPE_REVOCATION_URL" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x30, 0x2E, 0x31, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NETSCAPE_CA_REVOCATION_URL" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x30, 0x2E, 0x31, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NETSCAPE_CERT_RENEWAL_URL" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x30, 0x2E, 0x31, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NETSCAPE_CA_POLICY_URL" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x30, 0x2E, 0x31, 0x2E, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NETSCAPE_SSL_SERVER_NAME" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NETSCAPE_COMMENT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NETSCAPE_DATA_TYPE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x30, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_NETSCAPE_CERT_SEQUENCE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x32, 0x2E, 0x31, 0x36, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x2E, 0x31, 0x31, 0x33, 0x37, 0x33, 0x30, 0x2E, 0x32, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="NETSCAPE_SSL_CLIENT_AUTH_CERT_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x80
            </code>
                </value>
            </constant>
            <constant name="NETSCAPE_SSL_SERVER_AUTH_CERT_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40
            </code>
                </value>
            </constant>
            <constant name="NETSCAPE_SMIME_CERT_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20
            </code>
                </value>
            </constant>
            <constant name="NETSCAPE_SIGN_CERT_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10
            </code>
                </value>
            </constant>
            <constant name="NETSCAPE_SSL_CA_CERT_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04
            </code>
                </value>
            </constant>
            <constant name="NETSCAPE_SMIME_CA_CERT_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="NETSCAPE_SIGN_CA_CERT_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="szOID_CT_PKI_DATA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x31, 0x32, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CT_PKI_RESPONSE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x31, 0x32, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_NO_SIGNATURE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x36, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_STATUS_INFO" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_IDENTIFICATION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_IDENTITY_PROOF" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_DATA_RETURN" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_TRANSACTION_ID" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_SENDER_NONCE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_RECIPIENT_NONCE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_ADD_EXTENSIONS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_ENCRYPTED_POP" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_DECRYPTED_POP" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x31, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_LRA_POP_WITNESS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x31, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_GET_CERT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x31, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_GET_CRL" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x31, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_REVOKE_REQUEST" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x31, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_REG_INFO" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x31, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_RESPONSE_INFO" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x31, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_QUERY_PENDING" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x32, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_ID_POP_LINK_RANDOM" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x32, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_ID_POP_LINK_WITNESS" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x32, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_ID_CONFIRM_CERT_ACCEPTANCE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x37, 0x2E, 0x32, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CMC_ADD_ATTRIBUTES" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x31, 0x30, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMC_TAGGED_CERT_REQUEST_CHOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CMC_OTHER_INFO_NO_CHOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CMC_OTHER_INFO_FAIL_CHOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CMC_OTHER_INFO_PEND_CHOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CMC_STATUS_SUCCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CMC_STATUS_FAILED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CMC_STATUS_PENDING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CMC_STATUS_NO_SUPPORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CMC_STATUS_CONFIRM_REQUIRED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CMC_FAIL_BAD_ALG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CMC_FAIL_BAD_MESSAGE_CHECK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CMC_FAIL_BAD_REQUEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CMC_FAIL_BAD_TIME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CMC_FAIL_BAD_CERT_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CMC_FAIL_UNSUPORTED_EXT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CMC_FAIL_MUST_ARCHIVE_KEYS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CMC_FAIL_BAD_IDENTITY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="CMC_FAIL_POP_REQUIRED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CMC_FAIL_POP_FAILED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="CMC_FAIL_NO_KEY_REUSE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="CMC_FAIL_INTERNAL_CA_ERROR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>11
            </code>
                </value>
            </constant>
            <constant name="CMC_FAIL_TRY_LATER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>12
            </code>
                </value>
            </constant>
            <constant name="CERT_LOGOTYPE_GRAY_SCALE_IMAGE_INFO_CHOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_LOGOTYPE_COLOR_IMAGE_INFO_CHOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_LOGOTYPE_NO_IMAGE_RESOLUTION_CHOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CERT_LOGOTYPE_BITS_IMAGE_RESOLUTION_CHOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_LOGOTYPE_TABLE_SIZE_IMAGE_RESOLUTION_CHOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_LOGOTYPE_DIRECT_INFO_CHOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_LOGOTYPE_INDIRECT_INFO_CHOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="szOID_LOYALTY_OTHER_LOGOTYPE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x32, 0x30, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_BACKGROUND_OTHER_LOGOTYPE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x32, 0x30, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CERT_BIOMETRIC_PREDEFINED_DATA_CHOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_BIOMETRIC_OID_DATA_CHOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_BIOMETRIC_PICTURE_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CERT_BIOMETRIC_SIGNATURE_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="OCSP_REQUEST_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="OCSP_SUCCESSFUL_RESPONSE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="OCSP_MALFORMED_REQUEST_RESPONSE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="OCSP_INTERNAL_ERROR_RESPONSE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="OCSP_TRY_LATER_RESPONSE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="OCSP_SIG_REQUIRED_RESPONSE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="OCSP_UNAUTHORIZED_RESPONSE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="szOID_PKIX_OCSP_BASIC_SIGNED_RESPONSE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x34, 0x38, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="OCSP_BASIC_GOOD_CERT_STATUS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="OCSP_BASIC_REVOKED_CERT_STATUS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="OCSP_BASIC_UNKNOWN_CERT_STATUS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="OCSP_BASIC_RESPONSE_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="OCSP_BASIC_BY_NAME_RESPONDER_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="OCSP_BASIC_BY_KEY_RESPONDER_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_ENCODE_OBJECT_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x6C, 0x6C, 0x45, 0x6E, 0x63, 0x6F, 0x64, 0x65, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_DECODE_OBJECT_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x6C, 0x6C, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_ENCODE_OBJECT_EX_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x6C, 0x6C, 0x45, 0x6E, 0x63, 0x6F, 0x64, 0x65, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x45, 0x78, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_DECODE_OBJECT_EX_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x6C, 0x6C, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x65, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x45, 0x78, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_CREATE_COM_OBJECT_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x6C, 0x6C, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x4F, 0x4D, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_VERIFY_REVOCATION_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x65, 0x72, 0x74, 0x44, 0x6C, 0x6C, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x76, 0x6F, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_VERIFY_CTL_USAGE_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x65, 0x72, 0x74, 0x44, 0x6C, 0x6C, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x54, 0x4C, 0x55, 0x73, 0x61, 0x67, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_FORMAT_OBJECT_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x6C, 0x6C, 0x46, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_FIND_OID_INFO_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x6C, 0x6C, 0x46, 0x69, 0x6E, 0x64, 0x4F, 0x49, 0x44, 0x49, 0x6E, 0x66, 0x6F, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_FIND_LOCALIZED_NAME_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x6C, 0x6C, 0x46, 0x69, 0x6E, 0x64, 0x4C, 0x6F, 0x63, 0x61, 0x6C, 0x69, 0x7A, 0x65, 0x64, 0x4E, 0x61, 0x6D, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_REGPATH" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5C, 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x5C, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x5C, 0x4F, 0x49, 0x44, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_REG_ENCODING_TYPE_PREFIX" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x45, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67, 0x54, 0x79, 0x70, 0x65, 0x20, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_REG_DLL_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Dll"
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_REG_FUNC_NAME_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"FuncName"
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_REG_FUNC_NAME_VALUE_NAME_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x46, 0x75, 0x6E, 0x63, 0x4E, 0x61, 0x6D, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_REG_FLAGS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptFlags"
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DEFAULT_OID" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x44, 0x45, 0x46, 0x41, 0x55, 0x4C, 0x54, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CRYPT_GET_INSTALLED_OID_FUNC_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CRYPT_REGISTER_FIRST_INDEX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CRYPT_REGISTER_LAST_INDEX" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MATCH_ANY_ENCODING_TYPE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="CALG_OID_INFO_CNG_ONLY" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="CALG_OID_INFO_PARAMETERS" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFE
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INFO_HASH_PARAMETERS_ALGORITHM" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptOIDInfoHashParameters"
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INFO_ECC_PARAMETERS_ALGORITHM" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptOIDInfoECCParameters"
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INFO_MGF1_PARAMETERS_ALGORITHM" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptOIDInfoMgf1Parameters"
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INFO_NO_SIGN_ALGORITHM" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptOIDInfoNoSign"
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INFO_OAEP_PARAMETERS_ALGORITHM" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptOIDInfoOAEPParameters"
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INFO_ECC_WRAP_PARAMETERS_ALGORITHM" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptOIDInfoECCWrapParameters"
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INFO_NO_PARAMETERS_ALGORITHM" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptOIDInfoNoParameters"
            </code>
                </value>
            </constant>
            <constant name="CRYPT_HASH_ALG_OID_GROUP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ENCRYPT_ALG_OID_GROUP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CRYPT_PUBKEY_ALG_OID_GROUP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CRYPT_SIGN_ALG_OID_GROUP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CRYPT_RDN_ATTR_OID_GROUP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CRYPT_EXT_OR_ATTR_OID_GROUP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ENHKEY_USAGE_OID_GROUP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="CRYPT_POLICY_OID_GROUP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CRYPT_TEMPLATE_OID_GROUP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="CRYPT_KDF_OID_GROUP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="CRYPT_LAST_OID_GROUP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FIRST_ALG_OID_GROUP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CRYPT_LAST_ALG_OID_GROUP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_NO_NULL_ALGORITHM_PARA_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_PUBKEY_SIGN_ONLY_FLAG" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_PUBKEY_ENCRYPT_ONLY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INFO_OID_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INFO_NAME_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INFO_ALGID_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INFO_SIGN_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INFO_CNG_ALGID_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INFO_CNG_SIGN_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INFO_OID_KEY_FLAGS_MASK" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFF0000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_DISABLE_SEARCH_DS_FLAG" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0FFF0000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="CRYPT_INSTALL_OID_INFO_BEFORE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CRYPT_LOCALIZED_NAME_ENCODING_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CRYPT_LOCALIZED_NAME_OID" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x4C, 0x6F, 0x63, 0x61, 0x6C, 0x69, 0x7A, 0x65, 0x64, 0x4E, 0x61, 0x6D, 0x65, 0x73, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CERT_STRONG_SIGN_ECDSA_ALGORITHM" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"ECDSA"
            </code>
                </value>
            </constant>
            <constant name="CERT_STRONG_SIGN_SERIALIZED_INFO_CHOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_STRONG_SIGN_OID_INFO_CHOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_STRONG_SIGN_ENABLE_CRL_CHECK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_STRONG_SIGN_ENABLE_OCSP_CHECK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="szOID_CERT_STRONG_SIGN_OS_PREFIX" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x37, 0x32, 0x2E, 0x31, 0x2E, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERT_STRONG_SIGN_OS_1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x37, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERT_STRONG_SIGN_OS_CURRENT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x37, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERT_STRONG_KEY_OS_PREFIX" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x37, 0x32, 0x2E, 0x32, 0x2E, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERT_STRONG_KEY_OS_1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x37, 0x32, 0x2E, 0x32, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERT_STRONG_KEY_OS_CURRENT" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x37, 0x32, 0x2E, 0x32, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_7_DATA" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x37, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_7_SIGNED" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x37, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_7_ENVELOPED" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x37, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_7_SIGNEDANDENVELOPED" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x37, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_7_DIGESTED" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x37, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_7_ENCRYPTED" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x37, 0x2E, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_9_CONTENT_TYPE" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_9_MESSAGE_DIGEST" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x39, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENVELOPED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNED_AND_ENVELOPED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CMSG_HASHED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENCRYPTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CMSG_ALL_FLAGS" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(~0U)
            </code>
                </value>
            </constant>
            <constant name="CMSG_DATA_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 1)
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 2)
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENVELOPED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 3)
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNED_AND_ENVELOPED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 4)
            </code>
                </value>
            </constant>
            <constant name="CMSG_HASHED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 5)
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENCRYPTED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 6)
            </code>
                </value>
            </constant>
            <constant name="CERT_ID_ISSUER_SERIAL_NUMBER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_ID_KEY_IDENTIFIER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_ID_SHA1_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CMSG_KEY_AGREE_STATIC_KEY_CHOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CMSG_MAIL_LIST_HANDLE_KEY_CHOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CMSG_KEY_TRANS_RECIPIENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CMSG_KEY_AGREE_RECIPIENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CMSG_MAIL_LIST_RECIPIENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CMSG_SP3_COMPATIBLE_ENCRYPT_FLAG" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="CMSG_RC4_NO_SALT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000000
            </code>
                </value>
            </constant>
            <constant name="CMSG_INDEFINITE_LENGTH" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0xFFFFFFFF)
            </code>
                </value>
            </constant>
            <constant name="CMSG_BARE_CONTENT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CMSG_LENGTH_ONLY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CMSG_DETACHED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CMSG_AUTHENTICATED_ATTRIBUTES_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="CMSG_CONTENTS_OCTETS_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="CMSG_MAX_LENGTH_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="CMSG_CMS_ENCAPSULATED_CONTENT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNED_DATA_NO_SIGN_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000080
            </code>
                </value>
            </constant>
            <constant name="CMSG_CRYPT_RELEASE_CONTEXT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="CMSG_TYPE_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CMSG_CONTENT_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CMSG_BARE_CONTENT_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CMSG_INNER_CONTENT_TYPE_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNER_COUNT_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNER_INFO_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNER_CERT_INFO_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNER_HASH_ALGORITHM_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNER_AUTH_ATTR_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNER_UNAUTH_ATTR_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="CMSG_CERT_COUNT_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>11
            </code>
                </value>
            </constant>
            <constant name="CMSG_CERT_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>12
            </code>
                </value>
            </constant>
            <constant name="CMSG_CRL_COUNT_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>13
            </code>
                </value>
            </constant>
            <constant name="CMSG_CRL_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>14
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENVELOPE_ALGORITHM_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>15
            </code>
                </value>
            </constant>
            <constant name="CMSG_RECIPIENT_COUNT_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>17
            </code>
                </value>
            </constant>
            <constant name="CMSG_RECIPIENT_INDEX_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>18
            </code>
                </value>
            </constant>
            <constant name="CMSG_RECIPIENT_INFO_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>19
            </code>
                </value>
            </constant>
            <constant name="CMSG_HASH_ALGORITHM_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>20
            </code>
                </value>
            </constant>
            <constant name="CMSG_HASH_DATA_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>21
            </code>
                </value>
            </constant>
            <constant name="CMSG_COMPUTED_HASH_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>22
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENCRYPT_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>26
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENCRYPTED_DIGEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>27
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENCODED_SIGNER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>28
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENCODED_MESSAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>29
            </code>
                </value>
            </constant>
            <constant name="CMSG_VERSION_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>30
            </code>
                </value>
            </constant>
            <constant name="CMSG_ATTR_CERT_COUNT_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>31
            </code>
                </value>
            </constant>
            <constant name="CMSG_ATTR_CERT_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>32
            </code>
                </value>
            </constant>
            <constant name="CMSG_CMS_RECIPIENT_COUNT_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>33
            </code>
                </value>
            </constant>
            <constant name="CMSG_CMS_RECIPIENT_INDEX_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>34
            </code>
                </value>
            </constant>
            <constant name="CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>35
            </code>
                </value>
            </constant>
            <constant name="CMSG_CMS_RECIPIENT_INFO_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>36
            </code>
                </value>
            </constant>
            <constant name="CMSG_UNPROTECTED_ATTR_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>37
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNER_CERT_ID_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>38
            </code>
                </value>
            </constant>
            <constant name="CMSG_CMS_SIGNER_INFO_PARAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>39
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNED_DATA_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNED_DATA_V3" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNED_DATA_PKCS_1_5_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNED_DATA_CMS_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNER_INFO_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNER_INFO_V3" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNER_INFO_PKCS_1_5_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNER_INFO_CMS_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CMSG_HASHED_DATA_V0" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CMSG_HASHED_DATA_V2" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CMSG_HASHED_DATA_PKCS_1_5_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CMSG_HASHED_DATA_CMS_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENVELOPED_DATA_V0" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENVELOPED_DATA_V2" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENVELOPED_DATA_PKCS_1_5_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENVELOPED_DATA_CMS_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CMSG_KEY_AGREE_ORIGINATOR_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENVELOPED_RECIPIENT_V0" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENVELOPED_RECIPIENT_V2" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENVELOPED_RECIPIENT_V3" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENVELOPED_RECIPIENT_V4" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CMSG_KEY_TRANS_PKCS_1_5_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CMSG_KEY_TRANS_CMS_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CMSG_KEY_AGREE_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CMSG_MAIL_LIST_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_VERIFY_SIGNATURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_DECRYPT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_VERIFY_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_ADD_SIGNER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_DEL_SIGNER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_ADD_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_DEL_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>11
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_ADD_CRL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>12
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_DEL_CRL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>13
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_ADD_ATTR_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>14
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_DEL_ATTR_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>15
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_KEY_TRANS_DECRYPT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_KEY_AGREE_DECRYPT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>17
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_MAIL_LIST_DECRYPT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>18
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_VERIFY_SIGNATURE_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>19
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_ADD_CMS_SIGNER_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>20
            </code>
                </value>
            </constant>
            <constant name="CMSG_CTRL_ENABLE_STRONG_SIGNATURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>21
            </code>
                </value>
            </constant>
            <constant name="CMSG_VERIFY_SIGNER_PUBKEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CMSG_VERIFY_SIGNER_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CMSG_VERIFY_SIGNER_CHAIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CMSG_VERIFY_SIGNER_NULL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CMSG_VERIFY_COUNTER_SIGN_ENABLE_STRONG_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_GEN_ENCRYPT_KEY_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x47, 0x65, 0x6E, 0x45, 0x6E, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4B, 0x65, 0x79, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_EXPORT_ENCRYPT_KEY_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x45, 0x6E, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4B, 0x65, 0x79, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_IMPORT_ENCRYPT_KEY_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x49, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x45, 0x6E, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4B, 0x65, 0x79, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_DEFAULT_INSTALLABLE_FUNC_OID" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)1)
            </code>
                </value>
            </constant>
            <constant name="CMSG_CONTENT_ENCRYPT_PAD_ENCODED_LEN_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CMSG_CONTENT_ENCRYPT_FREE_PARA_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CMSG_CONTENT_ENCRYPT_FREE_OBJID_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CMSG_CONTENT_ENCRYPT_RELEASE_CONTEXT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_GEN_CONTENT_ENCRYPT_KEY_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x47, 0x65, 0x6E, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x45, 0x6E, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4B, 0x65, 0x79, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_CAPI1_GEN_CONTENT_ENCRYPT_KEY_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x47, 0x65, 0x6E, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x45, 0x6E, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4B, 0x65, 0x79, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_CNG_GEN_CONTENT_ENCRYPT_KEY_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x43, 0x4E, 0x47, 0x47, 0x65, 0x6E, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x45, 0x6E, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4B, 0x65, 0x79, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_KEY_TRANS_ENCRYPT_FREE_PARA_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CMSG_KEY_TRANS_ENCRYPT_FREE_OBJID_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_EXPORT_KEY_TRANS_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x4B, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_CAPI1_EXPORT_KEY_TRANS_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x4B, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_CNG_EXPORT_KEY_TRANS_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x43, 0x4E, 0x47, 0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x4B, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_KEY_AGREE_ENCRYPT_FREE_PARA_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CMSG_KEY_AGREE_ENCRYPT_FREE_MATERIAL_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_ALG_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_PARA_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_BITS_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="CMSG_KEY_AGREE_ENCRYPT_FREE_OBJID_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_EXPORT_KEY_AGREE_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x4B, 0x65, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_CAPI1_EXPORT_KEY_AGREE_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x4B, 0x65, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_CNG_EXPORT_KEY_AGREE_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x43, 0x4E, 0x47, 0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x4B, 0x65, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_MAIL_LIST_ENCRYPT_FREE_PARA_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CMSG_MAIL_LIST_ENCRYPT_FREE_OBJID_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_EXPORT_MAIL_LIST_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x4D, 0x61, 0x69, 0x6C, 0x4C, 0x69, 0x73, 0x74, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_CAPI1_EXPORT_MAIL_LIST_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x4D, 0x61, 0x69, 0x6C, 0x4C, 0x69, 0x73, 0x74, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_IMPORT_KEY_TRANS_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x49, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x4B, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_CAPI1_IMPORT_KEY_TRANS_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x49, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x4B, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_IMPORT_KEY_AGREE_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x49, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x4B, 0x65, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_CAPI1_IMPORT_KEY_AGREE_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x49, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x4B, 0x65, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_IMPORT_MAIL_LIST_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x49, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x4D, 0x61, 0x69, 0x6C, 0x4C, 0x69, 0x73, 0x74, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_CAPI1_IMPORT_MAIL_LIST_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x49, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x4D, 0x61, 0x69, 0x6C, 0x4C, 0x69, 0x73, 0x74, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_CNG_IMPORT_KEY_TRANS_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x43, 0x4E, 0x47, 0x49, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x4B, 0x65, 0x79, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_CNG_IMPORT_KEY_AGREE_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x43, 0x4E, 0x47, 0x49, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x4B, 0x65, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CMSG_OID_CNG_IMPORT_CONTENT_ENCRYPT_KEY_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x4D, 0x73, 0x67, 0x44, 0x6C, 0x6C, 0x43, 0x4E, 0x47, 0x49, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x45, 0x6E, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4B, 0x65, 0x79, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CERT_KEY_PROV_HANDLE_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_KEY_PROV_INFO_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_SHA1_HASH_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_MD5_HASH_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CERT_HASH_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_KEY_CONTEXT_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CERT_KEY_SPEC_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CERT_IE30_RESERVED_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="CERT_PUBKEY_HASH_RESERVED_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CERT_ENHKEY_USAGE_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="CERT_CTL_USAGE_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="CERT_NEXT_UPDATE_LOCATION_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="CERT_FRIENDLY_NAME_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>11
            </code>
                </value>
            </constant>
            <constant name="CERT_PVK_FILE_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>12
            </code>
                </value>
            </constant>
            <constant name="CERT_DESCRIPTION_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>13
            </code>
                </value>
            </constant>
            <constant name="CERT_ACCESS_STATE_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>14
            </code>
                </value>
            </constant>
            <constant name="CERT_SIGNATURE_HASH_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>15
            </code>
                </value>
            </constant>
            <constant name="CERT_SMART_CARD_DATA_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="CERT_EFS_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>17
            </code>
                </value>
            </constant>
            <constant name="CERT_FORTEZZA_DATA_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>18
            </code>
                </value>
            </constant>
            <constant name="CERT_ARCHIVED_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>19
            </code>
                </value>
            </constant>
            <constant name="CERT_KEY_IDENTIFIER_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>20
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTO_ENROLL_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>21
            </code>
                </value>
            </constant>
            <constant name="CERT_PUBKEY_ALG_PARA_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>22
            </code>
                </value>
            </constant>
            <constant name="CERT_CROSS_CERT_DIST_POINTS_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>23
            </code>
                </value>
            </constant>
            <constant name="CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>24
            </code>
                </value>
            </constant>
            <constant name="CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>25
            </code>
                </value>
            </constant>
            <constant name="CERT_ENROLLMENT_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>26
            </code>
                </value>
            </constant>
            <constant name="CERT_DATE_STAMP_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>27
            </code>
                </value>
            </constant>
            <constant name="CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>28
            </code>
                </value>
            </constant>
            <constant name="CERT_SUBJECT_NAME_MD5_HASH_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>29
            </code>
                </value>
            </constant>
            <constant name="CERT_EXTENDED_ERROR_INFO_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>30
            </code>
                </value>
            </constant>
            <constant name="CERT_RENEWAL_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>64
            </code>
                </value>
            </constant>
            <constant name="CERT_ARCHIVED_KEY_HASH_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>65
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTO_ENROLL_RETRY_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>66
            </code>
                </value>
            </constant>
            <constant name="CERT_AIA_URL_RETRIEVED_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>67
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTHORITY_INFO_ACCESS_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>68
            </code>
                </value>
            </constant>
            <constant name="CERT_BACKED_UP_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>69
            </code>
                </value>
            </constant>
            <constant name="CERT_OCSP_RESPONSE_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>70
            </code>
                </value>
            </constant>
            <constant name="CERT_REQUEST_ORIGINATOR_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>71
            </code>
                </value>
            </constant>
            <constant name="CERT_SOURCE_LOCATION_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>72
            </code>
                </value>
            </constant>
            <constant name="CERT_SOURCE_URL_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>73
            </code>
                </value>
            </constant>
            <constant name="CERT_NEW_KEY_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>74
            </code>
                </value>
            </constant>
            <constant name="CERT_OCSP_CACHE_PREFIX_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>75
            </code>
                </value>
            </constant>
            <constant name="CERT_SMART_CARD_ROOT_INFO_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>76
            </code>
                </value>
            </constant>
            <constant name="CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>77
            </code>
                </value>
            </constant>
            <constant name="CERT_NCRYPT_KEY_HANDLE_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>78
            </code>
                </value>
            </constant>
            <constant name="CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>79
            </code>
                </value>
            </constant>
            <constant name="CERT_SUBJECT_INFO_ACCESS_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>80
            </code>
                </value>
            </constant>
            <constant name="CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>81
            </code>
                </value>
            </constant>
            <constant name="CERT_CA_DISABLE_CRL_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>82
            </code>
                </value>
            </constant>
            <constant name="CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>83
            </code>
                </value>
            </constant>
            <constant name="CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>84
            </code>
                </value>
            </constant>
            <constant name="CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>85
            </code>
                </value>
            </constant>
            <constant name="CERT_SUBJECT_DISABLE_CRL_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>86
            </code>
                </value>
            </constant>
            <constant name="CERT_CEP_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>87
            </code>
                </value>
            </constant>
            <constant name="CERT_SIGN_HASH_CNG_ALG_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>89
            </code>
                </value>
            </constant>
            <constant name="CERT_SCARD_PIN_ID_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>90
            </code>
                </value>
            </constant>
            <constant name="CERT_SCARD_PIN_INFO_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>91
            </code>
                </value>
            </constant>
            <constant name="CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>92
            </code>
                </value>
            </constant>
            <constant name="CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>93
            </code>
                </value>
            </constant>
            <constant name="CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>94
            </code>
                </value>
            </constant>
            <constant name="CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>95
            </code>
                </value>
            </constant>
            <constant name="CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>96
            </code>
                </value>
            </constant>
            <constant name="CERT_NO_EXPIRE_NOTIFICATION_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>97
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTH_ROOT_SHA256_HASH_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>98
            </code>
                </value>
            </constant>
            <constant name="CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>99
            </code>
                </value>
            </constant>
            <constant name="CERT_HCRYPTPROV_TRANSFER_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>100
            </code>
                </value>
            </constant>
            <constant name="CERT_SMART_CARD_READER_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>101
            </code>
                </value>
            </constant>
            <constant name="CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>102
            </code>
                </value>
            </constant>
            <constant name="CERT_KEY_REPAIR_ATTEMPTED_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>103
            </code>
                </value>
            </constant>
            <constant name="CERT_DISALLOWED_FILETIME_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>104
            </code>
                </value>
            </constant>
            <constant name="CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>105
            </code>
                </value>
            </constant>
            <constant name="CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>106
            </code>
                </value>
            </constant>
            <constant name="CERT_SHA256_HASH_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>107
            </code>
                </value>
            </constant>
            <constant name="CERT_SCEP_SERVER_CERTS_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>108
            </code>
                </value>
            </constant>
            <constant name="CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>109
            </code>
                </value>
            </constant>
            <constant name="CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>110
            </code>
                </value>
            </constant>
            <constant name="CERT_SCEP_CA_CERT_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>111
            </code>
                </value>
            </constant>
            <constant name="CERT_SCEP_SIGNER_CERT_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>112
            </code>
                </value>
            </constant>
            <constant name="CERT_SCEP_NONCE_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>113
            </code>
                </value>
            </constant>
            <constant name="CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>114
            </code>
                </value>
            </constant>
            <constant name="CERT_SCEP_FLAGS_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>115
            </code>
                </value>
            </constant>
            <constant name="CERT_SCEP_GUID_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>116
            </code>
                </value>
            </constant>
            <constant name="CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>117
            </code>
                </value>
            </constant>
            <constant name="CERT_ISOLATED_KEY_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>118
            </code>
                </value>
            </constant>
            <constant name="CERT_SERIAL_CHAIN_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>119
            </code>
                </value>
            </constant>
            <constant name="CERT_KEY_CLASSIFICATION_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>120
            </code>
                </value>
            </constant>
            <constant name="CERT_OCSP_MUST_STAPLE_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>121
            </code>
                </value>
            </constant>
            <constant name="CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>122
            </code>
                </value>
            </constant>
            <constant name="CERT_NONCOMPLIANT_ROOT_URL_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>123
            </code>
                </value>
            </constant>
            <constant name="CERT_PIN_SHA256_HASH_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>124
            </code>
                </value>
            </constant>
            <constant name="CERT_CLR_DELETE_KEY_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>125
            </code>
                </value>
            </constant>
            <constant name="CERT_NOT_BEFORE_FILETIME_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>126
            </code>
                </value>
            </constant>
            <constant name="CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>127
            </code>
                </value>
            </constant>
            <constant name="CERT_FIRST_RESERVED_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>128
            </code>
                </value>
            </constant>
            <constant name="CERT_LAST_RESERVED_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00007FFF
            </code>
                </value>
            </constant>
            <constant name="CERT_FIRST_USER_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="CERT_LAST_USER_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000FFFF
            </code>
                </value>
            </constant>
            <constant name="szOID_CERT_PROP_ID_PREFIX" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x31, 0x31, 0x2E, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERT_KEY_IDENTIFIER_PROP_ID" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x31, 0x31, 0x2E, 0x32, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x31, 0x31, 0x2E, 0x32, 0x38, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x31, 0x31, 0x2E, 0x32, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERT_MD5_HASH_PROP_ID" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x31, 0x31, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERT_SIGNATURE_HASH_PROP_ID" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x31, 0x31, 0x2E, 0x31, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_DISALLOWED_HASH" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x31, 0x31, 0x2E, 0x31, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_CERT_DISALLOWED_FILETIME_PROP_ID" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CERT_ACCESS_STATE_WRITE_PERSIST_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_ACCESS_STATE_SYSTEM_STORE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="CERT_ACCESS_STATE_LM_SYSTEM_STORE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="CERT_ACCESS_STATE_GP_SYSTEM_STORE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8
            </code>
                </value>
            </constant>
            <constant name="CERT_ACCESS_STATE_SHARED_USER_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10
            </code>
                </value>
            </constant>
            <constant name="szOID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x36, 0x30, 0x2E, 0x33, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x36, 0x30, 0x2E, 0x33, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x36, 0x30, 0x2E, 0x33, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CERT_SET_KEY_PROV_HANDLE_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_SET_KEY_CONTEXT_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_NCRYPT_KEY_SPEC" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_MSG" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)1)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_MEMORY" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)2)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_FILE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)3)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_REG" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)4)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_PKCS7" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)5)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_SERIALIZED" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)6)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_FILENAME_A" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)7)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_FILENAME_W" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)8)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_FILENAME" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)8)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_SYSTEM_A" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)9)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_SYSTEM_W" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)10)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_SYSTEM" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)10)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_COLLECTION" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)11)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_SYSTEM_REGISTRY_A" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)12)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_SYSTEM_REGISTRY_W" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)13)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_SYSTEM_REGISTRY" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)13)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_PHYSICAL_W" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)14)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_PHYSICAL" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)14)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_SMART_CARD_W" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)15)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_SMART_CARD" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)15)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_LDAP_W" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)16)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_LDAP" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)16)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_PKCS12" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)17)
            </code>
                </value>
            </constant>
            <constant name="sz_CERT_STORE_PROV_MEMORY" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x4D, 0x65, 0x6D, 0x6F, 0x72, 0x79, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="sz_CERT_STORE_PROV_FILENAME_W" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x46, 0x69, 0x6C, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="sz_CERT_STORE_PROV_FILENAME" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x46, 0x69, 0x6C, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="sz_CERT_STORE_PROV_SYSTEM_W" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="sz_CERT_STORE_PROV_SYSTEM" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="sz_CERT_STORE_PROV_PKCS7" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x50, 0x4B, 0x43, 0x53, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="sz_CERT_STORE_PROV_PKCS12" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x50, 0x4B, 0x43, 0x53, 0x31, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="sz_CERT_STORE_PROV_SERIALIZED" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x53, 0x65, 0x72, 0x69, 0x61, 0x6C, 0x69, 0x7A, 0x65, 0x64, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="sz_CERT_STORE_PROV_COLLECTION" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="sz_CERT_STORE_PROV_SYSTEM_REGISTRY_W" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="sz_CERT_STORE_PROV_SYSTEM_REGISTRY" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="sz_CERT_STORE_PROV_PHYSICAL_W" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6C, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="sz_CERT_STORE_PROV_PHYSICAL" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6C, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="sz_CERT_STORE_PROV_SMART_CARD_W" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x53, 0x6D, 0x61, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="sz_CERT_STORE_PROV_SMART_CARD" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x53, 0x6D, 0x61, 0x72, 0x74, 0x43, 0x61, 0x72, 0x64, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="sz_CERT_STORE_PROV_LDAP_W" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x4C, 0x64, 0x61, 0x70, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="sz_CERT_STORE_PROV_LDAP" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x4C, 0x64, 0x61, 0x70, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_SIGNATURE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_TIME_VALIDITY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_REVOCATION_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_NO_CRL_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00010000
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_NO_ISSUER_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00020000
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_BASE_CRL_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_DELTA_CRL_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000200
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_NO_CRYPT_RELEASE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_SET_LOCALIZED_NAME_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_DELETE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_UNSAFE_PHYSICAL_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_SHARE_STORE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_SHARE_CONTEXT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000080
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_MANIFOLD_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_ENUM_ARCHIVED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000200
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_UPDATE_KEYID_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000400
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_BACKUP_RESTORE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000800
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_READONLY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_OPEN_EXISTING_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00004000
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_CREATE_NEW_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00002000
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_MAXIMUM_ALLOWED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00001000
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_MASK" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFF0000
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_RELOCATE_FLAG" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_UNPROTECTED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000000
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_DEFER_READ_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20000000
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_LOCATION_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00FF0000
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_LOCATION_SHIFT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_CURRENT_USER_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_LOCAL_MACHINE_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_CURRENT_SERVICE_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_SERVICES_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_USERS_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_CURRENT_USER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_LOCAL_MACHINE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(2 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_CURRENT_SERVICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(4 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_SERVICES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(5 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_USERS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(6 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(7 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(8 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(9 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_SYSTEM_STORE_LOCAL_MACHINE_WCOS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(10 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_GROUP_POLICY_SYSTEM_STORE_REGPATH" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Software\\Policies\\Microsoft\\SystemCertificates"
            </code>
                </value>
            </constant>
            <constant name="CERT_EFSBLOB_REGPATH" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Software\\Policies\\Microsoft\\SystemCertificates\\EFS"
            </code>
                </value>
            </constant>
            <constant name="CERT_EFSBLOB_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"EFSBlob"
            </code>
                </value>
            </constant>
            <constant name="CERT_PROT_ROOT_FLAGS_REGPATH" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Software\\Policies\\Microsoft\\SystemCertificates\\Root\\ProtectedRoots"
            </code>
                </value>
            </constant>
            <constant name="CERT_PROT_ROOT_FLAGS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Flags"
            </code>
                </value>
            </constant>
            <constant name="CERT_PROT_ROOT_DISABLE_CURRENT_USER_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_PROT_ROOT_INHIBIT_ADD_AT_INIT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="CERT_PROT_ROOT_INHIBIT_PURGE_LM_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="CERT_PROT_ROOT_DISABLE_LM_AUTH_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8
            </code>
                </value>
            </constant>
            <constant name="CERT_PROT_ROOT_ONLY_LM_GPT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8
            </code>
                </value>
            </constant>
            <constant name="CERT_PROT_ROOT_DISABLE_NT_AUTH_REQUIRED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10
            </code>
                </value>
            </constant>
            <constant name="CERT_PROT_ROOT_DISABLE_NOT_DEFINED_NAME_CONSTRAINT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20
            </code>
                </value>
            </constant>
            <constant name="CERT_PROT_ROOT_DISABLE_PEER_TRUST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000
            </code>
                </value>
            </constant>
            <constant name="CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"PeerUsages"
            </code>
                </value>
            </constant>
            <constant name="CERT_PROT_ROOT_PEER_USAGES_VALUE_NAME_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x50, 0x65, 0x65, 0x72, 0x55, 0x73, 0x61, 0x67, 0x65, 0x73, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CERT_PROT_ROOT_PEER_USAGES_DEFAULT_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x33, 0x2E, 0x32, 0x00, 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x35, 0x2E, 0x37, 0x2E, 0x33, 0x2E, 0x34, 0x00, 0x31, 0x2E, 0x33, 0x2E, 0x36, 0x2E, 0x31, 0x2E, 0x34, 0x2E, 0x31, 0x2E, 0x33, 0x31, 0x31, 0x2E, 0x31, 0x30, 0x2E, 0x33, 0x2E, 0x34, 0x00, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_PUB_SAFER_GROUP_POLICY_REGPATH" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Software\\Policies\\Microsoft\\SystemCertificates\\TrustedPublisher\\Safer"
            </code>
                </value>
            </constant>
            <constant name="CERT_LOCAL_MACHINE_SYSTEM_STORE_REGPATH" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Software\\Microsoft\\SystemCertificates"
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_PUB_SAFER_LOCAL_MACHINE_REGPATH" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Software\\Microsoft\\SystemCertificates\\TrustedPublisher\\Safer"
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_PUB_AUTHENTICODE_FLAGS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"AuthenticodeFlags"
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_PUB_ALLOW_TRUST_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000003
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_PUB_ALLOW_END_USER_TRUST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_PUB_ALLOW_MACHINE_ADMIN_TRUST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_PUB_ALLOW_ENTERPRISE_ADMIN_TRUST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_PUB_CHECK_PUBLISHER_REV_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_PUB_CHECK_TIMESTAMP_REV_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000200
            </code>
                </value>
            </constant>
            <constant name="CERT_OCM_SUBCOMPONENTS_LOCAL_MACHINE_REGPATH" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\OC Manager\\Subcomponents"
            </code>
                </value>
            </constant>
            <constant name="CERT_OCM_SUBCOMPONENTS_ROOT_AUTO_UPDATE_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"RootAutoUpdate"
            </code>
                </value>
            </constant>
            <constant name="CERT_DISABLE_ROOT_AUTO_UPDATE_REGPATH" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Software\\Policies\\Microsoft\\SystemCertificates\\AuthRoot"
            </code>
                </value>
            </constant>
            <constant name="CERT_DISABLE_ROOT_AUTO_UPDATE_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"DisableRootAutoUpdate"
            </code>
                </value>
            </constant>
            <constant name="CERT_ENABLE_DISALLOWED_CERT_AUTO_UPDATE_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"EnableDisallowedCertAutoUpdate"
            </code>
                </value>
            </constant>
            <constant name="CERT_DISABLE_PIN_RULES_AUTO_UPDATE_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"DisablePinRulesAutoUpdate"
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTO_UPDATE_LOCAL_MACHINE_REGPATH" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Software\\Microsoft\\SystemCertificates\\AuthRoot\\AutoUpdate"
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"RootDirUrl"
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTO_UPDATE_SYNC_FROM_DIR_URL_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"SyncFromDirUrl"
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTH_ROOT_AUTO_UPDATE_LOCAL_MACHINE_REGPATH" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Software\\Microsoft\\SystemCertificates\\AuthRoot\\AutoUpdate"
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTH_ROOT_AUTO_UPDATE_ROOT_DIR_URL_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"RootDirUrl"
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTH_ROOT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"SyncDeltaTime"
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTH_ROOT_AUTO_UPDATE_FLAGS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Flags"
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_UNTRUSTED_ROOT_LOGGING_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTH_ROOT_AUTO_UPDATE_DISABLE_PARTIAL_CHAIN_LOGGING_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTO_UPDATE_DISABLE_RANDOM_QUERY_STRING_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTH_ROOT_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"LastSyncTime"
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTH_ROOT_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"EncodedCtl"
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTH_ROOT_CTL_FILENAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"authroot.stl"
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTH_ROOT_CTL_FILENAME_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x61, 0x75, 0x74, 0x68, 0x72, 0x6F, 0x6F, 0x74, 0x2E, 0x73, 0x74, 0x6C, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTH_ROOT_CAB_FILENAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"authrootstl.cab"
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTH_ROOT_SEQ_FILENAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"authrootseq.txt"
            </code>
                </value>
            </constant>
            <constant name="CERT_AUTH_ROOT_CERT_EXT" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>".crt"
            </code>
                </value>
            </constant>
            <constant name="CERT_DISALLOWED_CERT_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"DisallowedCertSyncDeltaTime"
            </code>
                </value>
            </constant>
            <constant name="CERT_DISALLOWED_CERT_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"DisallowedCertLastSyncTime"
            </code>
                </value>
            </constant>
            <constant name="CERT_DISALLOWED_CERT_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"DisallowedCertEncodedCtl"
            </code>
                </value>
            </constant>
            <constant name="CERT_DISALLOWED_CERT_CTL_FILENAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"disallowedcert.stl"
            </code>
                </value>
            </constant>
            <constant name="CERT_DISALLOWED_CERT_CTL_FILENAME_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x64, 0x69, 0x73, 0x61, 0x6C, 0x6C, 0x6F, 0x77, 0x65, 0x64, 0x63, 0x65, 0x72, 0x74, 0x2E, 0x73, 0x74, 0x6C, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CERT_DISALLOWED_CERT_CAB_FILENAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"disallowedcertstl.cab"
            </code>
                </value>
            </constant>
            <constant name="CERT_DISALLOWED_CERT_AUTO_UPDATE_LIST_IDENTIFIER" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"DisallowedCert_AutoUpdate_1"
            </code>
                </value>
            </constant>
            <constant name="CERT_PIN_RULES_AUTO_UPDATE_SYNC_DELTA_TIME_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"PinRulesSyncDeltaTime"
            </code>
                </value>
            </constant>
            <constant name="CERT_PIN_RULES_AUTO_UPDATE_LAST_SYNC_TIME_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"PinRulesLastSyncTime"
            </code>
                </value>
            </constant>
            <constant name="CERT_PIN_RULES_AUTO_UPDATE_ENCODED_CTL_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"PinRulesEncodedCtl"
            </code>
                </value>
            </constant>
            <constant name="CERT_PIN_RULES_CTL_FILENAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"pinrules.stl"
            </code>
                </value>
            </constant>
            <constant name="CERT_PIN_RULES_CTL_FILENAME_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x70, 0x69, 0x6E, 0x72, 0x75, 0x6C, 0x65, 0x73, 0x2E, 0x73, 0x74, 0x6C, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CERT_PIN_RULES_CAB_FILENAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"pinrulesstl.cab"
            </code>
                </value>
            </constant>
            <constant name="CERT_PIN_RULES_AUTO_UPDATE_LIST_IDENTIFIER" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"PinRules_AutoUpdate_1"
            </code>
                </value>
            </constant>
            <constant name="CERT_REGISTRY_STORE_REMOTE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000
            </code>
                </value>
            </constant>
            <constant name="CERT_REGISTRY_STORE_SERIALIZED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20000
            </code>
                </value>
            </constant>
            <constant name="CERT_REGISTRY_STORE_CLIENT_GPT_FLAG" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="CERT_REGISTRY_STORE_LM_GPT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01000000
            </code>
                </value>
            </constant>
            <constant name="CERT_REGISTRY_STORE_ROAMING_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000
            </code>
                </value>
            </constant>
            <constant name="CERT_REGISTRY_STORE_MY_IE_DIRTY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x80000
            </code>
                </value>
            </constant>
            <constant name="CERT_REGISTRY_STORE_EXTERNAL_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x100000
            </code>
                </value>
            </constant>
            <constant name="CERT_IE_DIRTY_FLAGS_REGPATH" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Software\\Microsoft\\Cryptography\\IEDirtyFlags"
            </code>
                </value>
            </constant>
            <constant name="CERT_FILE_STORE_COMMIT_ENABLE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000
            </code>
                </value>
            </constant>
            <constant name="CERT_LDAP_STORE_SIGN_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000
            </code>
                </value>
            </constant>
            <constant name="CERT_LDAP_STORE_AREC_EXCLUSIVE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20000
            </code>
                </value>
            </constant>
            <constant name="CERT_LDAP_STORE_OPENED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000
            </code>
                </value>
            </constant>
            <constant name="CERT_LDAP_STORE_UNBIND_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x80000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_OPEN_STORE_PROV_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x65, 0x72, 0x74, 0x44, 0x6C, 0x6C, 0x4F, 0x70, 0x65, 0x6E, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x50, 0x72, 0x6F, 0x76, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_EXTERNAL_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_DELETED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_NO_PERSIST_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_SYSTEM_STORE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_LM_SYSTEM_STORE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_GP_SYSTEM_STORE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_SHARED_USER_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_CLOSE_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_READ_CERT_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_WRITE_CERT_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_DELETE_CERT_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_READ_CRL_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_WRITE_CRL_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_DELETE_CRL_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_READ_CTL_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_WRITE_CTL_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_DELETE_CTL_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>11
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>12
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_CONTROL_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>13
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_FIND_CERT_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>14
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_FREE_FIND_CERT_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>15
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_GET_CERT_PROPERTY_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_FIND_CRL_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>17
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_FREE_FIND_CRL_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>18
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_GET_CRL_PROPERTY_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>19
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_FIND_CTL_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>20
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_FREE_FIND_CTL_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>21
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_GET_CTL_PROPERTY_FUNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>22
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_PROV_WRITE_ADD_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_SAVE_AS_STORE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_SAVE_AS_PKCS7" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_SAVE_AS_PKCS12" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_SAVE_TO_FILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_SAVE_TO_MEMORY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_SAVE_TO_FILENAME_A" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_SAVE_TO_FILENAME_W" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_SAVE_TO_FILENAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CERT_CLOSE_STORE_FORCE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_CLOSE_STORE_CHECK_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xFFFF
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_SHIFT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_ANY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_SHA1_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_ATTR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_MD5_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_PROPERTY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_PUBLIC_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_NAME_STR_A" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_NAME_STR_W" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_KEY_SPEC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_ENHKEY_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_CTL_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_SUBJECT_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>11
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_ISSUER_OF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>12
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_EXISTING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>13
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_SIGNATURE_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>14
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_KEY_IDENTIFIER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>15
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_CERT_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_CROSS_CERT_DIST_POINTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>17
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_PUBKEY_MD5_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>18
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_SUBJECT_INFO_ACCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>19
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_HASH_STR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>20
            </code>
                </value>
            </constant>
            <constant name="CERT_COMPARE_HAS_PRIVATE_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>21
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_ANY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_SHA1_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_MD5_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(4 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_SIGNATURE_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(14 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_KEY_IDENTIFIER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(15 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_PROPERTY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(5 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_PUBLIC_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(6 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_SUBJECT_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(2 &lt;&lt; 16 | 7)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_SUBJECT_ATTR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(3 &lt;&lt; 16 | 7)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_ISSUER_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(2 &lt;&lt; 16 | 4)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_ISSUER_ATTR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(3 &lt;&lt; 16 | 4)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_SUBJECT_STR_A" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(7 &lt;&lt; 16 | 7)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_SUBJECT_STR_W" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(8 &lt;&lt; 16 | 7)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_SUBJECT_STR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(8 &lt;&lt; 16 | 7)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_ISSUER_STR_A" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(7 &lt;&lt; 16 | 4)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_ISSUER_STR_W" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(8 &lt;&lt; 16 | 4)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_ISSUER_STR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(8 &lt;&lt; 16 | 4)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_KEY_SPEC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(9 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_ENHKEY_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(10 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_CTL_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(10 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_SUBJECT_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(11 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_ISSUER_OF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(12 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_EXISTING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(13 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_CERT_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(16 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_CROSS_CERT_DIST_POINTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(17 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_PUBKEY_MD5_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(18 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_SUBJECT_INFO_ACCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(19 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_HASH_STR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(20 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_HAS_PRIVATE_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(21 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_NO_ENHKEY_USAGE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_OR_ENHKEY_USAGE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_VALID_ENHKEY_USAGE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_OPTIONAL_CTL_USAGE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_NO_CTL_USAGE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_OR_CTL_USAGE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10
            </code>
                </value>
            </constant>
            <constant name="CERT_FIND_VALID_CTL_USAGE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20
            </code>
                </value>
            </constant>
            <constant name="CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="CERT_SET_PROPERTY_INHIBIT_PERSIST_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000000
            </code>
                </value>
            </constant>
            <constant name="CTL_ENTRY_FROM_PROP_CHAIN_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CRL_FIND_ANY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CRL_FIND_ISSUED_BY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CRL_FIND_EXISTING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CRL_FIND_ISSUED_FOR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CRL_FIND_ISSUED_BY_AKI_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CRL_FIND_ISSUED_BY_SIGNATURE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="CRL_FIND_ISSUED_BY_DELTA_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="CRL_FIND_ISSUED_BY_BASE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8
            </code>
                </value>
            </constant>
            <constant name="CRL_FIND_ISSUED_FOR_SET_STRONG_PROPERTIES_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_ADD_NEW" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_ADD_USE_EXISTING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_ADD_REPLACE_EXISTING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_ADD_ALWAYS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_ADD_NEWER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_CERTIFICATE_CONTEXT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_CRL_CONTEXT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_CTL_CONTEXT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_ALL_CONTEXT_FLAG" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(~0U)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_CERTIFICATE_CONTEXT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 1)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_CRL_CONTEXT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 2)
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_CTL_CONTEXT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 3)
            </code>
                </value>
            </constant>
            <constant name="CTL_ANY_SUBJECT_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CTL_CERT_SUBJECT_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CTL_FIND_ANY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CTL_FIND_SHA1_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CTL_FIND_MD5_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CTL_FIND_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CTL_FIND_SUBJECT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CTL_FIND_EXISTING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CTL_FIND_NO_LIST_ID_CBDATA" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="CTL_FIND_NO_SIGNER_PTR" access="public">
                <type primitive="False">CERT_INFO*</type>
                <value>
                    <unchecked>
                        <code>
                            <value></value>((CERT_INFO*)-1)
            </code>
                    </unchecked>
                </value>
            </constant>
            <constant name="CTL_FIND_SAME_USAGE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_CTRL_RESYNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_CTRL_NOTIFY_CHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_CTRL_COMMIT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_CTRL_AUTO_RESYNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_CTRL_CANCEL_NOTIFY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_CTRL_INHIBIT_DUPLICATE_HANDLE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_CTRL_COMMIT_FORCE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_CTRL_COMMIT_CLEAR_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="CERT_STORE_LOCALIZED_NAME_PROP_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1000
            </code>
                </value>
            </constant>
            <constant name="CERT_CREATE_CONTEXT_NOCOPY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_CREATE_CONTEXT_SORTED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="CERT_CREATE_CONTEXT_NO_ENTRY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8
            </code>
                </value>
            </constant>
            <constant name="CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="CERT_PHYSICAL_STORE_REMOTE_OPEN_DISABLE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="CERT_PHYSICAL_STORE_INSERT_COMPUTER_NAME_ENABLE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8
            </code>
                </value>
            </constant>
            <constant name="CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_PHYSICAL_STORE_DEFAULT_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>".Default"
            </code>
                </value>
            </constant>
            <constant name="CERT_PHYSICAL_STORE_GROUP_POLICY_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>".GroupPolicy"
            </code>
                </value>
            </constant>
            <constant name="CERT_PHYSICAL_STORE_LOCAL_MACHINE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>".LocalMachine"
            </code>
                </value>
            </constant>
            <constant name="CERT_PHYSICAL_STORE_DS_USER_CERTIFICATE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>".UserCertificate"
            </code>
                </value>
            </constant>
            <constant name="CERT_PHYSICAL_STORE_LOCAL_MACHINE_GROUP_POLICY_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>".LocalMachineGroupPolicy"
            </code>
                </value>
            </constant>
            <constant name="CERT_PHYSICAL_STORE_ENTERPRISE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>".Enterprise"
            </code>
                </value>
            </constant>
            <constant name="CERT_PHYSICAL_STORE_AUTH_ROOT_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>".AuthRoot"
            </code>
                </value>
            </constant>
            <constant name="CERT_PHYSICAL_STORE_SMART_CARD_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>".SmartCard"
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_OPEN_SYSTEM_STORE_PROV_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x65, 0x72, 0x74, 0x44, 0x6C, 0x6C, 0x4F, 0x70, 0x65, 0x6E, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x50, 0x72, 0x6F, 0x76, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_REGISTER_SYSTEM_STORE_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x65, 0x72, 0x74, 0x44, 0x6C, 0x6C, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_UNREGISTER_SYSTEM_STORE_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x65, 0x72, 0x74, 0x44, 0x6C, 0x6C, 0x55, 0x6E, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_ENUM_SYSTEM_STORE_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x65, 0x72, 0x74, 0x44, 0x6C, 0x6C, 0x45, 0x6E, 0x75, 0x6D, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_REGISTER_PHYSICAL_STORE_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x65, 0x72, 0x74, 0x44, 0x6C, 0x6C, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6C, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_UNREGISTER_PHYSICAL_STORE_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x65, 0x72, 0x74, 0x44, 0x6C, 0x6C, 0x55, 0x6E, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6C, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_ENUM_PHYSICAL_STORE_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x65, 0x72, 0x74, 0x44, 0x6C, 0x6C, 0x45, 0x6E, 0x75, 0x6D, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6C, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_SYSTEM_STORE_LOCATION_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"SystemStoreLocation"
            </code>
                </value>
            </constant>
            <constant name="CMSG_TRUSTED_SIGNER_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CMSG_SIGNER_ONLY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="CMSG_USE_SIGNER_INDEX_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="CMSG_CMS_ENCAPSULATED_CTL_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENCODE_SORTED_CTL_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_VERIFY_TRUSTED_SIGNERS_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="CERT_VERIFY_NO_TIME_CHECK_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="CERT_VERIFY_ALLOW_MORE_USAGE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8
            </code>
                </value>
            </constant>
            <constant name="CERT_VERIFY_UPDATED_CTL_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_CONTEXT_REVOCATION_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_VERIFY_REV_CHAIN_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CERT_VERIFY_REV_ACCUMULATIVE_TIMEOUT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CERT_VERIFY_REV_SERVER_OCSP_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="CERT_VERIFY_REV_NO_OCSP_FAILOVER_TO_CRL_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="CERT_VERIFY_REV_SERVER_OCSP_WIRE_ONLY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="CERT_UNICODE_IS_RDN_ATTRS_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CRYPT_VERIFY_CERT_SIGN_SUBJECT_OCSP_BASIC_SIGNED_RESPONSE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CRYPT_VERIFY_CERT_SIGN_ISSUER_NULL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CRYPT_VERIFY_CERT_SIGN_DISABLE_MD2_MD4_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_VERIFY_CERT_SIGN_SET_STRONG_PROPERTIES_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CRYPT_VERIFY_CERT_SIGN_RETURN_STRONG_PROPERTIES_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CRYPT_VERIFY_CERT_SIGN_CHECK_WEAK_HASH_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x6C, 0x6C, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x6E, 0x63, 0x6F, 0x64, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6E, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6D, 0x65, 0x74, 0x65, 0x72, 0x73, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_SIGN_AND_ENCODE_HASH_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x6C, 0x6C, 0x53, 0x69, 0x67, 0x6E, 0x41, 0x6E, 0x64, 0x45, 0x6E, 0x63, 0x6F, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_VERIFY_ENCODED_SIGNATURE_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x6C, 0x6C, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x45, 0x6E, 0x63, 0x6F, 0x64, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6E, 0x61, 0x74, 0x75, 0x72, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x6C, 0x6C, 0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x50, 0x75, 0x62, 0x6C, 0x69, 0x63, 0x4B, 0x65, 0x79, 0x49, 0x6E, 0x66, 0x6F, 0x45, 0x78, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x6C, 0x6C, 0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x50, 0x75, 0x62, 0x6C, 0x69, 0x63, 0x4B, 0x65, 0x79, 0x49, 0x6E, 0x66, 0x6F, 0x45, 0x78, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x6C, 0x6C, 0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x50, 0x75, 0x62, 0x6C, 0x69, 0x63, 0x4B, 0x65, 0x79, 0x49, 0x6E, 0x66, 0x6F, 0x46, 0x72, 0x6F, 0x6D, 0x42, 0x43, 0x72, 0x79, 0x70, 0x74, 0x4B, 0x65, 0x79, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x6C, 0x6C, 0x49, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x50, 0x75, 0x62, 0x6C, 0x69, 0x63, 0x4B, 0x65, 0x79, 0x49, 0x6E, 0x66, 0x6F, 0x45, 0x78, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x6C, 0x6C, 0x49, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x50, 0x75, 0x62, 0x6C, 0x69, 0x63, 0x4B, 0x65, 0x79, 0x49, 0x6E, 0x66, 0x6F, 0x45, 0x78, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ACQUIRE_CACHE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ACQUIRE_USE_PROV_INFO_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ACQUIRE_COMPARE_KEY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ACQUIRE_NO_HEALING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ACQUIRE_SILENT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ACQUIRE_WINDOW_HANDLE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000080
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ACQUIRE_NCRYPT_KEY_FLAGS_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00070000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ACQUIRE_ALLOW_NCRYPT_KEY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00010000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ACQUIRE_PREFER_NCRYPT_KEY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00020000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00040000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FIND_USER_KEYSET_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FIND_MACHINE_KEYSET_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CRYPT_FIND_SILENT_KEYSET_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_IMPORT_PRIVATE_KEY_INFO_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x6C, 0x6C, 0x49, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4B, 0x65, 0x79, 0x49, 0x6E, 0x66, 0x6F, 0x45, 0x78, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_EXPORT_PRIVATE_KEY_INFO_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x72, 0x79, 0x70, 0x74, 0x44, 0x6C, 0x6C, 0x45, 0x78, 0x70, 0x6F, 0x72, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4B, 0x65, 0x79, 0x49, 0x6E, 0x66, 0x6F, 0x45, 0x78, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DELETE_KEYSET" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="CertRDNValueToStr" access="public">
                <type primitive="False">delegate*&lt;uint, CRYPTOAPI_BLOB*, ushort*, uint, uint&gt;</type>
                <value>
                    <deref>
                        <code>CertRDNValueToStrW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CertNameToStr" access="public">
                <type primitive="False">delegate*&lt;uint, CRYPTOAPI_BLOB*, uint, ushort*, uint, uint&gt;</type>
                <value>
                    <deref>
                        <code>CertNameToStrW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CERT_SIMPLE_NAME_STR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_OID_NAME_STR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_X500_NAME_STR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_XML_NAME_STR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_STR_SEMICOLON_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000000
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_STR_NO_PLUS_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20000000
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_STR_NO_QUOTING_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000000
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_STR_CRLF_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x08000000
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_STR_COMMA_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04000000
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_STR_REVERSE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02000000
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_STR_FORWARD_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01000000
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00010000
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00020000
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00040000
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00080000
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00100000
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_STR_ENABLE_PUNYCODE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00200000
            </code>
                </value>
            </constant>
            <constant name="CertStrToName" access="public">
                <type primitive="False">delegate*&lt;uint, ushort*, uint, void*, byte*, uint*, ushort**, int&gt;</type>
                <value>
                    <deref>
                        <code>CertStrToNameW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CertGetNameString" access="public">
                <type primitive="False">delegate*&lt;CERT_CONTEXT*, uint, uint, void*, ushort*, uint, uint&gt;</type>
                <value>
                    <deref>
                        <code>CertGetNameStringW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CERT_NAME_EMAIL_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_RDN_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_ATTR_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_SIMPLE_DISPLAY_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_FRIENDLY_DISPLAY_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_DNS_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_URL_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_UPN_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_ISSUER_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_DISABLE_IE4_UTF8_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00010000
            </code>
                </value>
            </constant>
            <constant name="CERT_NAME_SEARCH_ALL_NAMES_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MESSAGE_KEYID_SIGNER_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MESSAGE_SILENT_KEYSET_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="CRYPT_MESSAGE_KEYID_RECIPIENT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="CertOpenSystemStore" access="public">
                <type primitive="False">delegate*&lt;nuint, ushort*, void*&gt;</type>
                <value>
                    <deref>
                        <code>CertOpenSystemStoreW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CertAddEncodedCertificateToSystemStore" access="public">
                <type primitive="False">delegate*&lt;ushort*, byte*, uint, int&gt;</type>
                <value>
                    <deref>
                        <code>CertAddEncodedCertificateToSystemStoreW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CERT_QUERY_OBJECT_FILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_OBJECT_BLOB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_CTL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_CRL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_SERIALIZED_STORE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_SERIALIZED_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_SERIALIZED_CTL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_SERIALIZED_CRL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_PKCS7_SIGNED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_PKCS7_UNSIGNED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_PKCS10" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>11
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_PFX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>12
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_CERT_PAIR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>13
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_PFX_AND_LOAD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>14
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_FLAG_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 1)
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_FLAG_CTL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 2)
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_FLAG_CRL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 3)
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 4)
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 5)
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 6)
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 7)
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 8)
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 9)
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 10)
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_FLAG_PKCS10" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 11)
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_FLAG_PFX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 12)
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_FLAG_CERT_PAIR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 13)
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_FLAG_PFX_AND_LOAD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 14)
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_FLAG_ALL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((1 &lt;&lt; 1) | (1 &lt;&lt; 2) | (1 &lt;&lt; 3) | (1 &lt;&lt; 4) | (1 &lt;&lt; 5) | (1 &lt;&lt; 6) | (1 &lt;&lt; 7) | (1 &lt;&lt; 8) | (1 &lt;&lt; 9) | (1 &lt;&lt; 10) | (1 &lt;&lt; 11) | (1 &lt;&lt; 12) | (1 &lt;&lt; 13))
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_CONTENT_FLAG_ALL_ISSUER_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((1 &lt;&lt; 1) | (1 &lt;&lt; 4) | (1 &lt;&lt; 5) | (1 &lt;&lt; 8) | (1 &lt;&lt; 9))
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_FORMAT_BINARY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_FORMAT_BASE64_ENCODED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_FORMAT_ASN_ASCII_HEX_ENCODED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_FORMAT_FLAG_BINARY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 1)
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 2)
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_FORMAT_FLAG_ASN_ASCII_HEX_ENCODED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 3)
            </code>
                </value>
            </constant>
            <constant name="CERT_QUERY_FORMAT_FLAG_ALL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((1 &lt;&lt; 1) | (1 &lt;&lt; 2) | (1 &lt;&lt; 3))
            </code>
                </value>
            </constant>
            <constant name="CREDENTIAL_OID_PASSWORD_CREDENTIALS_A" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)1)
            </code>
                </value>
            </constant>
            <constant name="CREDENTIAL_OID_PASSWORD_CREDENTIALS_W" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)2)
            </code>
                </value>
            </constant>
            <constant name="CREDENTIAL_OID_PASSWORD_CREDENTIALS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)2)
            </code>
                </value>
            </constant>
            <constant name="SCHEME_OID_RETRIEVE_ENCODED_OBJECT_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x53, 0x63, 0x68, 0x65, 0x6D, 0x65, 0x44, 0x6C, 0x6C, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x45, 0x6E, 0x63, 0x6F, 0x64, 0x65, 0x64, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="SCHEME_OID_RETRIEVE_ENCODED_OBJECTW_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x53, 0x63, 0x68, 0x65, 0x6D, 0x65, 0x44, 0x6C, 0x6C, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x45, 0x6E, 0x63, 0x6F, 0x64, 0x65, 0x64, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x57, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CONTEXT_OID_CREATE_OBJECT_CONTEXT_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6C, 0x6C, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x43, 0x6F, 0x6E, 0x74, 0x65, 0x78, 0x74, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CONTEXT_OID_CERTIFICATE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)1)
            </code>
                </value>
            </constant>
            <constant name="CONTEXT_OID_CRL" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)2)
            </code>
                </value>
            </constant>
            <constant name="CONTEXT_OID_CTL" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)3)
            </code>
                </value>
            </constant>
            <constant name="CONTEXT_OID_PKCS7" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)4)
            </code>
                </value>
            </constant>
            <constant name="CONTEXT_OID_CAPI2_ANY" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)5)
            </code>
                </value>
            </constant>
            <constant name="CONTEXT_OID_OCSP_RESP" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)6)
            </code>
                </value>
            </constant>
            <constant name="CRYPT_RETRIEVE_MULTIPLE_OBJECTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_CACHE_ONLY_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CRYPT_WIRE_ONLY_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DONT_CACHE_RESULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ASYNC_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STICKY_CACHE_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00001000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_LDAP_SCOPE_BASE_ONLY_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00002000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OFFLINE_CHECK_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00004000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_LDAP_INSERT_ENTRY_ATTRIBUTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_LDAP_SIGN_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00010000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_NO_AUTH_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00020000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_LDAP_AREC_EXCLUSIVE_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00040000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_AIA_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00080000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_HTTP_POST_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00100000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_PROXY_CACHE_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00200000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_NOT_MODIFIED_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00400000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ENABLE_SSL_REVOCATION_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00800000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_RANDOM_QUERY_STRING_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ENABLE_FILE_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x08000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_CREATE_NEW_FLUSH_ENTRY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_VERIFY_CONTEXT_SIGNATURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="CRYPT_VERIFY_DATA_HASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="CRYPT_KEEP_TIME_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000080
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DONT_VERIFY_SIGNATURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="CRYPT_DONT_CHECK_TIME_VALIDITY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000200
            </code>
                </value>
            </constant>
            <constant name="CRYPT_CHECK_FRESHNESS_TIME_VALIDITY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000400
            </code>
                </value>
            </constant>
            <constant name="CRYPT_ACCUMULATIVE_TIMEOUT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000800
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OCSP_ONLY_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_NO_OCSP_FAILOVER_TO_CRL_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02000000
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_URL_CACHE_PRE_FETCH_NONE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_URL_CACHE_PRE_FETCH_BLOB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_URL_CACHE_PRE_FETCH_CRL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_URL_CACHE_PRE_FETCH_OCSP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_URL_CACHE_PRE_FETCH_AUTOROOT_CAB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_URL_CACHE_PRE_FETCH_DISALLOWED_CERT_CAB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_URL_CACHE_PRE_FETCH_PIN_RULES_CAB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_URL_CACHE_DEFAULT_FLUSH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_URL_CACHE_DISABLE_FLUSH" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_URL_CACHE_RESPONSE_NONE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_URL_CACHE_RESPONSE_HTTP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_URL_CACHE_RESPONSE_VALIDATED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_RETRIEVE_MAX_ERROR_CONTENT_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1000
            </code>
                </value>
            </constant>
            <constant name="CryptRetrieveObjectByUrl" access="public">
                <type primitive="False">delegate*&lt;ushort*, sbyte*, uint, uint, void**, IntPtr, CRYPT_CREDENTIALS*, void*, CRYPT_RETRIEVE_AUX_INFO*, int&gt;</type>
                <value>
                    <deref>
                        <code>CryptRetrieveObjectByUrlW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CRYPT_PARAM_ASYNC_RETRIEVAL_COMPLETION" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)1)
            </code>
                </value>
            </constant>
            <constant name="CRYPT_PARAM_CANCEL_ASYNC_RETRIEVAL" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)2)
            </code>
                </value>
            </constant>
            <constant name="CRYPT_GET_URL_FROM_PROPERTY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_GET_URL_FROM_EXTENSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="URL_OID_GET_OBJECT_URL_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x55, 0x72, 0x6C, 0x44, 0x6C, 0x6C, 0x47, 0x65, 0x74, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6C, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="URL_OID_CERTIFICATE_ISSUER" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)1)
            </code>
                </value>
            </constant>
            <constant name="URL_OID_CERTIFICATE_CRL_DIST_POINT" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)2)
            </code>
                </value>
            </constant>
            <constant name="URL_OID_CTL_ISSUER" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)3)
            </code>
                </value>
            </constant>
            <constant name="URL_OID_CTL_NEXT_UPDATE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)4)
            </code>
                </value>
            </constant>
            <constant name="URL_OID_CRL_ISSUER" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)5)
            </code>
                </value>
            </constant>
            <constant name="URL_OID_CERTIFICATE_FRESHEST_CRL" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)6)
            </code>
                </value>
            </constant>
            <constant name="URL_OID_CRL_FRESHEST_CRL" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)7)
            </code>
                </value>
            </constant>
            <constant name="URL_OID_CROSS_CERT_DIST_POINT" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)8)
            </code>
                </value>
            </constant>
            <constant name="URL_OID_CERTIFICATE_OCSP" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)9)
            </code>
                </value>
            </constant>
            <constant name="URL_OID_CERTIFICATE_OCSP_AND_CRL_DIST_POINT" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)10)
            </code>
                </value>
            </constant>
            <constant name="URL_OID_CERTIFICATE_CRL_DIST_POINT_AND_OCSP" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)11)
            </code>
                </value>
            </constant>
            <constant name="URL_OID_CROSS_CERT_SUBJECT_INFO_ACCESS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)12)
            </code>
                </value>
            </constant>
            <constant name="URL_OID_CERTIFICATE_ONLY_OCSP" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)13)
            </code>
                </value>
            </constant>
            <constant name="TIME_VALID_OID_GET_OBJECT_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x54, 0x69, 0x6D, 0x65, 0x56, 0x61, 0x6C, 0x69, 0x64, 0x44, 0x6C, 0x6C, 0x47, 0x65, 0x74, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="TIME_VALID_OID_GET_CTL" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)1)
            </code>
                </value>
            </constant>
            <constant name="TIME_VALID_OID_GET_CRL" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)2)
            </code>
                </value>
            </constant>
            <constant name="TIME_VALID_OID_GET_CRL_FROM_CERT" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)3)
            </code>
                </value>
            </constant>
            <constant name="TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CERT" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)4)
            </code>
                </value>
            </constant>
            <constant name="TIME_VALID_OID_GET_FRESHEST_CRL_FROM_CRL" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)5)
            </code>
                </value>
            </constant>
            <constant name="TIME_VALID_OID_FLUSH_OBJECT_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x54, 0x69, 0x6D, 0x65, 0x56, 0x61, 0x6C, 0x69, 0x64, 0x44, 0x6C, 0x6C, 0x46, 0x6C, 0x75, 0x73, 0x68, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="TIME_VALID_OID_FLUSH_CTL" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)1)
            </code>
                </value>
            </constant>
            <constant name="TIME_VALID_OID_FLUSH_CRL" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)2)
            </code>
                </value>
            </constant>
            <constant name="TIME_VALID_OID_FLUSH_CRL_FROM_CERT" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)3)
            </code>
                </value>
            </constant>
            <constant name="TIME_VALID_OID_FLUSH_FRESHEST_CRL_FROM_CERT" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)4)
            </code>
                </value>
            </constant>
            <constant name="TIME_VALID_OID_FLUSH_FRESHEST_CRL_FROM_CRL" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)5)
            </code>
                </value>
            </constant>
            <constant name="CERT_CREATE_SELFSIGN_NO_SIGN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_CREATE_SELFSIGN_NO_KEY_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CRYPT_KEYID_MACHINE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="CRYPT_KEYID_ALLOC_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_KEYID_DELETE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="CRYPT_KEYID_SET_NEW_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00002000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_CONFIG_REGPATH" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Software\\Microsoft\\Cryptography\\OID\\EncodingType 0\\CertDllCreateCertificateChainEngine\\Config"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MAX_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"MaxUrlRetrievalByteCount"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MAX_URL_RETRIEVAL_BYTE_COUNT_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(100 * 1024 * 1024)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_CACHE_RESYNC_FILETIME_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"ChainCacheResyncFiletime"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_MANDATORY_BASIC_CONSTRAINTS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"DisableMandatoryBasicConstraints"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_CA_NAME_CONSTRAINTS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"DisableCANameConstraints"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_UNSUPPORTED_CRITICAL_EXTENSIONS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"DisableUnsupportedCriticalExtensions"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"MaxAIAUrlCountInCert"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MAX_AIA_URL_COUNT_IN_CERT_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"MaxAIAUrlRetrievalCountPerChain"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_COUNT_PER_CHAIN_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"MaxAIAUrlRetrievalByteCount"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_BYTE_COUNT_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>100000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"MaxAIAUrlRetrievalCertCount"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MAX_AIA_URL_RETRIEVAL_CERT_COUNT_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_OCSP_VALIDITY_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"OcspValiditySeconds"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_OCSP_VALIDITY_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(12 * 60 * 60)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_SERIAL_CHAIN_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"DisableSerialChain"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_SERIAL_CHAIN_LOG_FILE_NAME_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"SerialChainLogFileName"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_SYNC_WITH_SSL_TIME_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"DisableSyncWithSslTime"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"MaxSslTimeUpdatedEventCount"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MAX_SSL_TIME_UPDATED_EVENT_COUNT_DISABLE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_SSL_HANDSHAKE_LOG_FILE_NAME_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"SslHandshakeLogFileName"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_ENABLE_WEAK_SIGNATURE_FLAGS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"EnableWeakSignatureFlags"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_ENABLE_MD2_MD4_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_ENABLE_WEAK_RSA_ROOT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_ENABLE_WEAK_LOGGING_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_ENABLE_ONLY_WEAK_LOGGING_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"MinRsaPubKeyBitLength"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1023
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MIN_RSA_PUB_KEY_BIT_LENGTH_DISABLE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_WEAK_RSA_PUB_KEY_TIME_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"WeakRsaPubKeyTime"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_WEAK_RSA_PUB_KEY_TIME_DEFAULT" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>0x01CA8A755C6E0000UL
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_WEAK_SIGNATURE_LOG_DIR_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"WeakSignatureLogDir"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DEFAULT_CONFIG_SUBDIR" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Default"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_WEAK_PREFIX_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Weak"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_WEAK_THIRD_PARTY_CONFIG_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"ThirdParty"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_WEAK_ALL_CONFIG_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"All"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_WEAK_FLAGS_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Flags"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_WEAK_HYGIENE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Hygiene"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_WEAK_AFTER_TIME_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"AfterTime"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_WEAK_FILE_HASH_AFTER_TIME_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"FileHashAfterTime"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_WEAK_TIMESTAMP_HASH_AFTER_TIME_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"TimestampHashAfterTime"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_WEAK_MIN_BIT_LENGTH_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"MinBitLength"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_WEAK_SHA256_ALLOW_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Sha256Allow"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MIN_PUB_KEY_BIT_LENGTH_DISABLE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_ENABLE_WEAK_SETTINGS_FLAG" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_ALL_EKU_WEAK_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00010000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_ENABLE_ALL_EKU_HYGIENE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00020000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_OPT_IN_SERVER_AUTH_WEAK_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00040000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_SERVER_AUTH_WEAK_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00100000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_ENABLE_SERVER_AUTH_HYGIENE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00200000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_CODE_SIGNING_WEAK_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00400000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_MOTW_CODE_SIGNING_WEAK_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00800000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_ENABLE_CODE_SIGNING_HYGIENE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01000000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_ENABLE_MOTW_CODE_SIGNING_HYGIENE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02000000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_TIMESTAMP_WEAK_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04000000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_WEAK_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x08000000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_ENABLE_TIMESTAMP_HYGIENE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_ENABLE_MOTW_TIMESTAMP_HYGIENE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20000000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MOTW_IGNORE_AFTER_TIME_WEAK_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00001000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_MOTW_FILE_HASH_WEAK_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00002000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00004000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_MOTW_TIMESTAMP_HASH_WEAK_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_WEAK_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00010000 | 0x00100000 | 0x00040000 | 0x00400000 | 0x00800000 | 0x04000000 | 0x08000000)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_FILE_HASH_WEAK_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00001000 | 0x00002000)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_TIMESTAMP_HASH_WEAK_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00004000 | 0x00008000)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_ENABLE_HYGIENE_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00020000 | 0x00200000 | 0x01000000 | 0x02000000 | 0x10000000 | 0x20000000)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_MOTW_WEAK_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00800000 | 0x08000000 | 0x02000000 | 0x20000000 | 0x40000000)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_OPT_IN_WEAK_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00040000)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_CURRENT_USER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_LOCAL_MACHINE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_IMPERSONATED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_PROCESS_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_PINRULE_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_NETWORK_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_SERIAL_LOCAL_MACHINE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_HPKP_RULE_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_FLAGS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"AutoFlags"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_FLUSH_DISABLE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_LOG_CREATE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_LOG_FREE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_LOG_FLUSH_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_LOG_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002 | 0x00000004 | 0x00000008)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_FLUSH_FIRST_DELTA_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"AutoFlushFirstDeltaSeconds"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_FLUSH_FIRST_DELTA_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(5 * 60)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_FLUSH_NEXT_DELTA_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"AutoFlushNextDeltaSeconds"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_FLUSH_NEXT_DELTA_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(30 * 60)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_AUTO_LOG_FILE_NAME_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"AutoLogFileName"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_AUTO_FLUSH_PROCESS_NAME_LIST_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"DisableAutoFlushProcessNameList"
            </code>
                </value>
            </constant>
            <constant name="CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"SrvOcspRespMinValiditySeconds"
            </code>
                </value>
            </constant>
            <constant name="CERT_SRV_OCSP_RESP_MIN_VALIDITY_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(10 * 60)
            </code>
                </value>
            </constant>
            <constant name="CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"SrvOcspRespUrlRetrievalTimeoutMilliseconds"
            </code>
                </value>
            </constant>
            <constant name="CERT_SRV_OCSP_RESP_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(15 * 1000)
            </code>
                </value>
            </constant>
            <constant name="CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"SrvOcspRespMaxBeforeNextUpdateSeconds"
            </code>
                </value>
            </constant>
            <constant name="CERT_SRV_OCSP_RESP_MAX_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(4 * 60 * 60)
            </code>
                </value>
            </constant>
            <constant name="CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"SrvOcspRespMinBeforeNextUpdateSeconds"
            </code>
                </value>
            </constant>
            <constant name="CERT_SRV_OCSP_RESP_MIN_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(2 * 60)
            </code>
                </value>
            </constant>
            <constant name="CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"SrvOcspRespMinAfterNextUpdateSeconds"
            </code>
                </value>
            </constant>
            <constant name="CERT_SRV_OCSP_RESP_MIN_AFTER_NEXT_UPDATE_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 * 60)
            </code>
                </value>
            </constant>
            <constant name="CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"SrvOcspRespMinSyncCertFileSeconds"
            </code>
                </value>
            </constant>
            <constant name="CERT_SRV_OCSP_RESP_MIN_SYNC_CERT_FILE_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CERT_SRV_OCSP_RESP_MAX_SYNC_CERT_FILE_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"SrvOcspRespMaxSyncCertFileSeconds"
            </code>
                </value>
            </constant>
            <constant name="CERT_SRV_OCSP_RESP_MAX_SYNC_CERT_FILE_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 * 60 * 60)
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptnetMaxCachedOcspPerCrlCount"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_MAX_CACHED_OCSP_PER_CRL_COUNT_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>500
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_OCSP_AFTER_CRL_DISABLE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptnetDefaultFlushExemptSeconds"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_URL_CACHE_DEFAULT_FLUSH_EXEMPT_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(28 * 24 * 60 * 60)
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptnetPreFetchMinMaxAgeSeconds"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_MIN_MAX_AGE_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 * 60 * 60)
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptnetPreFetchMaxMaxAgeSeconds"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_MAX_MAX_AGE_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(14 * 24 * 60 * 60)
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptnetPreFetchMinOcspValidityPeriodSeconds"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_MIN_OCSP_VALIDITY_PERIOD_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(14 * 24 * 60 * 60)
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptnetPreFetchAfterPublishPreFetchDivisor"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_AFTER_PUBLISH_PRE_FETCH_DIVISOR_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptnetPreFetchBeforeNextUpdatePreFetchDivisor"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_BEFORE_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>20
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptnetPreFetchMinBeforeNextUpdatePreFetchSeconds"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 * 60 * 60)
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptnetPreFetchValidityPeriodAfterNextUpdatePreFetchDivisor"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_VALIDITY_PERIOD_AFTER_NEXT_UPDATE_PRE_FETCH_DIVISOR_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptnetPreFetchMaxAfterNextUpdatePreFetchPeriodSeconds"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_MAX_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(4 * 60 * 60)
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptnetPreFetchMinAfterNextUpdatePreFetchPeriodSeconds"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_PRE_FETCH_PERIOD_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(30 * 60)
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptnetPreFetchAfterCurrentTimePreFetchPeriodSeconds"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_AFTER_CURRENT_TIME_PRE_FETCH_PERIOD_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(30 * 60)
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptnetPreFetchTriggerPeriodSeconds"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_TRIGGER_PERIOD_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(10 * 60)
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_TRIGGER_DISABLE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptnetPreFetchScanAfterTriggerDelaySeconds"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_SCAN_AFTER_TRIGGER_DELAY_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>60
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptnetPreFetchRetrievalTimeoutSeconds"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_PRE_FETCH_RETRIEVAL_TIMEOUT_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(5 * 60)
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_PRE_FETCH_CONFIG_REGPATH" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Software\\Microsoft\\Cryptography\\OID\\EncodingType 0\\CertDllCreateCertificateChainEngine\\Config\\CrlPreFetch"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_PRE_FETCH_PROCESS_NAME_LIST_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"ProcessNameList"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_PRE_FETCH_URL_LIST_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"PreFetchUrlList"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_PRE_FETCH_DISABLE_INFORMATION_EVENTS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"DisableInformationEvents"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_PRE_FETCH_LOG_FILE_NAME_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"LogFileName"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_PRE_FETCH_TIMEOUT_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"TimeoutSeconds"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_PRE_FETCH_TIMEOUT_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(5 * 60)
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"MaxAgeSeconds"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(2 * 60 * 60)
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_PRE_FETCH_MAX_AGE_SECONDS_MIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(5 * 60)
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_PRE_FETCH_PUBLISH_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"PublishBeforeNextUpdateSeconds"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_PRE_FETCH_PUBLISH_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 * 60 * 60)
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_PRE_FETCH_PUBLISH_RANDOM_INTERVAL_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"PublishRandomIntervalSeconds"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_PRE_FETCH_PUBLISH_RANDOM_INTERVAL_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(5 * 60)
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"MinBeforeNextUpdateSeconds"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_PRE_FETCH_MIN_BEFORE_NEXT_UPDATE_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(5 * 60)
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_SECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"MinAfterNextUpdateSeconds"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_PRE_FETCH_MIN_AFTER_NEXT_UPDATE_SECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(5 * 60)
            </code>
                </value>
            </constant>
            <constant name="CERT_GROUP_POLICY_CHAIN_CONFIG_REGPATH" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Software\\Policies\\Microsoft\\SystemCertificates\\ChainEngine\\Config"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"ChainUrlRetrievalTimeoutMilliseconds"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(15 * 1000)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"ChainRevAccumulativeUrlRetrievalTimeoutMilliseconds"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_REV_ACCUMULATIVE_URL_RETRIEVAL_TIMEOUT_MILLISECONDS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(20 * 1000)
            </code>
                </value>
            </constant>
            <constant name="CERT_RETR_BEHAVIOR_INET_AUTH_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"EnableInetUnknownAuth"
            </code>
                </value>
            </constant>
            <constant name="CERT_RETR_BEHAVIOR_INET_STATUS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"EnableInetLocal"
            </code>
                </value>
            </constant>
            <constant name="CERT_RETR_BEHAVIOR_FILE_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"AllowFileUrlScheme"
            </code>
                </value>
            </constant>
            <constant name="CERT_RETR_BEHAVIOR_LDAP_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"DisableLDAPSignAndEncrypt"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CryptnetCachedOcspSwitchToCrlCount"
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CACHED_OCSP_SWITCH_TO_CRL_COUNT_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>50
            </code>
                </value>
            </constant>
            <constant name="CRYPTNET_CRL_BEFORE_OCSP_ENABLE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_AIA_URL_RETRIEVAL_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"DisableAIAUrlRetrieval"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_OPTIONS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Options"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_OPTION_DISABLE_AIA_URL_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_OPTION_ENABLE_SIA_URL_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CrossCertDownloadIntervalHours"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_CROSS_CERT_DOWNLOAD_INTERVAL_HOURS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(24 * 7)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"CRLValidityExtensionPeriod"
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_CRL_VALIDITY_EXT_PERIOD_HOURS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>12
            </code>
                </value>
            </constant>
            <constant name="HCCE_CURRENT_USER" access="public">
                <type primitive="False">IntPtr</type>
                <value>
                    <code>
                        <value></value>((IntPtr)0)
            </code>
                </value>
            </constant>
            <constant name="HCCE_LOCAL_MACHINE" access="public">
                <type primitive="False">IntPtr</type>
                <value>
                    <code>
                        <value></value>((IntPtr)0x1)
            </code>
                </value>
            </constant>
            <constant name="HCCE_SERIAL_LOCAL_MACHINE" access="public">
                <type primitive="False">IntPtr</type>
                <value>
                    <code>
                        <value></value>((IntPtr)0x2)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_CACHE_END_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_THREAD_STORE_SYNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_USE_LOCAL_MACHINE_STORE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_ENABLE_SHARE_STORE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_EXCLUSIVE_ENABLE_CA_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_NO_ERROR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_IS_NOT_TIME_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_IS_NOT_TIME_NESTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_IS_REVOKED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_IS_NOT_SIGNATURE_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_IS_NOT_VALID_FOR_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_IS_UNTRUSTED_ROOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_REVOCATION_STATUS_UNKNOWN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_IS_CYCLIC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000080
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_INVALID_EXTENSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_INVALID_POLICY_CONSTRAINTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000200
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_INVALID_BASIC_CONSTRAINTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000400
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_INVALID_NAME_CONSTRAINTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000800
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_HAS_NOT_SUPPORTED_NAME_CONSTRAINT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00001000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_HAS_NOT_DEFINED_NAME_CONSTRAINT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00002000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_HAS_NOT_PERMITTED_NAME_CONSTRAINT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00004000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_HAS_EXCLUDED_NAME_CONSTRAINT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_IS_OFFLINE_REVOCATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01000000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_NO_ISSUANCE_CHAIN_POLICY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02000000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_IS_EXPLICIT_DISTRUST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04000000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_HAS_NOT_SUPPORTED_CRITICAL_EXT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x08000000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_HAS_WEAK_SIGNATURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00100000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_HAS_WEAK_HYGIENE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00200000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_IS_PARTIAL_CHAIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00010000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_CTL_IS_NOT_TIME_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00020000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00040000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00080000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_HAS_EXACT_MATCH_ISSUER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_HAS_KEY_MATCH_ISSUER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_HAS_NAME_MATCH_ISSUER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_IS_SELF_SIGNED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_AUTO_UPDATE_CA_REVOCATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_AUTO_UPDATE_END_REVOCATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_NO_OCSP_FAILOVER_TO_CRL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_IS_KEY_ROLLOVER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000080
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_SSL_HANDSHAKE_OCSP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00040000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_SSL_TIME_VALID_OCSP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00080000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_SSL_RECONNECT_OCSP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00100000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_HAS_PREFERRED_ISSUER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_HAS_ISSUANCE_CHAIN_POLICY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000200
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_HAS_VALID_NAME_CONSTRAINTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000400
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_IS_PEER_TRUSTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000800
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_HAS_CRL_VALIDITY_EXTENDED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00001000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_IS_FROM_EXCLUSIVE_TRUST_STORE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00002000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_IS_CA_TRUSTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00004000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_HAS_AUTO_UPDATE_WEAK_SIGNATURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_HAS_ALLOW_WEAK_SIGNATURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00020000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_IS_COMPLEX_CHAIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00010000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_SSL_TIME_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01000000
            </code>
                </value>
            </constant>
            <constant name="CERT_TRUST_NO_TIME_CHECK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02000000
            </code>
                </value>
            </constant>
            <constant name="USAGE_MATCH_TYPE_AND" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="USAGE_MATCH_TYPE_OR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_STRONG_SIGN_DISABLE_END_CHECK_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_REVOCATION_CHECK_END_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_REVOCATION_CHECK_CHAIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20000000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_REVOCATION_ACCUMULATIVE_TIMEOUT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x08000000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_REVOCATION_CHECK_OCSP_CERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04000000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_PASS1_QUALITY_FILTERING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_RETURN_LOWER_QUALITY_CONTEXTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000080
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_AUTH_ROOT_AUTO_UPDATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_TIMESTAMP_TIME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000200
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_ENABLE_PEER_TRUST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000400
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_MY_PEER_TRUST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000800
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_MD2_MD4" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00001000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_DISABLE_AIA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00002000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_HAS_MOTW" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00004000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_ONLY_ADDITIONAL_AND_AUTH_ROOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_OPT_IN_WEAK_SIGNATURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00010000
            </code>
                </value>
            </constant>
            <constant name="REVOCATION_OID_CRL_REVOCATION" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)1)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_FIND_BY_ISSUER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0002
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0004
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0008
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_IGNORE_INVALID_BASIC_CONSTRAINTS_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001 | 0x00000002 | 0x00000004)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_IGNORE_INVALID_NAME_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_IGNORE_INVALID_POLICY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000080
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000200
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000400
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000800
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000100 | 0x00000200 | 0x00000400 | 0x00000800)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00004000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_IGNORE_NOT_SUPPORTED_CRITICAL_EXT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00002000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_IGNORE_PEER_TRUST_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00001000
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_IGNORE_WEAK_SIGNATURE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x08000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OID_VERIFY_CERTIFICATE_CHAIN_POLICY_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x43, 0x65, 0x72, 0x74, 0x44, 0x6C, 0x6C, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6E, 0x50, 0x6F, 0x6C, 0x69, 0x63, 0x79, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_BASE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)1)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_AUTHENTICODE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)2)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_AUTHENTICODE_TS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)3)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_SSL" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)4)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_BASIC_CONSTRAINTS" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)5)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_NT_AUTH" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)6)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_MICROSOFT_ROOT" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)7)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_EV" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)8)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_SSL_F12" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)9)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_SSL_HPKP_HEADER" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)10)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_THIRD_PARTY_ROOT" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)11)
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_SSL_KEY_PIN" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)12)
            </code>
                </value>
            </constant>
            <constant name="AUTHTYPE_CLIENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="AUTHTYPE_SERVER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000000
            </code>
                </value>
            </constant>
            <constant name="MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00010000
            </code>
                </value>
            </constant>
            <constant name="MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00020000
            </code>
                </value>
            </constant>
            <constant name="MICROSOFT_ROOT_CERT_CHAIN_POLICY_DISABLE_FLIGHT_ROOT_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00040000
            </code>
                </value>
            </constant>
            <constant name="SSL_F12_ERROR_TEXT_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>256
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_SSL_F12_SUCCESS_LEVEL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_SSL_F12_WARNING_LEVEL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_SSL_F12_ERROR_LEVEL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_SSL_F12_NONE_CATEGORY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_SSL_F12_WEAK_CRYPTO_CATEGORY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_SSL_F12_ROOT_PROGRAM_CATEGORY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="SSL_HPKP_PKP_HEADER_INDEX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="SSL_HPKP_PKP_RO_HEADER_INDEX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="SSL_HPKP_HEADER_COUNT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="SSL_KEY_PIN_ERROR_TEXT_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>512
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_ERROR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>-2
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_ERROR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>-1
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_SSL_KEY_PIN_SUCCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_SSL_KEY_PIN_MITM_WARNING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_CHAIN_POLICY_SSL_KEY_PIN_MISMATCH_WARNING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CryptStringToBinary" access="public">
                <type primitive="False">delegate*&lt;ushort*, uint, uint, byte*, uint*, uint*, uint*, int&gt;</type>
                <value>
                    <deref>
                        <code>CryptStringToBinaryW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CryptBinaryToString" access="public">
                <type primitive="False">delegate*&lt;byte*, uint, uint, ushort*, uint*, int&gt;</type>
                <value>
                    <deref>
                        <code>CryptBinaryToStringW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CRYPT_STRING_BASE64HEADER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_BASE64" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_BINARY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_BASE64REQUESTHEADER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000003
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_HEX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_HEXASCII" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000005
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_BASE64_ANY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000006
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_ANY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000007
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_HEX_ANY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_BASE64X509CRLHEADER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000009
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_HEXADDR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000000a
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_HEXASCIIADDR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000000b
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_HEXRAW" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000000c
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_BASE64URI" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000000d
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_ENCODEMASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x000000ff
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_RESERVED100" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_RESERVED200" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000200
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_PERCENTESCAPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x08000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_HASHDATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_STRICT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_NOCRLF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_STRING_NOCR" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_12_PbeIds" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x32, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_12_pbeWithSHA1And128BitRC4" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x32, 0x2E, 0x31, 0x2E, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_12_pbeWithSHA1And40BitRC4" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x32, 0x2E, 0x31, 0x2E, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_12_pbeWithSHA1And3KeyTripleDES" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x32, 0x2E, 0x31, 0x2E, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_12_pbeWithSHA1And2KeyTripleDES" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x32, 0x2E, 0x31, 0x2E, 0x34, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_12_pbeWithSHA1And128BitRC2" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x32, 0x2E, 0x31, 0x2E, 0x35, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_12_pbeWithSHA1And40BitRC2" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x31, 0x32, 0x2E, 0x31, 0x2E, 0x36, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_5_PBKDF2" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x31, 0x32, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="szOID_PKCS_5_PBES2" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x31, 0x2E, 0x35, 0x2E, 0x31, 0x33, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="PKCS12_IMPORT_SILENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="CRYPT_USER_KEYSET" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00001000
            </code>
                </value>
            </constant>
            <constant name="PKCS12_PREFER_CNG_KSP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="PKCS12_ALWAYS_CNG_KSP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000200
            </code>
                </value>
            </constant>
            <constant name="PKCS12_ONLY_CERTIFICATES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000400
            </code>
                </value>
            </constant>
            <constant name="PKCS12_ONLY_NOT_ENCRYPTED_CERTIFICATES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000800
            </code>
                </value>
            </constant>
            <constant name="PKCS12_ALLOW_OVERWRITE_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00004000
            </code>
                </value>
            </constant>
            <constant name="PKCS12_NO_PERSIST_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="PKCS12_VIRTUAL_ISOLATION_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00010000
            </code>
                </value>
            </constant>
            <constant name="PKCS12_IMPORT_RESERVED_MASK" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xffff0000
            </code>
                </value>
            </constant>
            <constant name="PKCS12_OBJECT_LOCATOR_ALL_IMPORT_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000200 | 0x00008000 | 0x00000040 | 0x0010)
            </code>
                </value>
            </constant>
            <constant name="PKCS12_ONLY_CERTIFICATES_PROVIDER_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="PKCS12_ONLY_CERTIFICATES_PROVIDER_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"PfxProvider"
            </code>
                </value>
            </constant>
            <constant name="PKCS12_ONLY_CERTIFICATES_CONTAINER_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"PfxContainer"
            </code>
                </value>
            </constant>
            <constant name="REPORT_NO_PRIVATE_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="REPORT_NOT_ABLE_TO_EXPORT_PRIVATE_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0002
            </code>
                </value>
            </constant>
            <constant name="EXPORT_PRIVATE_KEYS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0004
            </code>
                </value>
            </constant>
            <constant name="PKCS12_INCLUDE_EXTENDED_PROPERTIES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0010
            </code>
                </value>
            </constant>
            <constant name="PKCS12_PROTECT_TO_DOMAIN_SIDS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0020
            </code>
                </value>
            </constant>
            <constant name="PKCS12_EXPORT_SILENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0040
            </code>
                </value>
            </constant>
            <constant name="PKCS12_EXPORT_PBES2_PARAMS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0080
            </code>
                </value>
            </constant>
            <constant name="PKCS12_DISABLE_ENCRYPT_CERTIFICATES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0100
            </code>
                </value>
            </constant>
            <constant name="PKCS12_ENCRYPT_CERTIFICATES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0200
            </code>
                </value>
            </constant>
            <constant name="PKCS12_EXPORT_ECC_CURVE_PARAMETERS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1000
            </code>
                </value>
            </constant>
            <constant name="PKCS12_EXPORT_ECC_CURVE_OID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2000
            </code>
                </value>
            </constant>
            <constant name="PKCS12_EXPORT_RESERVED_MASK" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xffff0000
            </code>
                </value>
            </constant>
            <constant name="PKCS12_PBKDF2_ID_HMAC_SHA1" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x32, 0x2E, 0x37, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="PKCS12_PBKDF2_ID_HMAC_SHA256" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x32, 0x2E, 0x39, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="PKCS12_PBKDF2_ID_HMAC_SHA384" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x32, 0x2E, 0x31, 0x30, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="PKCS12_PBKDF2_ID_HMAC_SHA512" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x31, 0x2E, 0x32, 0x2E, 0x38, 0x34, 0x30, 0x2E, 0x31, 0x31, 0x33, 0x35, 0x34, 0x39, 0x2E, 0x32, 0x2E, 0x31, 0x31, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="PKCS12_PBES2_ALG_AES256_SHA256" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"AES256-SHA256"
            </code>
                </value>
            </constant>
            <constant name="PKCS12_CONFIG_REGPATH" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"Software\\Microsoft\\Windows\\CurrentVersion\\PFX"
            </code>
                </value>
            </constant>
            <constant name="PKCS12_ENCRYPT_CERTIFICATES_VALUE_NAME" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"EncryptCertificates"
            </code>
                </value>
            </constant>
            <constant name="CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_READ_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_SERVER_OCSP_RESPONSE_OPEN_PARA_WRITE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CERT_SERVER_OCSP_RESPONSE_ASYNC_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_RETRIEVE_ISSUER_LOGO" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)1)
            </code>
                </value>
            </constant>
            <constant name="CERT_RETRIEVE_SUBJECT_LOGO" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)2)
            </code>
                </value>
            </constant>
            <constant name="CERT_RETRIEVE_COMMUNITY_LOGO" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)3)
            </code>
                </value>
            </constant>
            <constant name="CERT_RETRIEVE_BIOMETRIC_PREDEFINED_BASE_TYPE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>((sbyte*)1000)
            </code>
                </value>
            </constant>
            <constant name="CERT_RETRIEVE_BIOMETRIC_PICTURE_TYPE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>(((sbyte*)1000) + 0)
            </code>
                </value>
            </constant>
            <constant name="CERT_RETRIEVE_BIOMETRIC_SIGNATURE_TYPE" access="public">
                <type primitive="False">sbyte*</type>
                <value>
                    <code>
                        <value></value>(((sbyte*)1000) + 1)
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_MAX_PARA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>500
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_BY_ENHKEY_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_BY_KEY_USAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_BY_POLICY_OID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_BY_PROV_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_BY_EXTENSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_BY_SUBJECT_HOST_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_BY_ISSUER_ATTR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_BY_SUBJECT_ATTR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_BY_ISSUER_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_BY_PUBLIC_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_BY_TLS_SIGNATURES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>11
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_BY_ISSUER_DISPLAYNAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>12
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_BY_FRIENDLYNAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>13
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_BY_THUMBPRINT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>14
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_LAST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>11
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_MAX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(11 * 3)
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_ALLOW_EXPIRED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_TRUSTED_ROOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_DISALLOW_SELFSIGNED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_HAS_PRIVATE_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_HAS_KEY_FOR_SIGNATURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_HAS_KEY_FOR_KEY_EXCHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_HARDWARE_ONLY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_ALLOW_DUPLICATES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000080
            </code>
                </value>
            </constant>
            <constant name="CERT_SELECT_IGNORE_AUTOSELECT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_STATUS_GRANTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_STATUS_GRANTED_WITH_MODS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_STATUS_REJECTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_STATUS_WAITING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_STATUS_REVOCATION_WARNING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_STATUS_REVOKED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_FAILURE_BAD_ALG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_FAILURE_BAD_REQUEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_FAILURE_BAD_FORMAT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_FAILURE_TIME_NOT_AVAILABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>14
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_FAILURE_POLICY_NOT_SUPPORTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>15
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_FAILURE_EXTENSION_NOT_SUPPORTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_FAILURE_INFO_NOT_AVAILABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>17
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_FAILURE_SYSTEM_FAILURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>25
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_DONT_HASH_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_VERIFY_CONTEXT_SIGNATURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="TIMESTAMP_NO_AUTH_RETRIEVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00020000
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OBJECT_LOCATOR_SPN_NAME_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OBJECT_LOCATOR_LAST_RESERVED_NAME_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>32
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OBJECT_LOCATOR_FIRST_RESERVED_USER_NAME_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>33
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OBJECT_LOCATOR_LAST_RESERVED_USER_NAME_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000FFFF
            </code>
                </value>
            </constant>
            <constant name="SSL_OBJECT_LOCATOR_PFX_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x53, 0x73, 0x6C, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x4C, 0x6F, 0x63, 0x61, 0x74, 0x6F, 0x72, 0x49, 0x6E, 0x69, 0x74, 0x69, 0x61, 0x6C, 0x69, 0x7A, 0x65, 0x50, 0x66, 0x78, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="SSL_OBJECT_LOCATOR_ISSUER_LIST_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x53, 0x73, 0x6C, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x4C, 0x6F, 0x63, 0x61, 0x74, 0x6F, 0x72, 0x49, 0x6E, 0x69, 0x74, 0x69, 0x61, 0x6C, 0x69, 0x7A, 0x65, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x4C, 0x69, 0x73, 0x74, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="SSL_OBJECT_LOCATOR_CERT_VALIDATION_CONFIG_FUNC" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x53, 0x73, 0x6C, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x4C, 0x6F, 0x63, 0x61, 0x74, 0x6F, 0x72, 0x49, 0x6E, 0x69, 0x74, 0x69, 0x61, 0x6C, 0x69, 0x7A, 0x65, 0x43, 0x65, 0x72, 0x74, 0x56, 0x61, 0x6C, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x43, 0x6F, 0x6E, 0x66, 0x69, 0x67, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OBJECT_LOCATOR_RELEASE_SYSTEM_SHUTDOWN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OBJECT_LOCATOR_RELEASE_SERVICE_STOP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OBJECT_LOCATOR_RELEASE_PROCESS_EXIT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CRYPT_OBJECT_LOCATOR_RELEASE_DLL_UNLOAD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="CERT_FILE_HASH_USE_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CERT_TIMESTAMP_HASH_USE_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
        </class>
    </namespace>
</bindings>
