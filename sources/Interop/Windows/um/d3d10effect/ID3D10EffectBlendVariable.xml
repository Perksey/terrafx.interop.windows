<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d3d10effect.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ID3D10EffectBlendVariable" access="public" native="struct ID3D10EffectBlendVariable : ID3D10EffectVariable" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="IsValid" access="public" unsafe="true">
                <type native="BOOL">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetType" access="public" unsafe="true">
                <type native="ID3D10EffectType *">ID3D10EffectType*</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, ID3D10EffectType*&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetDesc" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDesc">
                    <type>D3D10_EFFECT_VARIABLE_DESC*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, D3D10_EFFECT_VARIABLE_DESC*, int&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>);
        </code>
                </body>
            </function>
            <function name="GetAnnotationByIndex" access="public" unsafe="true">
                <type native="ID3D10EffectVariable *">ID3D10EffectVariable*</type>
                <param name="Index">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, uint, ID3D10EffectVariable*&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>, <param name="Index">Index</param>);
        </code>
                </body>
            </function>
            <function name="GetAnnotationByName" access="public" unsafe="true">
                <type native="ID3D10EffectVariable *">ID3D10EffectVariable*</type>
                <param name="Name">
                    <type>sbyte*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, sbyte*, ID3D10EffectVariable*&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>, <param name="Name">Name</param>);
        </code>
                </body>
            </function>
            <function name="GetMemberByIndex" access="public" unsafe="true">
                <type native="ID3D10EffectVariable *">ID3D10EffectVariable*</type>
                <param name="Index">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, uint, ID3D10EffectVariable*&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>, <param name="Index">Index</param>);
        </code>
                </body>
            </function>
            <function name="GetMemberByName" access="public" unsafe="true">
                <type native="ID3D10EffectVariable *">ID3D10EffectVariable*</type>
                <param name="Name">
                    <type>sbyte*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, sbyte*, ID3D10EffectVariable*&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>, <param name="Name">Name</param>);
        </code>
                </body>
            </function>
            <function name="GetMemberBySemantic" access="public" unsafe="true">
                <type native="ID3D10EffectVariable *">ID3D10EffectVariable*</type>
                <param name="Semantic">
                    <type>sbyte*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, sbyte*, ID3D10EffectVariable*&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>, <param name="Semantic">Semantic</param>);
        </code>
                </body>
            </function>
            <function name="GetElement" access="public" unsafe="true">
                <type native="ID3D10EffectVariable *">ID3D10EffectVariable*</type>
                <param name="Index">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, uint, ID3D10EffectVariable*&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>, <param name="Index">Index</param>);
        </code>
                </body>
            </function>
            <function name="GetParentConstantBuffer" access="public" unsafe="true">
                <type native="ID3D10EffectConstantBuffer *">ID3D10EffectConstantBuffer*</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, ID3D10EffectConstantBuffer*&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="AsScalar" access="public" unsafe="true">
                <type native="ID3D10EffectScalarVariable *">ID3D10EffectScalarVariable*</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, ID3D10EffectScalarVariable*&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="AsVector" access="public" unsafe="true">
                <type native="ID3D10EffectVectorVariable *">ID3D10EffectVectorVariable*</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, ID3D10EffectVectorVariable*&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="AsMatrix" access="public" unsafe="true">
                <type native="ID3D10EffectMatrixVariable *">ID3D10EffectMatrixVariable*</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, ID3D10EffectMatrixVariable*&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="AsString" access="public" unsafe="true">
                <type native="ID3D10EffectStringVariable *">ID3D10EffectStringVariable*</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, ID3D10EffectStringVariable*&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="AsShaderResource" access="public" unsafe="true">
                <type native="ID3D10EffectShaderResourceVariable *">ID3D10EffectShaderResourceVariable*</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, ID3D10EffectShaderResourceVariable*&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="AsRenderTargetView" access="public" unsafe="true">
                <type native="ID3D10EffectRenderTargetViewVariable *">ID3D10EffectRenderTargetViewVariable*</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, ID3D10EffectRenderTargetViewVariable*&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="AsDepthStencilView" access="public" unsafe="true">
                <type native="ID3D10EffectDepthStencilViewVariable *">ID3D10EffectDepthStencilViewVariable*</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, ID3D10EffectDepthStencilViewVariable*&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="AsConstantBuffer" access="public" unsafe="true">
                <type native="ID3D10EffectConstantBuffer *">ID3D10EffectConstantBuffer*</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, ID3D10EffectConstantBuffer*&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="AsShader" access="public" unsafe="true">
                <type native="ID3D10EffectShaderVariable *">ID3D10EffectShaderVariable*</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, ID3D10EffectShaderVariable*&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="AsBlend" access="public" unsafe="true">
                <type native="ID3D10EffectBlendVariable *">ID3D10EffectBlendVariable*</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, ID3D10EffectBlendVariable*&gt;)(lpVtbl[<vtbl explicit="False">19</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="AsDepthStencil" access="public" unsafe="true">
                <type native="ID3D10EffectDepthStencilVariable *">ID3D10EffectDepthStencilVariable*</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, ID3D10EffectDepthStencilVariable*&gt;)(lpVtbl[<vtbl explicit="False">20</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="AsRasterizer" access="public" unsafe="true">
                <type native="ID3D10EffectRasterizerVariable *">ID3D10EffectRasterizerVariable*</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, ID3D10EffectRasterizerVariable*&gt;)(lpVtbl[<vtbl explicit="False">21</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="AsSampler" access="public" unsafe="true">
                <type native="ID3D10EffectSamplerVariable *">ID3D10EffectSamplerVariable*</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, ID3D10EffectSamplerVariable*&gt;)(lpVtbl[<vtbl explicit="False">22</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetRawValue" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pData">
                    <type>void*</type>
                </param>
                <param name="Offset">
                    <type>uint</type>
                </param>
                <param name="ByteCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, void*, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">23</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>, <param name="pData">pData</param>, <param name="Offset">Offset</param>, <param name="ByteCount">ByteCount</param>);
        </code>
                </body>
            </function>
            <function name="GetRawValue" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pData">
                    <type>void*</type>
                </param>
                <param name="Offset">
                    <type>uint</type>
                </param>
                <param name="ByteCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, void*, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">24</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>, <param name="pData">pData</param>, <param name="Offset">Offset</param>, <param name="ByteCount">ByteCount</param>);
        </code>
                </body>
            </function>
            <function name="GetBlendState" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Index">
                    <type>uint</type>
                </param>
                <param name="ppBlendState">
                    <type>ID3D10BlendState**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, uint, ID3D10BlendState**, int&gt;)(lpVtbl[<vtbl explicit="False">25</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>, <param name="Index">Index</param>, <param name="ppBlendState">ppBlendState</param>);
        </code>
                </body>
            </function>
            <function name="GetBackingStore" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Index">
                    <type>uint</type>
                </param>
                <param name="pBlendDesc">
                    <type>D3D10_BLEND_DESC*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10EffectBlendVariable*, uint, D3D10_BLEND_DESC*, int&gt;)(lpVtbl[<vtbl explicit="False">26</vtbl>]))(<param special="thisPtr">(ID3D10EffectBlendVariable*)Unsafe.AsPointer(ref this)</param>, <param name="Index">Index</param>, <param name="pBlendDesc">pBlendDesc</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
