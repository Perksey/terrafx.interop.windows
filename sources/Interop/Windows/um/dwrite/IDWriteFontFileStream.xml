<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dwrite.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDWriteFontFileStream" access="public" native="struct IDWriteFontFileStream : IUnknown" uuid="6d4865fe-0ab8-4d91-8f62-5dd6be34a3e0" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontFileStream*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDWriteFontFileStream*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontFileStream*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDWriteFontFileStream*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontFileStream*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDWriteFontFileStream*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="ReadFileFragment" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fragmentStart">
                    <type>void**</type>
                </param>
                <param name="fileOffset">
                    <type>ulong</type>
                </param>
                <param name="fragmentSize">
                    <type>ulong</type>
                </param>
                <param name="fragmentContext">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontFileStream*, void**, ulong, ulong, void**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDWriteFontFileStream*)Unsafe.AsPointer(ref this)</param>, <param name="fragmentStart">fragmentStart</param>, <param name="fileOffset">fileOffset</param>, <param name="fragmentSize">fragmentSize</param>, <param name="fragmentContext">fragmentContext</param>);
        </code>
                </body>
            </function>
            <function name="ReleaseFileFragment" access="public" unsafe="true">
                <type>void</type>
                <param name="fragmentContext">
                    <type>void*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;IDWriteFontFileStream*, void*, void&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDWriteFontFileStream*)Unsafe.AsPointer(ref this)</param>, <param name="fragmentContext">fragmentContext</param>);
        </code>
                </body>
            </function>
            <function name="GetFileSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fileSize">
                    <type>ulong*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontFileStream*, ulong*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDWriteFontFileStream*)Unsafe.AsPointer(ref this)</param>, <param name="fileSize">fileSize</param>);
        </code>
                </body>
            </function>
            <function name="GetLastWriteTime" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lastWriteTime">
                    <type>ulong*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontFileStream*, ulong*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDWriteFontFileStream*)Unsafe.AsPointer(ref this)</param>, <param name="lastWriteTime">lastWriteTime</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
