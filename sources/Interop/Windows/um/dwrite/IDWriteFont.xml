<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dwrite.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDWriteFont" access="public" native="struct IDWriteFont : IUnknown" uuid="acd16696-8c14-4f5d-877e-fe3fc1d32737" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFont*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDWriteFont*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFont*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDWriteFont*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFont*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDWriteFont*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetFontFamily" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontFamily">
                    <type>IDWriteFontFamily**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFont*, IDWriteFontFamily**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDWriteFont*)Unsafe.AsPointer(ref this)</param>, <param name="fontFamily">fontFamily</param>);
        </code>
                </body>
            </function>
            <function name="GetWeight" access="public" unsafe="true">
                <type>DWRITE_FONT_WEIGHT</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFont*, DWRITE_FONT_WEIGHT&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDWriteFont*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetStretch" access="public" unsafe="true">
                <type>DWRITE_FONT_STRETCH</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFont*, DWRITE_FONT_STRETCH&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDWriteFont*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetStyle" access="public" unsafe="true">
                <type>DWRITE_FONT_STYLE</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFont*, DWRITE_FONT_STYLE&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDWriteFont*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="IsSymbolFont" access="public" unsafe="true">
                <type native="BOOL">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFont*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDWriteFont*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetFaceNames" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="names">
                    <type>IDWriteLocalizedStrings**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFont*, IDWriteLocalizedStrings**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDWriteFont*)Unsafe.AsPointer(ref this)</param>, <param name="names">names</param>);
        </code>
                </body>
            </function>
            <function name="GetInformationalStrings" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="informationalStringID">
                    <type>DWRITE_INFORMATIONAL_STRING_ID</type>
                </param>
                <param name="informationalStrings">
                    <type>IDWriteLocalizedStrings**</type>
                </param>
                <param name="exists">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFont*, DWRITE_INFORMATIONAL_STRING_ID, IDWriteLocalizedStrings**, int*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IDWriteFont*)Unsafe.AsPointer(ref this)</param>, <param name="informationalStringID">informationalStringID</param>, <param name="informationalStrings">informationalStrings</param>, <param name="exists">exists</param>);
        </code>
                </body>
            </function>
            <function name="GetSimulations" access="public" unsafe="true">
                <type>DWRITE_FONT_SIMULATIONS</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFont*, DWRITE_FONT_SIMULATIONS&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IDWriteFont*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetMetrics" access="public" unsafe="true">
                <type>void</type>
                <param name="fontMetrics">
                    <type>DWRITE_FONT_METRICS*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;IDWriteFont*, DWRITE_FONT_METRICS*, void&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IDWriteFont*)Unsafe.AsPointer(ref this)</param>, <param name="fontMetrics">fontMetrics</param>);
        </code>
                </body>
            </function>
            <function name="HasCharacter" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="unicodeValue">
                    <type>uint</type>
                </param>
                <param name="exists">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFont*, uint, int*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IDWriteFont*)Unsafe.AsPointer(ref this)</param>, <param name="unicodeValue">unicodeValue</param>, <param name="exists">exists</param>);
        </code>
                </body>
            </function>
            <function name="CreateFontFace" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontFace">
                    <type>IDWriteFontFace**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFont*, IDWriteFontFace**, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IDWriteFont*)Unsafe.AsPointer(ref this)</param>, <param name="fontFace">fontFace</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
