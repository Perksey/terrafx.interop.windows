<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dwrite.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDWriteInlineObject" access="public" native="struct IDWriteInlineObject : IUnknown" uuid="8339fde3-106f-47ab-8373-1c6295eb10b3" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteInlineObject*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDWriteInlineObject*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteInlineObject*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDWriteInlineObject*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteInlineObject*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDWriteInlineObject*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Draw" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="clientDrawingContext">
                    <type>void*</type>
                </param>
                <param name="renderer">
                    <type>IDWriteTextRenderer*</type>
                </param>
                <param name="originX">
                    <type>float</type>
                </param>
                <param name="originY">
                    <type>float</type>
                </param>
                <param name="isSideways">
                    <type>int</type>
                </param>
                <param name="isRightToLeft">
                    <type>int</type>
                </param>
                <param name="clientDrawingEffect">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteInlineObject*, void*, IDWriteTextRenderer*, float, float, int, int, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDWriteInlineObject*)Unsafe.AsPointer(ref this)</param>, <param name="clientDrawingContext">clientDrawingContext</param>, <param name="renderer">renderer</param>, <param name="originX">originX</param>, <param name="originY">originY</param>, <param name="isSideways">isSideways</param>, <param name="isRightToLeft">isRightToLeft</param>, <param name="clientDrawingEffect">clientDrawingEffect</param>);
        </code>
                </body>
            </function>
            <function name="GetMetrics" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="metrics">
                    <type>DWRITE_INLINE_OBJECT_METRICS*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteInlineObject*, DWRITE_INLINE_OBJECT_METRICS*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDWriteInlineObject*)Unsafe.AsPointer(ref this)</param>, <param name="metrics">metrics</param>);
        </code>
                </body>
            </function>
            <function name="GetOverhangMetrics" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="overhangs">
                    <type>DWRITE_OVERHANG_METRICS*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteInlineObject*, DWRITE_OVERHANG_METRICS*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDWriteInlineObject*)Unsafe.AsPointer(ref this)</param>, <param name="overhangs">overhangs</param>);
        </code>
                </body>
            </function>
            <function name="GetBreakConditions" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="breakConditionBefore">
                    <type>DWRITE_BREAK_CONDITION*</type>
                </param>
                <param name="breakConditionAfter">
                    <type>DWRITE_BREAK_CONDITION*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteInlineObject*, DWRITE_BREAK_CONDITION*, DWRITE_BREAK_CONDITION*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDWriteInlineObject*)Unsafe.AsPointer(ref this)</param>, <param name="breakConditionBefore">breakConditionBefore</param>, <param name="breakConditionAfter">breakConditionAfter</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
