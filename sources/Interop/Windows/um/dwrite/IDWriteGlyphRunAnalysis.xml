<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dwrite.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDWriteGlyphRunAnalysis" access="public" native="struct IDWriteGlyphRunAnalysis : IUnknown" uuid="7d97dbf7-e085-42d4-81e3-6a883bded118" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteGlyphRunAnalysis*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDWriteGlyphRunAnalysis*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteGlyphRunAnalysis*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDWriteGlyphRunAnalysis*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteGlyphRunAnalysis*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDWriteGlyphRunAnalysis*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetAlphaTextureBounds" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="textureType">
                    <type>DWRITE_TEXTURE_TYPE</type>
                </param>
                <param name="textureBounds">
                    <type>RECT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteGlyphRunAnalysis*, DWRITE_TEXTURE_TYPE, RECT*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDWriteGlyphRunAnalysis*)Unsafe.AsPointer(ref this)</param>, <param name="textureType">textureType</param>, <param name="textureBounds">textureBounds</param>);
        </code>
                </body>
            </function>
            <function name="CreateAlphaTexture" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="textureType">
                    <type>DWRITE_TEXTURE_TYPE</type>
                </param>
                <param name="textureBounds">
                    <type>RECT*</type>
                </param>
                <param name="alphaValues">
                    <type>byte*</type>
                </param>
                <param name="bufferSize">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteGlyphRunAnalysis*, DWRITE_TEXTURE_TYPE, RECT*, byte*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDWriteGlyphRunAnalysis*)Unsafe.AsPointer(ref this)</param>, <param name="textureType">textureType</param>, <param name="textureBounds">textureBounds</param>, <param name="alphaValues">alphaValues</param>, <param name="bufferSize">bufferSize</param>);
        </code>
                </body>
            </function>
            <function name="GetAlphaBlendParams" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="renderingParams">
                    <type>IDWriteRenderingParams*</type>
                </param>
                <param name="blendGamma">
                    <type>float*</type>
                </param>
                <param name="blendEnhancedContrast">
                    <type>float*</type>
                </param>
                <param name="blendClearTypeLevel">
                    <type>float*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteGlyphRunAnalysis*, IDWriteRenderingParams*, float*, float*, float*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDWriteGlyphRunAnalysis*)Unsafe.AsPointer(ref this)</param>, <param name="renderingParams">renderingParams</param>, <param name="blendGamma">blendGamma</param>, <param name="blendEnhancedContrast">blendEnhancedContrast</param>, <param name="blendClearTypeLevel">blendClearTypeLevel</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
