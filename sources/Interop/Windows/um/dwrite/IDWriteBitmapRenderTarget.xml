<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dwrite.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDWriteBitmapRenderTarget" access="public" native="struct IDWriteBitmapRenderTarget : IUnknown" uuid="5e5a32a3-8dff-4773-9ff6-0696eab77267" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteBitmapRenderTarget*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteBitmapRenderTarget*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteBitmapRenderTarget*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="DrawGlyphRun" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="baselineOriginX">
                    <type>float</type>
                </param>
                <param name="baselineOriginY">
                    <type>float</type>
                </param>
                <param name="measuringMode">
                    <type>DWRITE_MEASURING_MODE</type>
                </param>
                <param name="glyphRun">
                    <type>DWRITE_GLYPH_RUN*</type>
                </param>
                <param name="renderingParams">
                    <type>IDWriteRenderingParams*</type>
                </param>
                <param name="textColor">
                    <type>uint</type>
                </param>
                <param name="blackBoxRect">
                    <type>RECT*</type>
                    <init>
                        <code>null
        </code>
                    </init>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteBitmapRenderTarget*, float, float, DWRITE_MEASURING_MODE, DWRITE_GLYPH_RUN*, IDWriteRenderingParams*, uint, RECT*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this)</param>, <param name="baselineOriginX">baselineOriginX</param>, <param name="baselineOriginY">baselineOriginY</param>, <param name="measuringMode">measuringMode</param>, <param name="glyphRun">glyphRun</param>, <param name="renderingParams">renderingParams</param>, <param name="textColor">textColor</param>, <param name="blackBoxRect">blackBoxRect</param>);
        </code>
                </body>
            </function>
            <function name="GetMemoryDC" access="public" unsafe="true">
                <type native="HDC">IntPtr</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteBitmapRenderTarget*, IntPtr&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetPixelsPerDip" access="public" unsafe="true">
                <type native="FLOAT">float</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteBitmapRenderTarget*, float&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetPixelsPerDip" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pixelsPerDip">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteBitmapRenderTarget*, float, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this)</param>, <param name="pixelsPerDip">pixelsPerDip</param>);
        </code>
                </body>
            </function>
            <function name="GetCurrentTransform" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="transform">
                    <type>DWRITE_MATRIX*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteBitmapRenderTarget*, DWRITE_MATRIX*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this)</param>, <param name="transform">transform</param>);
        </code>
                </body>
            </function>
            <function name="SetCurrentTransform" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="transform">
                    <type>DWRITE_MATRIX*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteBitmapRenderTarget*, DWRITE_MATRIX*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this)</param>, <param name="transform">transform</param>);
        </code>
                </body>
            </function>
            <function name="GetSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="size">
                    <type>SIZE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteBitmapRenderTarget*, SIZE*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this)</param>, <param name="size">size</param>);
        </code>
                </body>
            </function>
            <function name="Resize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="width">
                    <type>uint</type>
                </param>
                <param name="height">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteBitmapRenderTarget*, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IDWriteBitmapRenderTarget*)Unsafe.AsPointer(ref this)</param>, <param name="width">width</param>, <param name="height">height</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
