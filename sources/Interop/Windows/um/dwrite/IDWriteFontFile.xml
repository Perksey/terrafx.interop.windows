<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dwrite.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDWriteFontFile" access="public" native="struct IDWriteFontFile : IUnknown" uuid="739d886a-cef5-47dc-8769-1a8b41bebbb0" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontFile*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDWriteFontFile*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontFile*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDWriteFontFile*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontFile*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDWriteFontFile*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetReferenceKey" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontFileReferenceKey">
                    <type>void**</type>
                </param>
                <param name="fontFileReferenceKeySize">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontFile*, void**, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDWriteFontFile*)Unsafe.AsPointer(ref this)</param>, <param name="fontFileReferenceKey">fontFileReferenceKey</param>, <param name="fontFileReferenceKeySize">fontFileReferenceKeySize</param>);
        </code>
                </body>
            </function>
            <function name="GetLoader" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontFileLoader">
                    <type>IDWriteFontFileLoader**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontFile*, IDWriteFontFileLoader**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDWriteFontFile*)Unsafe.AsPointer(ref this)</param>, <param name="fontFileLoader">fontFileLoader</param>);
        </code>
                </body>
            </function>
            <function name="Analyze" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="isSupportedFontType">
                    <type>int*</type>
                </param>
                <param name="fontFileType">
                    <type>DWRITE_FONT_FILE_TYPE*</type>
                </param>
                <param name="fontFaceType">
                    <type>DWRITE_FONT_FACE_TYPE*</type>
                </param>
                <param name="numberOfFaces">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontFile*, int*, DWRITE_FONT_FILE_TYPE*, DWRITE_FONT_FACE_TYPE*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDWriteFontFile*)Unsafe.AsPointer(ref this)</param>, <param name="isSupportedFontType">isSupportedFontType</param>, <param name="fontFileType">fontFileType</param>, <param name="fontFaceType">fontFaceType</param>, <param name="numberOfFaces">numberOfFaces</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
