<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/control.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IVideoWindow" access="public" native="struct IVideoWindow : IDispatch" uuid="56a868b4-0ad4-11ce-b03a-0020af0ba770" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetTypeInfoCount" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pctinfo">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="pctinfo">pctinfo</param>);
        </code>
                </body>
            </function>
            <function name="GetTypeInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="iTInfo">
                    <type>uint</type>
                </param>
                <param name="lcid">
                    <type>uint</type>
                </param>
                <param name="ppTInfo">
                    <type>ITypeInfo**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, uint, uint, ITypeInfo**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="iTInfo">iTInfo</param>, <param name="lcid">lcid</param>, <param name="ppTInfo">ppTInfo</param>);
        </code>
                </body>
            </function>
            <function name="GetIDsOfNames" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="rgszNames">
                    <type>ushort**</type>
                </param>
                <param name="cNames">
                    <type>uint</type>
                </param>
                <param name="lcid">
                    <type>uint</type>
                </param>
                <param name="rgDispId">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, Guid*, ushort**, uint, uint, int*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="rgszNames">rgszNames</param>, <param name="cNames">cNames</param>, <param name="lcid">lcid</param>, <param name="rgDispId">rgDispId</param>);
        </code>
                </body>
            </function>
            <function name="Invoke" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dispIdMember">
                    <type>int</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="lcid">
                    <type>uint</type>
                </param>
                <param name="wFlags">
                    <type>ushort</type>
                </param>
                <param name="pDispParams">
                    <type>DISPPARAMS*</type>
                </param>
                <param name="pVarResult">
                    <type>VARIANT*</type>
                </param>
                <param name="pExcepInfo">
                    <type>EXCEPINFO*</type>
                </param>
                <param name="puArgErr">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int, Guid*, uint, ushort, DISPPARAMS*, VARIANT*, EXCEPINFO*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="dispIdMember">dispIdMember</param>, <param name="riid">riid</param>, <param name="lcid">lcid</param>, <param name="wFlags">wFlags</param>, <param name="pDispParams">pDispParams</param>, <param name="pVarResult">pVarResult</param>, <param name="pExcepInfo">pExcepInfo</param>, <param name="puArgErr">puArgErr</param>);
        </code>
                </body>
            </function>
            <function name="put_Caption" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="strCaption">
                    <type>ushort*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, ushort*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="strCaption">strCaption</param>);
        </code>
                </body>
            </function>
            <function name="get_Caption" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="strCaption">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="strCaption">strCaption</param>);
        </code>
                </body>
            </function>
            <function name="put_WindowStyle" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="WindowStyle">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="WindowStyle">WindowStyle</param>);
        </code>
                </body>
            </function>
            <function name="get_WindowStyle" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="WindowStyle">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="WindowStyle">WindowStyle</param>);
        </code>
                </body>
            </function>
            <function name="put_WindowStyleEx" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="WindowStyleEx">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="WindowStyleEx">WindowStyleEx</param>);
        </code>
                </body>
            </function>
            <function name="get_WindowStyleEx" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="WindowStyleEx">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="WindowStyleEx">WindowStyleEx</param>);
        </code>
                </body>
            </function>
            <function name="put_AutoShow" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="AutoShow">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="AutoShow">AutoShow</param>);
        </code>
                </body>
            </function>
            <function name="get_AutoShow" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="AutoShow">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="AutoShow">AutoShow</param>);
        </code>
                </body>
            </function>
            <function name="put_WindowState" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="WindowState">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="WindowState">WindowState</param>);
        </code>
                </body>
            </function>
            <function name="get_WindowState" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="WindowState">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="WindowState">WindowState</param>);
        </code>
                </body>
            </function>
            <function name="put_BackgroundPalette" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="BackgroundPalette">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="BackgroundPalette">BackgroundPalette</param>);
        </code>
                </body>
            </function>
            <function name="get_BackgroundPalette" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pBackgroundPalette">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="pBackgroundPalette">pBackgroundPalette</param>);
        </code>
                </body>
            </function>
            <function name="put_Visible" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Visible">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int, int&gt;)(lpVtbl[<vtbl explicit="False">19</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="Visible">Visible</param>);
        </code>
                </body>
            </function>
            <function name="get_Visible" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pVisible">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">20</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="pVisible">pVisible</param>);
        </code>
                </body>
            </function>
            <function name="put_Left" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Left">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int, int&gt;)(lpVtbl[<vtbl explicit="False">21</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="Left">Left</param>);
        </code>
                </body>
            </function>
            <function name="get_Left" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pLeft">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">22</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="pLeft">pLeft</param>);
        </code>
                </body>
            </function>
            <function name="put_Width" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Width">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int, int&gt;)(lpVtbl[<vtbl explicit="False">23</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="Width">Width</param>);
        </code>
                </body>
            </function>
            <function name="get_Width" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pWidth">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">24</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="pWidth">pWidth</param>);
        </code>
                </body>
            </function>
            <function name="put_Top" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Top">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int, int&gt;)(lpVtbl[<vtbl explicit="False">25</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="Top">Top</param>);
        </code>
                </body>
            </function>
            <function name="get_Top" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pTop">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">26</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="pTop">pTop</param>);
        </code>
                </body>
            </function>
            <function name="put_Height" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Height">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int, int&gt;)(lpVtbl[<vtbl explicit="False">27</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="Height">Height</param>);
        </code>
                </body>
            </function>
            <function name="get_Height" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pHeight">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">28</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="pHeight">pHeight</param>);
        </code>
                </body>
            </function>
            <function name="put_Owner" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Owner">
                    <type>nint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, nint, int&gt;)(lpVtbl[<vtbl explicit="False">29</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="Owner">Owner</param>);
        </code>
                </body>
            </function>
            <function name="get_Owner" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Owner">
                    <type>nint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, nint*, int&gt;)(lpVtbl[<vtbl explicit="False">30</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="Owner">Owner</param>);
        </code>
                </body>
            </function>
            <function name="put_MessageDrain" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Drain">
                    <type>nint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, nint, int&gt;)(lpVtbl[<vtbl explicit="False">31</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="Drain">Drain</param>);
        </code>
                </body>
            </function>
            <function name="get_MessageDrain" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Drain">
                    <type>nint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, nint*, int&gt;)(lpVtbl[<vtbl explicit="False">32</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="Drain">Drain</param>);
        </code>
                </body>
            </function>
            <function name="get_BorderColor" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Color">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">33</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="Color">Color</param>);
        </code>
                </body>
            </function>
            <function name="put_BorderColor" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Color">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int, int&gt;)(lpVtbl[<vtbl explicit="False">34</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="Color">Color</param>);
        </code>
                </body>
            </function>
            <function name="get_FullScreenMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="FullScreenMode">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">35</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="FullScreenMode">FullScreenMode</param>);
        </code>
                </body>
            </function>
            <function name="put_FullScreenMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="FullScreenMode">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int, int&gt;)(lpVtbl[<vtbl explicit="False">36</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="FullScreenMode">FullScreenMode</param>);
        </code>
                </body>
            </function>
            <function name="SetWindowForeground" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Focus">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int, int&gt;)(lpVtbl[<vtbl explicit="False">37</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="Focus">Focus</param>);
        </code>
                </body>
            </function>
            <function name="NotifyOwnerMessage" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="hwnd">
                    <type>nint</type>
                </param>
                <param name="uMsg">
                    <type>int</type>
                </param>
                <param name="wParam">
                    <type>nint</type>
                </param>
                <param name="lParam">
                    <type>nint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, nint, int, nint, nint, int&gt;)(lpVtbl[<vtbl explicit="False">38</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="hwnd">hwnd</param>, <param name="uMsg">uMsg</param>, <param name="wParam">wParam</param>, <param name="lParam">lParam</param>);
        </code>
                </body>
            </function>
            <function name="SetWindowPosition" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Left">
                    <type>int</type>
                </param>
                <param name="Top">
                    <type>int</type>
                </param>
                <param name="Width">
                    <type>int</type>
                </param>
                <param name="Height">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int, int, int, int, int&gt;)(lpVtbl[<vtbl explicit="False">39</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="Left">Left</param>, <param name="Top">Top</param>, <param name="Width">Width</param>, <param name="Height">Height</param>);
        </code>
                </body>
            </function>
            <function name="GetWindowPosition" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pLeft">
                    <type>int*</type>
                </param>
                <param name="pTop">
                    <type>int*</type>
                </param>
                <param name="pWidth">
                    <type>int*</type>
                </param>
                <param name="pHeight">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int*, int*, int*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">40</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="pLeft">pLeft</param>, <param name="pTop">pTop</param>, <param name="pWidth">pWidth</param>, <param name="pHeight">pHeight</param>);
        </code>
                </body>
            </function>
            <function name="GetMinIdealImageSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pWidth">
                    <type>int*</type>
                </param>
                <param name="pHeight">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">41</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="pWidth">pWidth</param>, <param name="pHeight">pHeight</param>);
        </code>
                </body>
            </function>
            <function name="GetMaxIdealImageSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pWidth">
                    <type>int*</type>
                </param>
                <param name="pHeight">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">42</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="pWidth">pWidth</param>, <param name="pHeight">pHeight</param>);
        </code>
                </body>
            </function>
            <function name="GetRestorePosition" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pLeft">
                    <type>int*</type>
                </param>
                <param name="pTop">
                    <type>int*</type>
                </param>
                <param name="pWidth">
                    <type>int*</type>
                </param>
                <param name="pHeight">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int*, int*, int*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">43</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="pLeft">pLeft</param>, <param name="pTop">pTop</param>, <param name="pWidth">pWidth</param>, <param name="pHeight">pHeight</param>);
        </code>
                </body>
            </function>
            <function name="HideCursor" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="HideCursor">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int, int&gt;)(lpVtbl[<vtbl explicit="False">44</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="HideCursor">HideCursor</param>);
        </code>
                </body>
            </function>
            <function name="IsCursorHidden" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="CursorHidden">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVideoWindow*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">45</vtbl>]))(<param special="thisPtr">(IVideoWindow*)Unsafe.AsPointer(ref this)</param>, <param name="CursorHidden">CursorHidden</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
