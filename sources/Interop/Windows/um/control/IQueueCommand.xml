<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/control.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IQueueCommand" access="public" native="struct IQueueCommand : IUnknown" uuid="56a868b7-0ad4-11ce-b03a-0020af0ba770" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IQueueCommand*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IQueueCommand*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IQueueCommand*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IQueueCommand*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IQueueCommand*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IQueueCommand*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="InvokeAtStreamTime" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pCmd">
                    <type>IDeferredCommand**</type>
                </param>
                <param name="time">
                    <type>double</type>
                </param>
                <param name="iid">
                    <type>Guid*</type>
                </param>
                <param name="dispidMethod">
                    <type>int</type>
                </param>
                <param name="wFlags">
                    <type>short</type>
                </param>
                <param name="cArgs">
                    <type>int</type>
                </param>
                <param name="pDispParams">
                    <type>VARIANT*</type>
                </param>
                <param name="pvarResult">
                    <type>VARIANT*</type>
                </param>
                <param name="puArgErr">
                    <type>short*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IQueueCommand*, IDeferredCommand**, double, Guid*, int, short, int, VARIANT*, VARIANT*, short*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IQueueCommand*)Unsafe.AsPointer(ref this)</param>, <param name="pCmd">pCmd</param>, <param name="time">time</param>, <param name="iid">iid</param>, <param name="dispidMethod">dispidMethod</param>, <param name="wFlags">wFlags</param>, <param name="cArgs">cArgs</param>, <param name="pDispParams">pDispParams</param>, <param name="pvarResult">pvarResult</param>, <param name="puArgErr">puArgErr</param>);
        </code>
                </body>
            </function>
            <function name="InvokeAtPresentationTime" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pCmd">
                    <type>IDeferredCommand**</type>
                </param>
                <param name="time">
                    <type>double</type>
                </param>
                <param name="iid">
                    <type>Guid*</type>
                </param>
                <param name="dispidMethod">
                    <type>int</type>
                </param>
                <param name="wFlags">
                    <type>short</type>
                </param>
                <param name="cArgs">
                    <type>int</type>
                </param>
                <param name="pDispParams">
                    <type>VARIANT*</type>
                </param>
                <param name="pvarResult">
                    <type>VARIANT*</type>
                </param>
                <param name="puArgErr">
                    <type>short*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IQueueCommand*, IDeferredCommand**, double, Guid*, int, short, int, VARIANT*, VARIANT*, short*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IQueueCommand*)Unsafe.AsPointer(ref this)</param>, <param name="pCmd">pCmd</param>, <param name="time">time</param>, <param name="iid">iid</param>, <param name="dispidMethod">dispidMethod</param>, <param name="wFlags">wFlags</param>, <param name="cArgs">cArgs</param>, <param name="pDispParams">pDispParams</param>, <param name="pvarResult">pvarResult</param>, <param name="puArgErr">puArgErr</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
