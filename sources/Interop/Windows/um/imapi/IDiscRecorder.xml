<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/imapi.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDiscRecorder" access="public" native="struct IDiscRecorder : IUnknown" uuid="85ac9776-ca88-4cf2-894e-09598c078a41" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDiscRecorder*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDiscRecorder*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDiscRecorder*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDiscRecorder*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDiscRecorder*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDiscRecorder*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Init" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pbyUniqueID">
                    <type>byte*</type>
                </param>
                <param name="nulIDSize">
                    <type>uint</type>
                </param>
                <param name="nulDriveNumber">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDiscRecorder*, byte*, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDiscRecorder*)Unsafe.AsPointer(ref this)</param>, <param name="pbyUniqueID">pbyUniqueID</param>, <param name="nulIDSize">nulIDSize</param>, <param name="nulDriveNumber">nulDriveNumber</param>);
        </code>
                </body>
            </function>
            <function name="GetRecorderGUID" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pbyUniqueID">
                    <type>byte*</type>
                </param>
                <param name="ulBufferSize">
                    <type>uint</type>
                </param>
                <param name="pulReturnSizeRequired">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDiscRecorder*, byte*, uint, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDiscRecorder*)Unsafe.AsPointer(ref this)</param>, <param name="pbyUniqueID">pbyUniqueID</param>, <param name="ulBufferSize">ulBufferSize</param>, <param name="pulReturnSizeRequired">pulReturnSizeRequired</param>);
        </code>
                </body>
            </function>
            <function name="GetRecorderType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fTypeCode">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDiscRecorder*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDiscRecorder*)Unsafe.AsPointer(ref this)</param>, <param name="fTypeCode">fTypeCode</param>);
        </code>
                </body>
            </function>
            <function name="GetDisplayNames" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pbstrVendorID">
                    <type>ushort**</type>
                </param>
                <param name="pbstrProductID">
                    <type>ushort**</type>
                </param>
                <param name="pbstrRevision">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDiscRecorder*, ushort**, ushort**, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDiscRecorder*)Unsafe.AsPointer(ref this)</param>, <param name="pbstrVendorID">pbstrVendorID</param>, <param name="pbstrProductID">pbstrProductID</param>, <param name="pbstrRevision">pbstrRevision</param>);
        </code>
                </body>
            </function>
            <function name="GetBasePnPID" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pbstrBasePnPID">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDiscRecorder*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDiscRecorder*)Unsafe.AsPointer(ref this)</param>, <param name="pbstrBasePnPID">pbstrBasePnPID</param>);
        </code>
                </body>
            </function>
            <function name="GetPath" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pbstrPath">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDiscRecorder*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDiscRecorder*)Unsafe.AsPointer(ref this)</param>, <param name="pbstrPath">pbstrPath</param>);
        </code>
                </body>
            </function>
            <function name="GetRecorderProperties" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppPropStg">
                    <type>IPropertyStorage**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDiscRecorder*, IPropertyStorage**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IDiscRecorder*)Unsafe.AsPointer(ref this)</param>, <param name="ppPropStg">ppPropStg</param>);
        </code>
                </body>
            </function>
            <function name="SetRecorderProperties" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pPropStg">
                    <type>IPropertyStorage*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDiscRecorder*, IPropertyStorage*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IDiscRecorder*)Unsafe.AsPointer(ref this)</param>, <param name="pPropStg">pPropStg</param>);
        </code>
                </body>
            </function>
            <function name="GetRecorderState" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pulDevStateFlags">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDiscRecorder*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IDiscRecorder*)Unsafe.AsPointer(ref this)</param>, <param name="pulDevStateFlags">pulDevStateFlags</param>);
        </code>
                </body>
            </function>
            <function name="OpenExclusive" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDiscRecorder*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IDiscRecorder*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="QueryMediaType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fMediaType">
                    <type>int*</type>
                </param>
                <param name="fMediaFlags">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDiscRecorder*, int*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IDiscRecorder*)Unsafe.AsPointer(ref this)</param>, <param name="fMediaType">fMediaType</param>, <param name="fMediaFlags">fMediaFlags</param>);
        </code>
                </body>
            </function>
            <function name="QueryMediaInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pbSessions">
                    <type>byte*</type>
                </param>
                <param name="pbLastTrack">
                    <type>byte*</type>
                </param>
                <param name="ulStartAddress">
                    <type>uint*</type>
                </param>
                <param name="ulNextWritable">
                    <type>uint*</type>
                </param>
                <param name="ulFreeBlocks">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDiscRecorder*, byte*, byte*, uint*, uint*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IDiscRecorder*)Unsafe.AsPointer(ref this)</param>, <param name="pbSessions">pbSessions</param>, <param name="pbLastTrack">pbLastTrack</param>, <param name="ulStartAddress">ulStartAddress</param>, <param name="ulNextWritable">ulNextWritable</param>, <param name="ulFreeBlocks">ulFreeBlocks</param>);
        </code>
                </body>
            </function>
            <function name="Eject" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDiscRecorder*, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IDiscRecorder*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Erase" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="bFullErase">
                    <type>byte</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDiscRecorder*, byte, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(IDiscRecorder*)Unsafe.AsPointer(ref this)</param>, <param name="bFullErase">bFullErase</param>);
        </code>
                </body>
            </function>
            <function name="Close" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDiscRecorder*, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(IDiscRecorder*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
