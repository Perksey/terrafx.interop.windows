<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfplay.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFPMediaPlayer" access="public" native="struct IMFPMediaPlayer : IUnknown" uuid="a714590a-58af-430a-85bf-44f5ec838d85" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Play" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Pause" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Stop" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="FrameStep" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetPosition" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="guidPositionType">
                    <type>Guid*</type>
                </param>
                <param name="pvPositionValue">
                    <type>PROPVARIANT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, Guid*, PROPVARIANT*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="guidPositionType">guidPositionType</param>, <param name="pvPositionValue">pvPositionValue</param>);
        </code>
                </body>
            </function>
            <function name="GetPosition" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="guidPositionType">
                    <type>Guid*</type>
                </param>
                <param name="pvPositionValue">
                    <type>PROPVARIANT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, Guid*, PROPVARIANT*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="guidPositionType">guidPositionType</param>, <param name="pvPositionValue">pvPositionValue</param>);
        </code>
                </body>
            </function>
            <function name="GetDuration" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="guidPositionType">
                    <type>Guid*</type>
                </param>
                <param name="pvDurationValue">
                    <type>PROPVARIANT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, Guid*, PROPVARIANT*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="guidPositionType">guidPositionType</param>, <param name="pvDurationValue">pvDurationValue</param>);
        </code>
                </body>
            </function>
            <function name="SetRate" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="flRate">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, float, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="flRate">flRate</param>);
        </code>
                </body>
            </function>
            <function name="GetRate" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pflRate">
                    <type>float*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, float*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="pflRate">pflRate</param>);
        </code>
                </body>
            </function>
            <function name="GetSupportedRates" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fForwardDirection">
                    <type>int</type>
                </param>
                <param name="pflSlowestRate">
                    <type>float*</type>
                </param>
                <param name="pflFastestRate">
                    <type>float*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, int, float*, float*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="fForwardDirection">fForwardDirection</param>, <param name="pflSlowestRate">pflSlowestRate</param>, <param name="pflFastestRate">pflFastestRate</param>);
        </code>
                </body>
            </function>
            <function name="GetState" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="peState">
                    <type>MFP_MEDIAPLAYER_STATE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, MFP_MEDIAPLAYER_STATE*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="peState">peState</param>);
        </code>
                </body>
            </function>
            <function name="CreateMediaItemFromURL" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pwszURL">
                    <type>ushort*</type>
                </param>
                <param name="fSync">
                    <type>int</type>
                </param>
                <param name="dwUserData">
                    <type>nuint</type>
                </param>
                <param name="ppMediaItem">
                    <type>IMFPMediaItem**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, ushort*, int, nuint, IMFPMediaItem**, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="pwszURL">pwszURL</param>, <param name="fSync">fSync</param>, <param name="dwUserData">dwUserData</param>, <param name="ppMediaItem">ppMediaItem</param>);
        </code>
                </body>
            </function>
            <function name="CreateMediaItemFromObject" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pIUnknownObj">
                    <type>IUnknown*</type>
                </param>
                <param name="fSync">
                    <type>int</type>
                </param>
                <param name="dwUserData">
                    <type>nuint</type>
                </param>
                <param name="ppMediaItem">
                    <type>IMFPMediaItem**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, IUnknown*, int, nuint, IMFPMediaItem**, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="pIUnknownObj">pIUnknownObj</param>, <param name="fSync">fSync</param>, <param name="dwUserData">dwUserData</param>, <param name="ppMediaItem">ppMediaItem</param>);
        </code>
                </body>
            </function>
            <function name="SetMediaItem" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pIMFPMediaItem">
                    <type>IMFPMediaItem*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, IMFPMediaItem*, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="pIMFPMediaItem">pIMFPMediaItem</param>);
        </code>
                </body>
            </function>
            <function name="ClearMediaItem" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetMediaItem" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppIMFPMediaItem">
                    <type>IMFPMediaItem**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, IMFPMediaItem**, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="ppIMFPMediaItem">ppIMFPMediaItem</param>);
        </code>
                </body>
            </function>
            <function name="GetVolume" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pflVolume">
                    <type>float*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, float*, int&gt;)(lpVtbl[<vtbl explicit="False">19</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="pflVolume">pflVolume</param>);
        </code>
                </body>
            </function>
            <function name="SetVolume" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="flVolume">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, float, int&gt;)(lpVtbl[<vtbl explicit="False">20</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="flVolume">flVolume</param>);
        </code>
                </body>
            </function>
            <function name="GetBalance" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pflBalance">
                    <type>float*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, float*, int&gt;)(lpVtbl[<vtbl explicit="False">21</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="pflBalance">pflBalance</param>);
        </code>
                </body>
            </function>
            <function name="SetBalance" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="flBalance">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, float, int&gt;)(lpVtbl[<vtbl explicit="False">22</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="flBalance">flBalance</param>);
        </code>
                </body>
            </function>
            <function name="GetMute" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pfMute">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">23</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="pfMute">pfMute</param>);
        </code>
                </body>
            </function>
            <function name="SetMute" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fMute">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, int, int&gt;)(lpVtbl[<vtbl explicit="False">24</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="fMute">fMute</param>);
        </code>
                </body>
            </function>
            <function name="GetNativeVideoSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pszVideo">
                    <type>SIZE*</type>
                </param>
                <param name="pszARVideo">
                    <type>SIZE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, SIZE*, SIZE*, int&gt;)(lpVtbl[<vtbl explicit="False">25</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="pszVideo">pszVideo</param>, <param name="pszARVideo">pszARVideo</param>);
        </code>
                </body>
            </function>
            <function name="GetIdealVideoSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pszMin">
                    <type>SIZE*</type>
                </param>
                <param name="pszMax">
                    <type>SIZE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, SIZE*, SIZE*, int&gt;)(lpVtbl[<vtbl explicit="False">26</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="pszMin">pszMin</param>, <param name="pszMax">pszMax</param>);
        </code>
                </body>
            </function>
            <function name="SetVideoSourceRect" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pnrcSource">
                    <type>MFVideoNormalizedRect*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, MFVideoNormalizedRect*, int&gt;)(lpVtbl[<vtbl explicit="False">27</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="pnrcSource">pnrcSource</param>);
        </code>
                </body>
            </function>
            <function name="GetVideoSourceRect" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pnrcSource">
                    <type>MFVideoNormalizedRect*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, MFVideoNormalizedRect*, int&gt;)(lpVtbl[<vtbl explicit="False">28</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="pnrcSource">pnrcSource</param>);
        </code>
                </body>
            </function>
            <function name="SetAspectRatioMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwAspectRatioMode">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">29</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="dwAspectRatioMode">dwAspectRatioMode</param>);
        </code>
                </body>
            </function>
            <function name="GetAspectRatioMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pdwAspectRatioMode">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">30</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="pdwAspectRatioMode">pdwAspectRatioMode</param>);
        </code>
                </body>
            </function>
            <function name="GetVideoWindow" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="phwndVideo">
                    <type>IntPtr*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, IntPtr*, int&gt;)(lpVtbl[<vtbl explicit="False">31</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="phwndVideo">phwndVideo</param>);
        </code>
                </body>
            </function>
            <function name="UpdateVideo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, int&gt;)(lpVtbl[<vtbl explicit="False">32</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetBorderColor" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Clr">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">33</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="Clr">Clr</param>);
        </code>
                </body>
            </function>
            <function name="GetBorderColor" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pClr">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">34</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="pClr">pClr</param>);
        </code>
                </body>
            </function>
            <function name="InsertEffect" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pEffect">
                    <type>IUnknown*</type>
                </param>
                <param name="fOptional">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, IUnknown*, int, int&gt;)(lpVtbl[<vtbl explicit="False">35</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="pEffect">pEffect</param>, <param name="fOptional">fOptional</param>);
        </code>
                </body>
            </function>
            <function name="RemoveEffect" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pEffect">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">36</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>, <param name="pEffect">pEffect</param>);
        </code>
                </body>
            </function>
            <function name="RemoveAllEffects" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, int&gt;)(lpVtbl[<vtbl explicit="False">37</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Shutdown" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPMediaPlayer*, int&gt;)(lpVtbl[<vtbl explicit="False">38</vtbl>]))(<param special="thisPtr">(IMFPMediaPlayer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
