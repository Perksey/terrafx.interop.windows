<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfmediaengine.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFTimedTextCue" access="public" native="struct IMFTimedTextCue : IUnknown" uuid="1e560447-9a2b-43e1-a94c-b0aaabfbfbc9" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCue*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFTimedTextCue*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCue*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFTimedTextCue*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCue*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFTimedTextCue*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetId" access="public" unsafe="true">
                <type native="DWORD">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCue*, uint&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFTimedTextCue*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetOriginalId" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="originalId">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCue*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFTimedTextCue*)Unsafe.AsPointer(ref this)</param>, <param name="originalId">originalId</param>);
        </code>
                </body>
            </function>
            <function name="GetCueKind" access="public" unsafe="true">
                <type>MF_TIMED_TEXT_TRACK_KIND</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCue*, MF_TIMED_TEXT_TRACK_KIND&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFTimedTextCue*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetStartTime" access="public" unsafe="true">
                <type>double</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCue*, double&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFTimedTextCue*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetDuration" access="public" unsafe="true">
                <type>double</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCue*, double&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFTimedTextCue*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetTrackId" access="public" unsafe="true">
                <type native="DWORD">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCue*, uint&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IMFTimedTextCue*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetData" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="data">
                    <type>IMFTimedTextBinary**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCue*, IMFTimedTextBinary**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IMFTimedTextCue*)Unsafe.AsPointer(ref this)</param>, <param name="data">data</param>);
        </code>
                </body>
            </function>
            <function name="GetRegion" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="region">
                    <type>IMFTimedTextRegion**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCue*, IMFTimedTextRegion**, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IMFTimedTextCue*)Unsafe.AsPointer(ref this)</param>, <param name="region">region</param>);
        </code>
                </body>
            </function>
            <function name="GetStyle" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="style">
                    <type>IMFTimedTextStyle**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCue*, IMFTimedTextStyle**, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IMFTimedTextCue*)Unsafe.AsPointer(ref this)</param>, <param name="style">style</param>);
        </code>
                </body>
            </function>
            <function name="GetLineCount" access="public" unsafe="true">
                <type native="DWORD">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCue*, uint&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IMFTimedTextCue*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetLine" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="index">
                    <type>uint</type>
                </param>
                <param name="line">
                    <type>IMFTimedTextFormattedText**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCue*, uint, IMFTimedTextFormattedText**, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IMFTimedTextCue*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>, <param name="line">line</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
