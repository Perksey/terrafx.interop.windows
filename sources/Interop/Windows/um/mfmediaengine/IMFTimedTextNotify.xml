<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfmediaengine.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFTimedTextNotify" access="public" native="struct IMFTimedTextNotify : IUnknown" uuid="df6b87b6-ce12-45db-aba7-432fe054e57d" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextNotify*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFTimedTextNotify*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextNotify*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFTimedTextNotify*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextNotify*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFTimedTextNotify*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="TrackAdded" access="public" unsafe="true">
                <type>void</type>
                <param name="trackId">
                    <type>uint</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;IMFTimedTextNotify*, uint, void&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFTimedTextNotify*)Unsafe.AsPointer(ref this)</param>, <param name="trackId">trackId</param>);
        </code>
                </body>
            </function>
            <function name="TrackRemoved" access="public" unsafe="true">
                <type>void</type>
                <param name="trackId">
                    <type>uint</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;IMFTimedTextNotify*, uint, void&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFTimedTextNotify*)Unsafe.AsPointer(ref this)</param>, <param name="trackId">trackId</param>);
        </code>
                </body>
            </function>
            <function name="TrackSelected" access="public" unsafe="true">
                <type>void</type>
                <param name="trackId">
                    <type>uint</type>
                </param>
                <param name="selected">
                    <type>int</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;IMFTimedTextNotify*, uint, int, void&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFTimedTextNotify*)Unsafe.AsPointer(ref this)</param>, <param name="trackId">trackId</param>, <param name="selected">selected</param>);
        </code>
                </body>
            </function>
            <function name="TrackReadyStateChanged" access="public" unsafe="true">
                <type>void</type>
                <param name="trackId">
                    <type>uint</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;IMFTimedTextNotify*, uint, void&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFTimedTextNotify*)Unsafe.AsPointer(ref this)</param>, <param name="trackId">trackId</param>);
        </code>
                </body>
            </function>
            <function name="Error" access="public" unsafe="true">
                <type>void</type>
                <param name="errorCode">
                    <type>MF_TIMED_TEXT_ERROR_CODE</type>
                </param>
                <param name="extendedErrorCode">
                    <type>int</type>
                </param>
                <param name="sourceTrackId">
                    <type>uint</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;IMFTimedTextNotify*, MF_TIMED_TEXT_ERROR_CODE, int, uint, void&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFTimedTextNotify*)Unsafe.AsPointer(ref this)</param>, <param name="errorCode">errorCode</param>, <param name="extendedErrorCode">extendedErrorCode</param>, <param name="sourceTrackId">sourceTrackId</param>);
        </code>
                </body>
            </function>
            <function name="Cue" access="public" unsafe="true">
                <type>void</type>
                <param name="cueEvent">
                    <type>MF_TIMED_TEXT_CUE_EVENT</type>
                </param>
                <param name="currentTime">
                    <type>double</type>
                </param>
                <param name="cue">
                    <type>IMFTimedTextCue*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;IMFTimedTextNotify*, MF_TIMED_TEXT_CUE_EVENT, double, IMFTimedTextCue*, void&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IMFTimedTextNotify*)Unsafe.AsPointer(ref this)</param>, <param name="cueEvent">cueEvent</param>, <param name="currentTime">currentTime</param>, <param name="cue">cue</param>);
        </code>
                </body>
            </function>
            <function name="Reset" access="public" unsafe="true">
                <type>void</type>
                <body>
                    <code>((delegate* unmanaged&lt;IMFTimedTextNotify*, void&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IMFTimedTextNotify*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
