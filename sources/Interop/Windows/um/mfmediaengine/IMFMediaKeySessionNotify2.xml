<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfmediaengine.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFMediaKeySessionNotify2" access="public" native="struct IMFMediaKeySessionNotify2 : IMFMediaKeySessionNotify" uuid="c3a9e92a-da88-46b0-a110-6cf953026cb9" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFMediaKeySessionNotify2*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFMediaKeySessionNotify2*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFMediaKeySessionNotify2*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFMediaKeySessionNotify2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFMediaKeySessionNotify2*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFMediaKeySessionNotify2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="KeyMessage" access="public" unsafe="true">
                <type>void</type>
                <param name="destinationURL">
                    <type>ushort*</type>
                </param>
                <param name="message">
                    <type>byte*</type>
                </param>
                <param name="cb">
                    <type>uint</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;IMFMediaKeySessionNotify2*, ushort*, byte*, uint, void&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFMediaKeySessionNotify2*)Unsafe.AsPointer(ref this)</param>, <param name="destinationURL">destinationURL</param>, <param name="message">message</param>, <param name="cb">cb</param>);
        </code>
                </body>
            </function>
            <function name="KeyAdded" access="public" unsafe="true">
                <type>void</type>
                <body>
                    <code>((delegate* unmanaged&lt;IMFMediaKeySessionNotify2*, void&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFMediaKeySessionNotify2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="KeyError" access="public" unsafe="true">
                <type>void</type>
                <param name="code">
                    <type>ushort</type>
                </param>
                <param name="systemCode">
                    <type>uint</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;IMFMediaKeySessionNotify2*, ushort, uint, void&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFMediaKeySessionNotify2*)Unsafe.AsPointer(ref this)</param>, <param name="code">code</param>, <param name="systemCode">systemCode</param>);
        </code>
                </body>
            </function>
            <function name="KeyMessage2" access="public" unsafe="true">
                <type>void</type>
                <param name="eMessageType">
                    <type>MF_MEDIAKEYSESSION_MESSAGETYPE</type>
                </param>
                <param name="destinationURL">
                    <type>ushort*</type>
                </param>
                <param name="pbMessage">
                    <type>byte*</type>
                </param>
                <param name="cbMessage">
                    <type>uint</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;IMFMediaKeySessionNotify2*, MF_MEDIAKEYSESSION_MESSAGETYPE, ushort*, byte*, uint, void&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFMediaKeySessionNotify2*)Unsafe.AsPointer(ref this)</param>, <param name="eMessageType">eMessageType</param>, <param name="destinationURL">destinationURL</param>, <param name="pbMessage">pbMessage</param>, <param name="cbMessage">cbMessage</param>);
        </code>
                </body>
            </function>
            <function name="KeyStatusChange" access="public" unsafe="true">
                <type>void</type>
                <body>
                    <code>((delegate* unmanaged&lt;IMFMediaKeySessionNotify2*, void&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFMediaKeySessionNotify2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
