<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfmediaengine.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFTimedTextRegion" access="public" native="struct IMFTimedTextRegion : IUnknown" uuid="c8d22afc-bc47-4bdf-9b04-787e49ce3f58" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextRegion*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFTimedTextRegion*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextRegion*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFTimedTextRegion*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextRegion*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFTimedTextRegion*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="name">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextRegion*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFTimedTextRegion*)Unsafe.AsPointer(ref this)</param>, <param name="name">name</param>);
        </code>
                </body>
            </function>
            <function name="GetPosition" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pX">
                    <type>double*</type>
                </param>
                <param name="pY">
                    <type>double*</type>
                </param>
                <param name="unitType">
                    <type>MF_TIMED_TEXT_UNIT_TYPE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextRegion*, double*, double*, MF_TIMED_TEXT_UNIT_TYPE*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFTimedTextRegion*)Unsafe.AsPointer(ref this)</param>, <param name="pX">pX</param>, <param name="pY">pY</param>, <param name="unitType">unitType</param>);
        </code>
                </body>
            </function>
            <function name="GetExtent" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pWidth">
                    <type>double*</type>
                </param>
                <param name="pHeight">
                    <type>double*</type>
                </param>
                <param name="unitType">
                    <type>MF_TIMED_TEXT_UNIT_TYPE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextRegion*, double*, double*, MF_TIMED_TEXT_UNIT_TYPE*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFTimedTextRegion*)Unsafe.AsPointer(ref this)</param>, <param name="pWidth">pWidth</param>, <param name="pHeight">pHeight</param>, <param name="unitType">unitType</param>);
        </code>
                </body>
            </function>
            <function name="GetBackgroundColor" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="bgColor">
                    <type>MFARGB*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextRegion*, MFARGB*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFTimedTextRegion*)Unsafe.AsPointer(ref this)</param>, <param name="bgColor">bgColor</param>);
        </code>
                </body>
            </function>
            <function name="GetWritingMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="writingMode">
                    <type>MF_TIMED_TEXT_WRITING_MODE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextRegion*, MF_TIMED_TEXT_WRITING_MODE*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFTimedTextRegion*)Unsafe.AsPointer(ref this)</param>, <param name="writingMode">writingMode</param>);
        </code>
                </body>
            </function>
            <function name="GetDisplayAlignment" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="displayAlign">
                    <type>MF_TIMED_TEXT_DISPLAY_ALIGNMENT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextRegion*, MF_TIMED_TEXT_DISPLAY_ALIGNMENT*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IMFTimedTextRegion*)Unsafe.AsPointer(ref this)</param>, <param name="displayAlign">displayAlign</param>);
        </code>
                </body>
            </function>
            <function name="GetLineHeight" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pLineHeight">
                    <type>double*</type>
                </param>
                <param name="unitType">
                    <type>MF_TIMED_TEXT_UNIT_TYPE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextRegion*, double*, MF_TIMED_TEXT_UNIT_TYPE*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IMFTimedTextRegion*)Unsafe.AsPointer(ref this)</param>, <param name="pLineHeight">pLineHeight</param>, <param name="unitType">unitType</param>);
        </code>
                </body>
            </function>
            <function name="GetClipOverflow" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="clipOverflow">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextRegion*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IMFTimedTextRegion*)Unsafe.AsPointer(ref this)</param>, <param name="clipOverflow">clipOverflow</param>);
        </code>
                </body>
            </function>
            <function name="GetPadding" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="before">
                    <type>double*</type>
                </param>
                <param name="start">
                    <type>double*</type>
                </param>
                <param name="after">
                    <type>double*</type>
                </param>
                <param name="end">
                    <type>double*</type>
                </param>
                <param name="unitType">
                    <type>MF_TIMED_TEXT_UNIT_TYPE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextRegion*, double*, double*, double*, double*, MF_TIMED_TEXT_UNIT_TYPE*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IMFTimedTextRegion*)Unsafe.AsPointer(ref this)</param>, <param name="before">before</param>, <param name="start">start</param>, <param name="after">after</param>, <param name="end">end</param>, <param name="unitType">unitType</param>);
        </code>
                </body>
            </function>
            <function name="GetWrap" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="wrap">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextRegion*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IMFTimedTextRegion*)Unsafe.AsPointer(ref this)</param>, <param name="wrap">wrap</param>);
        </code>
                </body>
            </function>
            <function name="GetZIndex" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="zIndex">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextRegion*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IMFTimedTextRegion*)Unsafe.AsPointer(ref this)</param>, <param name="zIndex">zIndex</param>);
        </code>
                </body>
            </function>
            <function name="GetScrollMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="scrollMode">
                    <type>MF_TIMED_TEXT_SCROLL_MODE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextRegion*, MF_TIMED_TEXT_SCROLL_MODE*, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IMFTimedTextRegion*)Unsafe.AsPointer(ref this)</param>, <param name="scrollMode">scrollMode</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
