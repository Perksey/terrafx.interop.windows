<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfmediaengine.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFTimedTextCueList" access="public" native="struct IMFTimedTextCueList : IUnknown" uuid="ad128745-211b-40a0-9981-fe65f166d0fd" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCueList*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFTimedTextCueList*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCueList*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFTimedTextCueList*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCueList*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFTimedTextCueList*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetLength" access="public" unsafe="true">
                <type native="DWORD">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCueList*, uint&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFTimedTextCueList*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetCueByIndex" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="index">
                    <type>uint</type>
                </param>
                <param name="cue">
                    <type>IMFTimedTextCue**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCueList*, uint, IMFTimedTextCue**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFTimedTextCueList*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>, <param name="cue">cue</param>);
        </code>
                </body>
            </function>
            <function name="GetCueById" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="id">
                    <type>uint</type>
                </param>
                <param name="cue">
                    <type>IMFTimedTextCue**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCueList*, uint, IMFTimedTextCue**, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFTimedTextCueList*)Unsafe.AsPointer(ref this)</param>, <param name="id">id</param>, <param name="cue">cue</param>);
        </code>
                </body>
            </function>
            <function name="GetCueByOriginalId" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="originalId">
                    <type>ushort*</type>
                </param>
                <param name="cue">
                    <type>IMFTimedTextCue**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCueList*, ushort*, IMFTimedTextCue**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFTimedTextCueList*)Unsafe.AsPointer(ref this)</param>, <param name="originalId">originalId</param>, <param name="cue">cue</param>);
        </code>
                </body>
            </function>
            <function name="AddTextCue" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="start">
                    <type>double</type>
                </param>
                <param name="duration">
                    <type>double</type>
                </param>
                <param name="text">
                    <type>ushort*</type>
                </param>
                <param name="cue">
                    <type>IMFTimedTextCue**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCueList*, double, double, ushort*, IMFTimedTextCue**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFTimedTextCueList*)Unsafe.AsPointer(ref this)</param>, <param name="start">start</param>, <param name="duration">duration</param>, <param name="text">text</param>, <param name="cue">cue</param>);
        </code>
                </body>
            </function>
            <function name="AddDataCue" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="start">
                    <type>double</type>
                </param>
                <param name="duration">
                    <type>double</type>
                </param>
                <param name="data">
                    <type>byte*</type>
                </param>
                <param name="dataSize">
                    <type>uint</type>
                </param>
                <param name="cue">
                    <type>IMFTimedTextCue**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCueList*, double, double, byte*, uint, IMFTimedTextCue**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IMFTimedTextCueList*)Unsafe.AsPointer(ref this)</param>, <param name="start">start</param>, <param name="duration">duration</param>, <param name="data">data</param>, <param name="dataSize">dataSize</param>, <param name="cue">cue</param>);
        </code>
                </body>
            </function>
            <function name="RemoveCue" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="cue">
                    <type>IMFTimedTextCue*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextCueList*, IMFTimedTextCue*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IMFTimedTextCueList*)Unsafe.AsPointer(ref this)</param>, <param name="cue">cue</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
