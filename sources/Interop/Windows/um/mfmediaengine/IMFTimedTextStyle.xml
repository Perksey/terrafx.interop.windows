<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfmediaengine.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFTimedTextStyle" access="public" native="struct IMFTimedTextStyle : IUnknown" uuid="09b2455d-b834-4f01-a347-9052e21c450e" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextStyle*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFTimedTextStyle*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextStyle*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFTimedTextStyle*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextStyle*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFTimedTextStyle*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="name">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextStyle*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFTimedTextStyle*)Unsafe.AsPointer(ref this)</param>, <param name="name">name</param>);
        </code>
                </body>
            </function>
            <function name="IsExternal" access="public" unsafe="true">
                <type native="BOOL">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextStyle*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFTimedTextStyle*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetFontFamily" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontFamily">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextStyle*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFTimedTextStyle*)Unsafe.AsPointer(ref this)</param>, <param name="fontFamily">fontFamily</param>);
        </code>
                </body>
            </function>
            <function name="GetFontSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontSize">
                    <type>double*</type>
                </param>
                <param name="unitType">
                    <type>MF_TIMED_TEXT_UNIT_TYPE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextStyle*, double*, MF_TIMED_TEXT_UNIT_TYPE*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFTimedTextStyle*)Unsafe.AsPointer(ref this)</param>, <param name="fontSize">fontSize</param>, <param name="unitType">unitType</param>);
        </code>
                </body>
            </function>
            <function name="GetColor" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="color">
                    <type>MFARGB*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextStyle*, MFARGB*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFTimedTextStyle*)Unsafe.AsPointer(ref this)</param>, <param name="color">color</param>);
        </code>
                </body>
            </function>
            <function name="GetBackgroundColor" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="bgColor">
                    <type>MFARGB*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextStyle*, MFARGB*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IMFTimedTextStyle*)Unsafe.AsPointer(ref this)</param>, <param name="bgColor">bgColor</param>);
        </code>
                </body>
            </function>
            <function name="GetShowBackgroundAlways" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="showBackgroundAlways">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextStyle*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IMFTimedTextStyle*)Unsafe.AsPointer(ref this)</param>, <param name="showBackgroundAlways">showBackgroundAlways</param>);
        </code>
                </body>
            </function>
            <function name="GetFontStyle" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontStyle">
                    <type>MF_TIMED_TEXT_FONT_STYLE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextStyle*, MF_TIMED_TEXT_FONT_STYLE*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IMFTimedTextStyle*)Unsafe.AsPointer(ref this)</param>, <param name="fontStyle">fontStyle</param>);
        </code>
                </body>
            </function>
            <function name="GetBold" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="bold">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextStyle*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IMFTimedTextStyle*)Unsafe.AsPointer(ref this)</param>, <param name="bold">bold</param>);
        </code>
                </body>
            </function>
            <function name="GetRightToLeft" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="rightToLeft">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextStyle*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IMFTimedTextStyle*)Unsafe.AsPointer(ref this)</param>, <param name="rightToLeft">rightToLeft</param>);
        </code>
                </body>
            </function>
            <function name="GetTextAlignment" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="textAlign">
                    <type>MF_TIMED_TEXT_ALIGNMENT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextStyle*, MF_TIMED_TEXT_ALIGNMENT*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IMFTimedTextStyle*)Unsafe.AsPointer(ref this)</param>, <param name="textAlign">textAlign</param>);
        </code>
                </body>
            </function>
            <function name="GetTextDecoration" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="textDecoration">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextStyle*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IMFTimedTextStyle*)Unsafe.AsPointer(ref this)</param>, <param name="textDecoration">textDecoration</param>);
        </code>
                </body>
            </function>
            <function name="GetTextOutline" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="color">
                    <type>MFARGB*</type>
                </param>
                <param name="thickness">
                    <type>double*</type>
                </param>
                <param name="blurRadius">
                    <type>double*</type>
                </param>
                <param name="unitType">
                    <type>MF_TIMED_TEXT_UNIT_TYPE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextStyle*, MFARGB*, double*, double*, MF_TIMED_TEXT_UNIT_TYPE*, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IMFTimedTextStyle*)Unsafe.AsPointer(ref this)</param>, <param name="color">color</param>, <param name="thickness">thickness</param>, <param name="blurRadius">blurRadius</param>, <param name="unitType">unitType</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
