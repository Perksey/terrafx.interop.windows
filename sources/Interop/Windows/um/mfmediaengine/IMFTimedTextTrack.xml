<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfmediaengine.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFTimedTextTrack" access="public" native="struct IMFTimedTextTrack : IUnknown" uuid="8822c32d-654e-4233-bf21-d7f2e67d30d4" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextTrack*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFTimedTextTrack*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextTrack*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFTimedTextTrack*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextTrack*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFTimedTextTrack*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetId" access="public" unsafe="true">
                <type native="DWORD">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextTrack*, uint&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFTimedTextTrack*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetLabel" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="label">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextTrack*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFTimedTextTrack*)Unsafe.AsPointer(ref this)</param>, <param name="label">label</param>);
        </code>
                </body>
            </function>
            <function name="SetLabel" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="label">
                    <type>ushort*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextTrack*, ushort*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFTimedTextTrack*)Unsafe.AsPointer(ref this)</param>, <param name="label">label</param>);
        </code>
                </body>
            </function>
            <function name="GetLanguage" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="language">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextTrack*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFTimedTextTrack*)Unsafe.AsPointer(ref this)</param>, <param name="language">language</param>);
        </code>
                </body>
            </function>
            <function name="GetTrackKind" access="public" unsafe="true">
                <type>MF_TIMED_TEXT_TRACK_KIND</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextTrack*, MF_TIMED_TEXT_TRACK_KIND&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFTimedTextTrack*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="IsInBand" access="public" unsafe="true">
                <type native="BOOL">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextTrack*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IMFTimedTextTrack*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetInBandMetadataTrackDispatchType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dispatchType">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextTrack*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IMFTimedTextTrack*)Unsafe.AsPointer(ref this)</param>, <param name="dispatchType">dispatchType</param>);
        </code>
                </body>
            </function>
            <function name="IsActive" access="public" unsafe="true">
                <type native="BOOL">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextTrack*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IMFTimedTextTrack*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetErrorCode" access="public" unsafe="true">
                <type>MF_TIMED_TEXT_ERROR_CODE</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextTrack*, MF_TIMED_TEXT_ERROR_CODE&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IMFTimedTextTrack*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetExtendedErrorCode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextTrack*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IMFTimedTextTrack*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetDataFormat" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="format">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextTrack*, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IMFTimedTextTrack*)Unsafe.AsPointer(ref this)</param>, <param name="format">format</param>);
        </code>
                </body>
            </function>
            <function name="GetReadyState" access="public" unsafe="true">
                <type>MF_TIMED_TEXT_TRACK_READY_STATE</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextTrack*, MF_TIMED_TEXT_TRACK_READY_STATE&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IMFTimedTextTrack*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetCueList" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="cues">
                    <type>IMFTimedTextCueList**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFTimedTextTrack*, IMFTimedTextCueList**, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IMFTimedTextTrack*)Unsafe.AsPointer(ref this)</param>, <param name="cues">cues</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
