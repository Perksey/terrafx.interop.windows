<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfmediaengine.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFSourceBuffer" access="public" native="struct IMFSourceBuffer : IUnknown" uuid="e2cd3a4b-af25-4d3d-9110-da0e6f8ee877" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSourceBuffer*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFSourceBuffer*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSourceBuffer*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFSourceBuffer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSourceBuffer*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFSourceBuffer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetUpdating" access="public" unsafe="true">
                <type native="BOOL">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSourceBuffer*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFSourceBuffer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetBuffered" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppBuffered">
                    <type>IMFMediaTimeRange**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSourceBuffer*, IMFMediaTimeRange**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFSourceBuffer*)Unsafe.AsPointer(ref this)</param>, <param name="ppBuffered">ppBuffered</param>);
        </code>
                </body>
            </function>
            <function name="GetTimeStampOffset" access="public" unsafe="true">
                <type>double</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSourceBuffer*, double&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFSourceBuffer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetTimeStampOffset" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="offset">
                    <type>double</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSourceBuffer*, double, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFSourceBuffer*)Unsafe.AsPointer(ref this)</param>, <param name="offset">offset</param>);
        </code>
                </body>
            </function>
            <function name="GetAppendWindowStart" access="public" unsafe="true">
                <type>double</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSourceBuffer*, double&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFSourceBuffer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetAppendWindowStart" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="time">
                    <type>double</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSourceBuffer*, double, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IMFSourceBuffer*)Unsafe.AsPointer(ref this)</param>, <param name="time">time</param>);
        </code>
                </body>
            </function>
            <function name="GetAppendWindowEnd" access="public" unsafe="true">
                <type>double</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSourceBuffer*, double&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IMFSourceBuffer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetAppendWindowEnd" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="time">
                    <type>double</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSourceBuffer*, double, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IMFSourceBuffer*)Unsafe.AsPointer(ref this)</param>, <param name="time">time</param>);
        </code>
                </body>
            </function>
            <function name="Append" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pData">
                    <type>byte*</type>
                </param>
                <param name="len">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSourceBuffer*, byte*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IMFSourceBuffer*)Unsafe.AsPointer(ref this)</param>, <param name="pData">pData</param>, <param name="len">len</param>);
        </code>
                </body>
            </function>
            <function name="AppendByteStream" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pStream">
                    <type>IMFByteStream*</type>
                </param>
                <param name="pMaxLen">
                    <type>ulong*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSourceBuffer*, IMFByteStream*, ulong*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IMFSourceBuffer*)Unsafe.AsPointer(ref this)</param>, <param name="pStream">pStream</param>, <param name="pMaxLen">pMaxLen</param>);
        </code>
                </body>
            </function>
            <function name="Abort" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSourceBuffer*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IMFSourceBuffer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Remove" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="start">
                    <type>double</type>
                </param>
                <param name="end">
                    <type>double</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSourceBuffer*, double, double, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IMFSourceBuffer*)Unsafe.AsPointer(ref this)</param>, <param name="start">start</param>, <param name="end">end</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
