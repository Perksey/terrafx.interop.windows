<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d3d10_1shader.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ID3D10ShaderReflection1" access="public" native="struct ID3D10ShaderReflection1 : IUnknown" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10ShaderReflection1*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ID3D10ShaderReflection1*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10ShaderReflection1*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ID3D10ShaderReflection1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10ShaderReflection1*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ID3D10ShaderReflection1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetDesc" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDesc">
                    <type>D3D10_SHADER_DESC*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10ShaderReflection1*, D3D10_SHADER_DESC*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ID3D10ShaderReflection1*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>);
        </code>
                </body>
            </function>
            <function name="GetConstantBufferByIndex" access="public" unsafe="true">
                <type native="ID3D10ShaderReflectionConstantBuffer *">ID3D10ShaderReflectionConstantBuffer*</type>
                <param name="Index">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10ShaderReflection1*, uint, ID3D10ShaderReflectionConstantBuffer*&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ID3D10ShaderReflection1*)Unsafe.AsPointer(ref this)</param>, <param name="Index">Index</param>);
        </code>
                </body>
            </function>
            <function name="GetConstantBufferByName" access="public" unsafe="true">
                <type native="ID3D10ShaderReflectionConstantBuffer *">ID3D10ShaderReflectionConstantBuffer*</type>
                <param name="Name">
                    <type>sbyte*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10ShaderReflection1*, sbyte*, ID3D10ShaderReflectionConstantBuffer*&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ID3D10ShaderReflection1*)Unsafe.AsPointer(ref this)</param>, <param name="Name">Name</param>);
        </code>
                </body>
            </function>
            <function name="GetResourceBindingDesc" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ResourceIndex">
                    <type>uint</type>
                </param>
                <param name="pDesc">
                    <type>D3D10_SHADER_INPUT_BIND_DESC*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10ShaderReflection1*, uint, D3D10_SHADER_INPUT_BIND_DESC*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ID3D10ShaderReflection1*)Unsafe.AsPointer(ref this)</param>, <param name="ResourceIndex">ResourceIndex</param>, <param name="pDesc">pDesc</param>);
        </code>
                </body>
            </function>
            <function name="GetInputParameterDesc" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ParameterIndex">
                    <type>uint</type>
                </param>
                <param name="pDesc">
                    <type>D3D10_SIGNATURE_PARAMETER_DESC*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10ShaderReflection1*, uint, D3D10_SIGNATURE_PARAMETER_DESC*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ID3D10ShaderReflection1*)Unsafe.AsPointer(ref this)</param>, <param name="ParameterIndex">ParameterIndex</param>, <param name="pDesc">pDesc</param>);
        </code>
                </body>
            </function>
            <function name="GetOutputParameterDesc" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ParameterIndex">
                    <type>uint</type>
                </param>
                <param name="pDesc">
                    <type>D3D10_SIGNATURE_PARAMETER_DESC*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10ShaderReflection1*, uint, D3D10_SIGNATURE_PARAMETER_DESC*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ID3D10ShaderReflection1*)Unsafe.AsPointer(ref this)</param>, <param name="ParameterIndex">ParameterIndex</param>, <param name="pDesc">pDesc</param>);
        </code>
                </body>
            </function>
            <function name="GetVariableByName" access="public" unsafe="true">
                <type native="ID3D10ShaderReflectionVariable *">ID3D10ShaderReflectionVariable*</type>
                <param name="Name">
                    <type>sbyte*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10ShaderReflection1*, sbyte*, ID3D10ShaderReflectionVariable*&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ID3D10ShaderReflection1*)Unsafe.AsPointer(ref this)</param>, <param name="Name">Name</param>);
        </code>
                </body>
            </function>
            <function name="GetResourceBindingDescByName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Name">
                    <type>sbyte*</type>
                </param>
                <param name="pDesc">
                    <type>D3D10_SHADER_INPUT_BIND_DESC*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10ShaderReflection1*, sbyte*, D3D10_SHADER_INPUT_BIND_DESC*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ID3D10ShaderReflection1*)Unsafe.AsPointer(ref this)</param>, <param name="Name">Name</param>, <param name="pDesc">pDesc</param>);
        </code>
                </body>
            </function>
            <function name="GetMovInstructionCount" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pCount">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10ShaderReflection1*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ID3D10ShaderReflection1*)Unsafe.AsPointer(ref this)</param>, <param name="pCount">pCount</param>);
        </code>
                </body>
            </function>
            <function name="GetMovcInstructionCount" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pCount">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10ShaderReflection1*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ID3D10ShaderReflection1*)Unsafe.AsPointer(ref this)</param>, <param name="pCount">pCount</param>);
        </code>
                </body>
            </function>
            <function name="GetConversionInstructionCount" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pCount">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10ShaderReflection1*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(ID3D10ShaderReflection1*)Unsafe.AsPointer(ref this)</param>, <param name="pCount">pCount</param>);
        </code>
                </body>
            </function>
            <function name="GetBitwiseInstructionCount" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pCount">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10ShaderReflection1*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(ID3D10ShaderReflection1*)Unsafe.AsPointer(ref this)</param>, <param name="pCount">pCount</param>);
        </code>
                </body>
            </function>
            <function name="GetGSInputPrimitive" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pPrim">
                    <type>D3D_PRIMITIVE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10ShaderReflection1*, D3D_PRIMITIVE*, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(ID3D10ShaderReflection1*)Unsafe.AsPointer(ref this)</param>, <param name="pPrim">pPrim</param>);
        </code>
                </body>
            </function>
            <function name="IsLevel9Shader" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pbLevel9Shader">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10ShaderReflection1*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(ID3D10ShaderReflection1*)Unsafe.AsPointer(ref this)</param>, <param name="pbLevel9Shader">pbLevel9Shader</param>);
        </code>
                </body>
            </function>
            <function name="IsSampleFrequencyShader" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pbSampleFrequency">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D10ShaderReflection1*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(ID3D10ShaderReflection1*)Unsafe.AsPointer(ref this)</param>, <param name="pbSampleFrequency">pbSampleFrequency</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
