<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/strmif.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IVMRDeinterlaceControl" access="public" native="struct IVMRDeinterlaceControl : IUnknown" uuid="bb057577-0db8-4e6a-87a7-1a8c9a505a0f" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRDeinterlaceControl*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IVMRDeinterlaceControl*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRDeinterlaceControl*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IVMRDeinterlaceControl*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRDeinterlaceControl*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IVMRDeinterlaceControl*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetNumberOfDeinterlaceModes" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lpVideoDescription">
                    <type>VMRVideoDesc*</type>
                </param>
                <param name="lpdwNumDeinterlaceModes">
                    <type>uint*</type>
                </param>
                <param name="lpDeinterlaceModes">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRDeinterlaceControl*, VMRVideoDesc*, uint*, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IVMRDeinterlaceControl*)Unsafe.AsPointer(ref this)</param>, <param name="lpVideoDescription">lpVideoDescription</param>, <param name="lpdwNumDeinterlaceModes">lpdwNumDeinterlaceModes</param>, <param name="lpDeinterlaceModes">lpDeinterlaceModes</param>);
        </code>
                </body>
            </function>
            <function name="GetDeinterlaceModeCaps" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lpDeinterlaceMode">
                    <type>Guid*</type>
                </param>
                <param name="lpVideoDescription">
                    <type>VMRVideoDesc*</type>
                </param>
                <param name="lpDeinterlaceCaps">
                    <type>VMRDeinterlaceCaps*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRDeinterlaceControl*, Guid*, VMRVideoDesc*, VMRDeinterlaceCaps*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IVMRDeinterlaceControl*)Unsafe.AsPointer(ref this)</param>, <param name="lpDeinterlaceMode">lpDeinterlaceMode</param>, <param name="lpVideoDescription">lpVideoDescription</param>, <param name="lpDeinterlaceCaps">lpDeinterlaceCaps</param>);
        </code>
                </body>
            </function>
            <function name="GetDeinterlaceMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwStreamID">
                    <type>uint</type>
                </param>
                <param name="lpDeinterlaceMode">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRDeinterlaceControl*, uint, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IVMRDeinterlaceControl*)Unsafe.AsPointer(ref this)</param>, <param name="dwStreamID">dwStreamID</param>, <param name="lpDeinterlaceMode">lpDeinterlaceMode</param>);
        </code>
                </body>
            </function>
            <function name="SetDeinterlaceMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwStreamID">
                    <type>uint</type>
                </param>
                <param name="lpDeinterlaceMode">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRDeinterlaceControl*, uint, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IVMRDeinterlaceControl*)Unsafe.AsPointer(ref this)</param>, <param name="dwStreamID">dwStreamID</param>, <param name="lpDeinterlaceMode">lpDeinterlaceMode</param>);
        </code>
                </body>
            </function>
            <function name="GetDeinterlacePrefs" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lpdwDeinterlacePrefs">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRDeinterlaceControl*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IVMRDeinterlaceControl*)Unsafe.AsPointer(ref this)</param>, <param name="lpdwDeinterlacePrefs">lpdwDeinterlacePrefs</param>);
        </code>
                </body>
            </function>
            <function name="SetDeinterlacePrefs" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwDeinterlacePrefs">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRDeinterlaceControl*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IVMRDeinterlaceControl*)Unsafe.AsPointer(ref this)</param>, <param name="dwDeinterlacePrefs">dwDeinterlacePrefs</param>);
        </code>
                </body>
            </function>
            <function name="GetActualDeinterlaceMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwStreamID">
                    <type>uint</type>
                </param>
                <param name="lpDeinterlaceMode">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRDeinterlaceControl*, uint, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IVMRDeinterlaceControl*)Unsafe.AsPointer(ref this)</param>, <param name="dwStreamID">dwStreamID</param>, <param name="lpDeinterlaceMode">lpDeinterlaceMode</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
