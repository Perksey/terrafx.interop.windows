<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/strmif.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IAMVideoCompression" access="public" native="struct IAMVideoCompression : IUnknown" uuid="c6e13343-30ac-11d0-a18c-00a0c9118956" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoCompression*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IAMVideoCompression*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoCompression*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IAMVideoCompression*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoCompression*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IAMVideoCompression*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="put_KeyFrameRate" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="KeyFrameRate">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoCompression*, int, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IAMVideoCompression*)Unsafe.AsPointer(ref this)</param>, <param name="KeyFrameRate">KeyFrameRate</param>);
        </code>
                </body>
            </function>
            <function name="get_KeyFrameRate" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pKeyFrameRate">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoCompression*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IAMVideoCompression*)Unsafe.AsPointer(ref this)</param>, <param name="pKeyFrameRate">pKeyFrameRate</param>);
        </code>
                </body>
            </function>
            <function name="put_PFramesPerKeyFrame" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="PFramesPerKeyFrame">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoCompression*, int, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IAMVideoCompression*)Unsafe.AsPointer(ref this)</param>, <param name="PFramesPerKeyFrame">PFramesPerKeyFrame</param>);
        </code>
                </body>
            </function>
            <function name="get_PFramesPerKeyFrame" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pPFramesPerKeyFrame">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoCompression*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IAMVideoCompression*)Unsafe.AsPointer(ref this)</param>, <param name="pPFramesPerKeyFrame">pPFramesPerKeyFrame</param>);
        </code>
                </body>
            </function>
            <function name="put_Quality" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Quality">
                    <type>double</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoCompression*, double, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IAMVideoCompression*)Unsafe.AsPointer(ref this)</param>, <param name="Quality">Quality</param>);
        </code>
                </body>
            </function>
            <function name="get_Quality" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pQuality">
                    <type>double*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoCompression*, double*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IAMVideoCompression*)Unsafe.AsPointer(ref this)</param>, <param name="pQuality">pQuality</param>);
        </code>
                </body>
            </function>
            <function name="put_WindowSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="WindowSize">
                    <type>ulong</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoCompression*, ulong, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IAMVideoCompression*)Unsafe.AsPointer(ref this)</param>, <param name="WindowSize">WindowSize</param>);
        </code>
                </body>
            </function>
            <function name="get_WindowSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pWindowSize">
                    <type>ulong*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoCompression*, ulong*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IAMVideoCompression*)Unsafe.AsPointer(ref this)</param>, <param name="pWindowSize">pWindowSize</param>);
        </code>
                </body>
            </function>
            <function name="GetInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pszVersion">
                    <type>ushort*</type>
                </param>
                <param name="pcbVersion">
                    <type>int*</type>
                </param>
                <param name="pszDescription">
                    <type>ushort*</type>
                </param>
                <param name="pcbDescription">
                    <type>int*</type>
                </param>
                <param name="pDefaultKeyFrameRate">
                    <type>int*</type>
                </param>
                <param name="pDefaultPFramesPerKey">
                    <type>int*</type>
                </param>
                <param name="pDefaultQuality">
                    <type>double*</type>
                </param>
                <param name="pCapabilities">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoCompression*, ushort*, int*, ushort*, int*, int*, int*, double*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IAMVideoCompression*)Unsafe.AsPointer(ref this)</param>, <param name="pszVersion">pszVersion</param>, <param name="pcbVersion">pcbVersion</param>, <param name="pszDescription">pszDescription</param>, <param name="pcbDescription">pcbDescription</param>, <param name="pDefaultKeyFrameRate">pDefaultKeyFrameRate</param>, <param name="pDefaultPFramesPerKey">pDefaultPFramesPerKey</param>, <param name="pDefaultQuality">pDefaultQuality</param>, <param name="pCapabilities">pCapabilities</param>);
        </code>
                </body>
            </function>
            <function name="OverrideKeyFrame" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="FrameNumber">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoCompression*, int, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IAMVideoCompression*)Unsafe.AsPointer(ref this)</param>, <param name="FrameNumber">FrameNumber</param>);
        </code>
                </body>
            </function>
            <function name="OverrideFrameSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="FrameNumber">
                    <type>int</type>
                </param>
                <param name="Size">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoCompression*, int, int, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IAMVideoCompression*)Unsafe.AsPointer(ref this)</param>, <param name="FrameNumber">FrameNumber</param>, <param name="Size">Size</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
