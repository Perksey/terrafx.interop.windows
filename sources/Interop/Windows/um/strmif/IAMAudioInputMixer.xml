<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/strmif.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IAMAudioInputMixer" access="public" native="struct IAMAudioInputMixer : IUnknown" uuid="54c39221-8380-11d0-b3f0-00aa003761c5" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="put_Enable" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fEnable">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, int, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>, <param name="fEnable">fEnable</param>);
        </code>
                </body>
            </function>
            <function name="get_Enable" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pfEnable">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>, <param name="pfEnable">pfEnable</param>);
        </code>
                </body>
            </function>
            <function name="put_Mono" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fMono">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, int, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>, <param name="fMono">fMono</param>);
        </code>
                </body>
            </function>
            <function name="get_Mono" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pfMono">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>, <param name="pfMono">pfMono</param>);
        </code>
                </body>
            </function>
            <function name="put_MixLevel" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Level">
                    <type>double</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, double, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>, <param name="Level">Level</param>);
        </code>
                </body>
            </function>
            <function name="get_MixLevel" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pLevel">
                    <type>double*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, double*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>, <param name="pLevel">pLevel</param>);
        </code>
                </body>
            </function>
            <function name="put_Pan" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Pan">
                    <type>double</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, double, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>, <param name="Pan">Pan</param>);
        </code>
                </body>
            </function>
            <function name="get_Pan" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pPan">
                    <type>double*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, double*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>, <param name="pPan">pPan</param>);
        </code>
                </body>
            </function>
            <function name="put_Loudness" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fLoudness">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, int, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>, <param name="fLoudness">fLoudness</param>);
        </code>
                </body>
            </function>
            <function name="get_Loudness" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pfLoudness">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>, <param name="pfLoudness">pfLoudness</param>);
        </code>
                </body>
            </function>
            <function name="put_Treble" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Treble">
                    <type>double</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, double, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>, <param name="Treble">Treble</param>);
        </code>
                </body>
            </function>
            <function name="get_Treble" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pTreble">
                    <type>double*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, double*, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>, <param name="pTreble">pTreble</param>);
        </code>
                </body>
            </function>
            <function name="get_TrebleRange" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pRange">
                    <type>double*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, double*, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>, <param name="pRange">pRange</param>);
        </code>
                </body>
            </function>
            <function name="put_Bass" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Bass">
                    <type>double</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, double, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>, <param name="Bass">Bass</param>);
        </code>
                </body>
            </function>
            <function name="get_Bass" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pBass">
                    <type>double*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, double*, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>, <param name="pBass">pBass</param>);
        </code>
                </body>
            </function>
            <function name="get_BassRange" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pRange">
                    <type>double*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMAudioInputMixer*, double*, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(IAMAudioInputMixer*)Unsafe.AsPointer(ref this)</param>, <param name="pRange">pRange</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
