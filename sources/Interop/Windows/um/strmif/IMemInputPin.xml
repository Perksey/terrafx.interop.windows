<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/strmif.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMemInputPin" access="public" native="struct IMemInputPin : IUnknown" uuid="56a8689d-0ad4-11ce-b03a-0020af0ba770" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMemInputPin*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMemInputPin*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMemInputPin*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMemInputPin*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMemInputPin*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMemInputPin*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetAllocator" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppAllocator">
                    <type>IMemAllocator**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMemInputPin*, IMemAllocator**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMemInputPin*)Unsafe.AsPointer(ref this)</param>, <param name="ppAllocator">ppAllocator</param>);
        </code>
                </body>
            </function>
            <function name="NotifyAllocator" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pAllocator">
                    <type>IMemAllocator*</type>
                </param>
                <param name="bReadOnly">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMemInputPin*, IMemAllocator*, int, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMemInputPin*)Unsafe.AsPointer(ref this)</param>, <param name="pAllocator">pAllocator</param>, <param name="bReadOnly">bReadOnly</param>);
        </code>
                </body>
            </function>
            <function name="GetAllocatorRequirements" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pProps">
                    <type>ALLOCATOR_PROPERTIES*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMemInputPin*, ALLOCATOR_PROPERTIES*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMemInputPin*)Unsafe.AsPointer(ref this)</param>, <param name="pProps">pProps</param>);
        </code>
                </body>
            </function>
            <function name="Receive" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pSample">
                    <type>IMediaSample*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMemInputPin*, IMediaSample*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMemInputPin*)Unsafe.AsPointer(ref this)</param>, <param name="pSample">pSample</param>);
        </code>
                </body>
            </function>
            <function name="ReceiveMultiple" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pSamples">
                    <type>IMediaSample**</type>
                </param>
                <param name="nSamples">
                    <type>int</type>
                </param>
                <param name="nSamplesProcessed">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMemInputPin*, IMediaSample**, int, int*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMemInputPin*)Unsafe.AsPointer(ref this)</param>, <param name="pSamples">pSamples</param>, <param name="nSamples">nSamples</param>, <param name="nSamplesProcessed">nSamplesProcessed</param>);
        </code>
                </body>
            </function>
            <function name="ReceiveCanBlock" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMemInputPin*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IMemInputPin*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
