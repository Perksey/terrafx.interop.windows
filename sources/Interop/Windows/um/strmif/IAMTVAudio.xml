<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/strmif.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IAMTVAudio" access="public" native="struct IAMTVAudio : IUnknown" uuid="83ec1c30-23d1-11d1-99e6-00a0c9560266" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMTVAudio*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IAMTVAudio*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMTVAudio*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IAMTVAudio*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMTVAudio*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IAMTVAudio*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetHardwareSupportedTVAudioModes" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="plModes">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMTVAudio*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IAMTVAudio*)Unsafe.AsPointer(ref this)</param>, <param name="plModes">plModes</param>);
        </code>
                </body>
            </function>
            <function name="GetAvailableTVAudioModes" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="plModes">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMTVAudio*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IAMTVAudio*)Unsafe.AsPointer(ref this)</param>, <param name="plModes">plModes</param>);
        </code>
                </body>
            </function>
            <function name="get_TVAudioMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="plMode">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMTVAudio*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IAMTVAudio*)Unsafe.AsPointer(ref this)</param>, <param name="plMode">plMode</param>);
        </code>
                </body>
            </function>
            <function name="put_TVAudioMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lMode">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMTVAudio*, int, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IAMTVAudio*)Unsafe.AsPointer(ref this)</param>, <param name="lMode">lMode</param>);
        </code>
                </body>
            </function>
            <function name="RegisterNotificationCallBack" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pNotify">
                    <type>IAMTunerNotification*</type>
                </param>
                <param name="lEvents">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMTVAudio*, IAMTunerNotification*, int, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IAMTVAudio*)Unsafe.AsPointer(ref this)</param>, <param name="pNotify">pNotify</param>, <param name="lEvents">lEvents</param>);
        </code>
                </body>
            </function>
            <function name="UnRegisterNotificationCallBack" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pNotify">
                    <type>IAMTunerNotification*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMTVAudio*, IAMTunerNotification*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IAMTVAudio*)Unsafe.AsPointer(ref this)</param>, <param name="pNotify">pNotify</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
