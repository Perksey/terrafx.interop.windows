<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/strmif.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMediaSample" access="public" native="struct IMediaSample : IUnknown" uuid="56a8689a-0ad4-11ce-b03a-0020af0ba770" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetPointer" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppBuffer">
                    <type>byte**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, byte**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>, <param name="ppBuffer">ppBuffer</param>);
        </code>
                </body>
            </function>
            <function name="GetSize" access="public" unsafe="true">
                <type native="long">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetTime" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pTimeStart">
                    <type>long*</type>
                </param>
                <param name="pTimeEnd">
                    <type>long*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, long*, long*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>, <param name="pTimeStart">pTimeStart</param>, <param name="pTimeEnd">pTimeEnd</param>);
        </code>
                </body>
            </function>
            <function name="SetTime" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pTimeStart">
                    <type>long*</type>
                </param>
                <param name="pTimeEnd">
                    <type>long*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, long*, long*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>, <param name="pTimeStart">pTimeStart</param>, <param name="pTimeEnd">pTimeEnd</param>);
        </code>
                </body>
            </function>
            <function name="IsSyncPoint" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetSyncPoint" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="bIsSyncPoint">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, int, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>, <param name="bIsSyncPoint">bIsSyncPoint</param>);
        </code>
                </body>
            </function>
            <function name="IsPreroll" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetPreroll" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="bIsPreroll">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, int, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>, <param name="bIsPreroll">bIsPreroll</param>);
        </code>
                </body>
            </function>
            <function name="GetActualDataLength" access="public" unsafe="true">
                <type native="long">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetActualDataLength" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="__MIDL__IMediaSample0000">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, int, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>, <param name="__MIDL__IMediaSample0000">__MIDL__IMediaSample0000</param>);
        </code>
                </body>
            </function>
            <function name="GetMediaType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppMediaType">
                    <type>AM_MEDIA_TYPE**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, AM_MEDIA_TYPE**, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>, <param name="ppMediaType">ppMediaType</param>);
        </code>
                </body>
            </function>
            <function name="SetMediaType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pMediaType">
                    <type>AM_MEDIA_TYPE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, AM_MEDIA_TYPE*, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>, <param name="pMediaType">pMediaType</param>);
        </code>
                </body>
            </function>
            <function name="IsDiscontinuity" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetDiscontinuity" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="bDiscontinuity">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, int, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>, <param name="bDiscontinuity">bDiscontinuity</param>);
        </code>
                </body>
            </function>
            <function name="GetMediaTime" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pTimeStart">
                    <type>long*</type>
                </param>
                <param name="pTimeEnd">
                    <type>long*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, long*, long*, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>, <param name="pTimeStart">pTimeStart</param>, <param name="pTimeEnd">pTimeEnd</param>);
        </code>
                </body>
            </function>
            <function name="SetMediaTime" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pTimeStart">
                    <type>long*</type>
                </param>
                <param name="pTimeEnd">
                    <type>long*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMediaSample*, long*, long*, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(IMediaSample*)Unsafe.AsPointer(ref this)</param>, <param name="pTimeStart">pTimeStart</param>, <param name="pTimeEnd">pTimeEnd</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
