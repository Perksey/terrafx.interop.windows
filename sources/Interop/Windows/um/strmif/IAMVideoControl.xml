<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/strmif.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IAMVideoControl" access="public" native="struct IAMVideoControl : IUnknown" uuid="6a2e0670-28e4-11d0-a18c-00a0c9118956" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoControl*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IAMVideoControl*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoControl*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IAMVideoControl*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoControl*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IAMVideoControl*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetCaps" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pPin">
                    <type>IPin*</type>
                </param>
                <param name="pCapsFlags">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoControl*, IPin*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IAMVideoControl*)Unsafe.AsPointer(ref this)</param>, <param name="pPin">pPin</param>, <param name="pCapsFlags">pCapsFlags</param>);
        </code>
                </body>
            </function>
            <function name="SetMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pPin">
                    <type>IPin*</type>
                </param>
                <param name="Mode">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoControl*, IPin*, int, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IAMVideoControl*)Unsafe.AsPointer(ref this)</param>, <param name="pPin">pPin</param>, <param name="Mode">Mode</param>);
        </code>
                </body>
            </function>
            <function name="GetMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pPin">
                    <type>IPin*</type>
                </param>
                <param name="Mode">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoControl*, IPin*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IAMVideoControl*)Unsafe.AsPointer(ref this)</param>, <param name="pPin">pPin</param>, <param name="Mode">Mode</param>);
        </code>
                </body>
            </function>
            <function name="GetCurrentActualFrameRate" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pPin">
                    <type>IPin*</type>
                </param>
                <param name="ActualFrameRate">
                    <type>long*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoControl*, IPin*, long*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IAMVideoControl*)Unsafe.AsPointer(ref this)</param>, <param name="pPin">pPin</param>, <param name="ActualFrameRate">ActualFrameRate</param>);
        </code>
                </body>
            </function>
            <function name="GetMaxAvailableFrameRate" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pPin">
                    <type>IPin*</type>
                </param>
                <param name="iIndex">
                    <type>int</type>
                </param>
                <param name="Dimensions">
                    <type>SIZE</type>
                </param>
                <param name="MaxAvailableFrameRate">
                    <type>long*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoControl*, IPin*, int, SIZE, long*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IAMVideoControl*)Unsafe.AsPointer(ref this)</param>, <param name="pPin">pPin</param>, <param name="iIndex">iIndex</param>, <param name="Dimensions">Dimensions</param>, <param name="MaxAvailableFrameRate">MaxAvailableFrameRate</param>);
        </code>
                </body>
            </function>
            <function name="GetFrameRateList" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pPin">
                    <type>IPin*</type>
                </param>
                <param name="iIndex">
                    <type>int</type>
                </param>
                <param name="Dimensions">
                    <type>SIZE</type>
                </param>
                <param name="ListSize">
                    <type>int*</type>
                </param>
                <param name="FrameRates">
                    <type>long**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAMVideoControl*, IPin*, int, SIZE, int*, long**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IAMVideoControl*)Unsafe.AsPointer(ref this)</param>, <param name="pPin">pPin</param>, <param name="iIndex">iIndex</param>, <param name="Dimensions">Dimensions</param>, <param name="ListSize">ListSize</param>, <param name="FrameRates">FrameRates</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
