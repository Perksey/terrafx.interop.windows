<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/strmif.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDDrawExclModeVideoCallback" access="public" native="struct IDDrawExclModeVideoCallback : IUnknown" uuid="913c24a0-20ab-11d2-9038-00a0c9697298" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDDrawExclModeVideoCallback*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDDrawExclModeVideoCallback*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDDrawExclModeVideoCallback*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDDrawExclModeVideoCallback*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDDrawExclModeVideoCallback*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDDrawExclModeVideoCallback*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="OnUpdateOverlay" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="bBefore">
                    <type>int</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="bOldVisible">
                    <type>int</type>
                </param>
                <param name="prcOldSrc">
                    <type>RECT*</type>
                </param>
                <param name="prcOldDest">
                    <type>RECT*</type>
                </param>
                <param name="bNewVisible">
                    <type>int</type>
                </param>
                <param name="prcNewSrc">
                    <type>RECT*</type>
                </param>
                <param name="prcNewDest">
                    <type>RECT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDDrawExclModeVideoCallback*, int, uint, int, RECT*, RECT*, int, RECT*, RECT*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDDrawExclModeVideoCallback*)Unsafe.AsPointer(ref this)</param>, <param name="bBefore">bBefore</param>, <param name="dwFlags">dwFlags</param>, <param name="bOldVisible">bOldVisible</param>, <param name="prcOldSrc">prcOldSrc</param>, <param name="prcOldDest">prcOldDest</param>, <param name="bNewVisible">bNewVisible</param>, <param name="prcNewSrc">prcNewSrc</param>, <param name="prcNewDest">prcNewDest</param>);
        </code>
                </body>
            </function>
            <function name="OnUpdateColorKey" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pKey">
                    <type>COLORKEY*</type>
                </param>
                <param name="dwColor">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDDrawExclModeVideoCallback*, COLORKEY*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDDrawExclModeVideoCallback*)Unsafe.AsPointer(ref this)</param>, <param name="pKey">pKey</param>, <param name="dwColor">dwColor</param>);
        </code>
                </body>
            </function>
            <function name="OnUpdateSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwWidth">
                    <type>uint</type>
                </param>
                <param name="dwHeight">
                    <type>uint</type>
                </param>
                <param name="dwARWidth">
                    <type>uint</type>
                </param>
                <param name="dwARHeight">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDDrawExclModeVideoCallback*, uint, uint, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDDrawExclModeVideoCallback*)Unsafe.AsPointer(ref this)</param>, <param name="dwWidth">dwWidth</param>, <param name="dwHeight">dwHeight</param>, <param name="dwARWidth">dwARWidth</param>, <param name="dwARHeight">dwARHeight</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
