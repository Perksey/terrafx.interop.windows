<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/strmif.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IVMRWindowlessControl" access="public" native="struct IVMRWindowlessControl : IUnknown" uuid="0eb1088c-4dcd-46f0-878f-39dae86a51b7" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRWindowlessControl*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IVMRWindowlessControl*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRWindowlessControl*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IVMRWindowlessControl*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRWindowlessControl*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IVMRWindowlessControl*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetNativeVideoSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lpWidth">
                    <type>int*</type>
                </param>
                <param name="lpHeight">
                    <type>int*</type>
                </param>
                <param name="lpARWidth">
                    <type>int*</type>
                </param>
                <param name="lpARHeight">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRWindowlessControl*, int*, int*, int*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IVMRWindowlessControl*)Unsafe.AsPointer(ref this)</param>, <param name="lpWidth">lpWidth</param>, <param name="lpHeight">lpHeight</param>, <param name="lpARWidth">lpARWidth</param>, <param name="lpARHeight">lpARHeight</param>);
        </code>
                </body>
            </function>
            <function name="GetMinIdealVideoSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lpWidth">
                    <type>int*</type>
                </param>
                <param name="lpHeight">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRWindowlessControl*, int*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IVMRWindowlessControl*)Unsafe.AsPointer(ref this)</param>, <param name="lpWidth">lpWidth</param>, <param name="lpHeight">lpHeight</param>);
        </code>
                </body>
            </function>
            <function name="GetMaxIdealVideoSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lpWidth">
                    <type>int*</type>
                </param>
                <param name="lpHeight">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRWindowlessControl*, int*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IVMRWindowlessControl*)Unsafe.AsPointer(ref this)</param>, <param name="lpWidth">lpWidth</param>, <param name="lpHeight">lpHeight</param>);
        </code>
                </body>
            </function>
            <function name="SetVideoPosition" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lpSRCRect">
                    <type>RECT*</type>
                </param>
                <param name="lpDSTRect">
                    <type>RECT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRWindowlessControl*, RECT*, RECT*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IVMRWindowlessControl*)Unsafe.AsPointer(ref this)</param>, <param name="lpSRCRect">lpSRCRect</param>, <param name="lpDSTRect">lpDSTRect</param>);
        </code>
                </body>
            </function>
            <function name="GetVideoPosition" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lpSRCRect">
                    <type>RECT*</type>
                </param>
                <param name="lpDSTRect">
                    <type>RECT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRWindowlessControl*, RECT*, RECT*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IVMRWindowlessControl*)Unsafe.AsPointer(ref this)</param>, <param name="lpSRCRect">lpSRCRect</param>, <param name="lpDSTRect">lpDSTRect</param>);
        </code>
                </body>
            </function>
            <function name="GetAspectRatioMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lpAspectRatioMode">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRWindowlessControl*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IVMRWindowlessControl*)Unsafe.AsPointer(ref this)</param>, <param name="lpAspectRatioMode">lpAspectRatioMode</param>);
        </code>
                </body>
            </function>
            <function name="SetAspectRatioMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="AspectRatioMode">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRWindowlessControl*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IVMRWindowlessControl*)Unsafe.AsPointer(ref this)</param>, <param name="AspectRatioMode">AspectRatioMode</param>);
        </code>
                </body>
            </function>
            <function name="SetVideoClippingWindow" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="hwnd">
                    <type>IntPtr</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRWindowlessControl*, IntPtr, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IVMRWindowlessControl*)Unsafe.AsPointer(ref this)</param>, <param name="hwnd">hwnd</param>);
        </code>
                </body>
            </function>
            <function name="RepaintVideo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="hwnd">
                    <type>IntPtr</type>
                </param>
                <param name="hdc">
                    <type>IntPtr</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRWindowlessControl*, IntPtr, IntPtr, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IVMRWindowlessControl*)Unsafe.AsPointer(ref this)</param>, <param name="hwnd">hwnd</param>, <param name="hdc">hdc</param>);
        </code>
                </body>
            </function>
            <function name="DisplayModeChanged" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRWindowlessControl*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IVMRWindowlessControl*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetCurrentImage" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lpDib">
                    <type>byte**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRWindowlessControl*, byte**, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IVMRWindowlessControl*)Unsafe.AsPointer(ref this)</param>, <param name="lpDib">lpDib</param>);
        </code>
                </body>
            </function>
            <function name="SetBorderColor" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Clr">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRWindowlessControl*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IVMRWindowlessControl*)Unsafe.AsPointer(ref this)</param>, <param name="Clr">Clr</param>);
        </code>
                </body>
            </function>
            <function name="GetBorderColor" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lpClr">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRWindowlessControl*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IVMRWindowlessControl*)Unsafe.AsPointer(ref this)</param>, <param name="lpClr">lpClr</param>);
        </code>
                </body>
            </function>
            <function name="SetColorKey" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Clr">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRWindowlessControl*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(IVMRWindowlessControl*)Unsafe.AsPointer(ref this)</param>, <param name="Clr">Clr</param>);
        </code>
                </body>
            </function>
            <function name="GetColorKey" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lpClr">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IVMRWindowlessControl*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(IVMRWindowlessControl*)Unsafe.AsPointer(ref this)</param>, <param name="lpClr">lpClr</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
