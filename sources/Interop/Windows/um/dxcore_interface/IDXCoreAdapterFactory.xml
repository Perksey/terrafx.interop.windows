<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dxcore_interface.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDXCoreAdapterFactory" access="public" native="struct IDXCoreAdapterFactory : IUnknown" uuid="78ee5945-c36e-4b13-a669-005dd11c0f06" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXCoreAdapterFactory*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDXCoreAdapterFactory*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXCoreAdapterFactory*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDXCoreAdapterFactory*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXCoreAdapterFactory*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDXCoreAdapterFactory*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="CreateAdapterList" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="numAttributes">
                    <type>uint</type>
                </param>
                <param name="filterAttributes">
                    <type>Guid*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvAdapterList">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXCoreAdapterFactory*, uint, Guid*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDXCoreAdapterFactory*)Unsafe.AsPointer(ref this)</param>, <param name="numAttributes">numAttributes</param>, <param name="filterAttributes">filterAttributes</param>, <param name="riid">riid</param>, <param name="ppvAdapterList">ppvAdapterList</param>);
        </code>
                </body>
            </function>
            <function name="GetAdapterByLuid" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="adapterLUID">
                    <type>LUID*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvAdapter">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXCoreAdapterFactory*, LUID*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDXCoreAdapterFactory*)Unsafe.AsPointer(ref this)</param>, <param name="adapterLUID">adapterLUID</param>, <param name="riid">riid</param>, <param name="ppvAdapter">ppvAdapter</param>);
        </code>
                </body>
            </function>
            <function name="IsNotificationTypeSupported" access="public" unsafe="true">
                <type>bool</type>
                <param name="notificationType">
                    <type>DXCoreNotificationType</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXCoreAdapterFactory*, DXCoreNotificationType, byte&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDXCoreAdapterFactory*)Unsafe.AsPointer(ref this)</param>, <param name="notificationType">notificationType</param>) != 0;
        </code>
                </body>
            </function>
            <function name="RegisterEventNotification" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dxCoreObject">
                    <type>IUnknown*</type>
                </param>
                <param name="notificationType">
                    <type>DXCoreNotificationType</type>
                </param>
                <param name="callbackFunction">
                    <type>delegate* unmanaged&lt;DXCoreNotificationType, IUnknown*, void*, void&gt;</type>
                </param>
                <param name="callbackContext">
                    <type>void*</type>
                </param>
                <param name="eventCookie">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXCoreAdapterFactory*, IUnknown*, DXCoreNotificationType, delegate* unmanaged&lt;DXCoreNotificationType, IUnknown*, void*, void&gt;, void*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDXCoreAdapterFactory*)Unsafe.AsPointer(ref this)</param>, <param name="dxCoreObject">dxCoreObject</param>, <param name="notificationType">notificationType</param>, <param name="callbackFunction">callbackFunction</param>, <param name="callbackContext">callbackContext</param>, <param name="eventCookie">eventCookie</param>);
        </code>
                </body>
            </function>
            <function name="UnregisterEventNotification" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="eventCookie">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDXCoreAdapterFactory*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDXCoreAdapterFactory*)Unsafe.AsPointer(ref this)</param>, <param name="eventCookie">eventCookie</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
