<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d2d1.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ID2D1SolidColorBrush" access="public" native="struct ID2D1SolidColorBrush : ID2D1Brush" uuid="2cd906a9-12e2-11dc-9fed-001143a055f9" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1SolidColorBrush*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ID2D1SolidColorBrush*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1SolidColorBrush*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ID2D1SolidColorBrush*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1SolidColorBrush*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ID2D1SolidColorBrush*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetFactory" access="public" unsafe="true">
                <type>void</type>
                <param name="factory">
                    <type>ID2D1Factory**</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1SolidColorBrush*, ID2D1Factory**, void&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ID2D1SolidColorBrush*)Unsafe.AsPointer(ref this)</param>, <param name="factory">factory</param>);
        </code>
                </body>
            </function>
            <function name="SetOpacity" access="public" unsafe="true">
                <type>void</type>
                <param name="opacity">
                    <type>float</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1SolidColorBrush*, float, void&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ID2D1SolidColorBrush*)Unsafe.AsPointer(ref this)</param>, <param name="opacity">opacity</param>);
        </code>
                </body>
            </function>
            <function name="SetTransform" access="public" unsafe="true">
                <type>void</type>
                <param name="transform">
                    <type>D2D_MATRIX_3X2_F*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1SolidColorBrush*, D2D_MATRIX_3X2_F*, void&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ID2D1SolidColorBrush*)Unsafe.AsPointer(ref this)</param>, <param name="transform">transform</param>);
        </code>
                </body>
            </function>
            <function name="GetOpacity" access="public" unsafe="true">
                <type native="FLOAT">float</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1SolidColorBrush*, float&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ID2D1SolidColorBrush*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetTransform" access="public" unsafe="true">
                <type>void</type>
                <param name="transform">
                    <type>D2D_MATRIX_3X2_F*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1SolidColorBrush*, D2D_MATRIX_3X2_F*, void&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ID2D1SolidColorBrush*)Unsafe.AsPointer(ref this)</param>, <param name="transform">transform</param>);
        </code>
                </body>
            </function>
            <function name="SetColor" access="public" unsafe="true">
                <type>void</type>
                <param name="color">
                    <type>DXGI_RGBA*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1SolidColorBrush*, DXGI_RGBA*, void&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ID2D1SolidColorBrush*)Unsafe.AsPointer(ref this)</param>, <param name="color">color</param>);
        </code>
                </body>
            </function>
            <function name="GetColor" access="public" unsafe="true">
                <type native="D2D1_COLOR_F">DXGI_RGBA</type>
                <body>
                    <code>
                        <fixup type="*result">DXGI_RGBA</fixup> result;
        return *((delegate* unmanaged&lt;ID2D1SolidColorBrush*, DXGI_RGBA*, DXGI_RGBA*&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ID2D1SolidColorBrush*)Unsafe.AsPointer(ref this)</param><param special="retFixup">, &amp;result</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
