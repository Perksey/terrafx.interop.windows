<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/MSAAText.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ITextStoreACPSinkEx" access="public" native="struct ITextStoreACPSinkEx : ITextStoreACPSink" uuid="2bdf9464-41e2-43e3-950c-a6865ba25cd4" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITextStoreACPSinkEx*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ITextStoreACPSinkEx*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITextStoreACPSinkEx*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ITextStoreACPSinkEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITextStoreACPSinkEx*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ITextStoreACPSinkEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="OnTextChange" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pChange">
                    <type>TS_TEXTCHANGE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITextStoreACPSinkEx*, uint, TS_TEXTCHANGE*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ITextStoreACPSinkEx*)Unsafe.AsPointer(ref this)</param>, <param name="dwFlags">dwFlags</param>, <param name="pChange">pChange</param>);
        </code>
                </body>
            </function>
            <function name="OnSelectionChange" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITextStoreACPSinkEx*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ITextStoreACPSinkEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="OnLayoutChange" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lcode">
                    <type>TsLayoutCode</type>
                </param>
                <param name="vcView">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITextStoreACPSinkEx*, TsLayoutCode, uint, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ITextStoreACPSinkEx*)Unsafe.AsPointer(ref this)</param>, <param name="lcode">lcode</param>, <param name="vcView">vcView</param>);
        </code>
                </body>
            </function>
            <function name="OnStatusChange" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITextStoreACPSinkEx*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ITextStoreACPSinkEx*)Unsafe.AsPointer(ref this)</param>, <param name="dwFlags">dwFlags</param>);
        </code>
                </body>
            </function>
            <function name="OnAttrsChange" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="acpStart">
                    <type>int</type>
                </param>
                <param name="acpEnd">
                    <type>int</type>
                </param>
                <param name="cAttrs">
                    <type>uint</type>
                </param>
                <param name="paAttrs">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITextStoreACPSinkEx*, int, int, uint, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ITextStoreACPSinkEx*)Unsafe.AsPointer(ref this)</param>, <param name="acpStart">acpStart</param>, <param name="acpEnd">acpEnd</param>, <param name="cAttrs">cAttrs</param>, <param name="paAttrs">paAttrs</param>);
        </code>
                </body>
            </function>
            <function name="OnLockGranted" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwLockFlags">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITextStoreACPSinkEx*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ITextStoreACPSinkEx*)Unsafe.AsPointer(ref this)</param>, <param name="dwLockFlags">dwLockFlags</param>);
        </code>
                </body>
            </function>
            <function name="OnStartEditTransaction" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITextStoreACPSinkEx*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ITextStoreACPSinkEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="OnEndEditTransaction" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITextStoreACPSinkEx*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ITextStoreACPSinkEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="OnDisconnect" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITextStoreACPSinkEx*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ITextStoreACPSinkEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
