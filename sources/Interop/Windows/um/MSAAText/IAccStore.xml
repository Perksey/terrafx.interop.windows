<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/MSAAText.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IAccStore" access="public" native="struct IAccStore : IUnknown" uuid="e2cd4a63-2b72-4d48-b739-95e4765195ba" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAccStore*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IAccStore*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAccStore*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IAccStore*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAccStore*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IAccStore*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Register" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="punk">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAccStore*, Guid*, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IAccStore*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="punk">punk</param>);
        </code>
                </body>
            </function>
            <function name="Unregister" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="punk">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAccStore*, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IAccStore*)Unsafe.AsPointer(ref this)</param>, <param name="punk">punk</param>);
        </code>
                </body>
            </function>
            <function name="GetDocuments" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="enumUnknown">
                    <type>IEnumUnknown**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAccStore*, IEnumUnknown**, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IAccStore*)Unsafe.AsPointer(ref this)</param>, <param name="enumUnknown">enumUnknown</param>);
        </code>
                </body>
            </function>
            <function name="LookupByHWND" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="hWnd">
                    <type>IntPtr</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppunk">
                    <type>IUnknown**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAccStore*, IntPtr, Guid*, IUnknown**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IAccStore*)Unsafe.AsPointer(ref this)</param>, <param name="hWnd">hWnd</param>, <param name="riid">riid</param>, <param name="ppunk">ppunk</param>);
        </code>
                </body>
            </function>
            <function name="LookupByPoint" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pt">
                    <type>POINT</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppunk">
                    <type>IUnknown**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAccStore*, POINT, Guid*, IUnknown**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IAccStore*)Unsafe.AsPointer(ref this)</param>, <param name="pt">pt</param>, <param name="riid">riid</param>, <param name="ppunk">ppunk</param>);
        </code>
                </body>
            </function>
            <function name="OnDocumentFocus" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="punk">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAccStore*, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IAccStore*)Unsafe.AsPointer(ref this)</param>, <param name="punk">punk</param>);
        </code>
                </body>
            </function>
            <function name="GetFocused" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppunk">
                    <type>IUnknown**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAccStore*, Guid*, IUnknown**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IAccStore*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppunk">ppunk</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
