<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d3d12.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ID3D12Resource2" access="public" native="struct ID3D12Resource2 : ID3D12Resource1" uuid="be36ec3b-ea85-4aeb-a45a-e9d76404a495" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Resource2*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ID3D12Resource2*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Resource2*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ID3D12Resource2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Resource2*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ID3D12Resource2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetPrivateData" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="guid">
                    <type>Guid*</type>
                </param>
                <param name="pDataSize">
                    <type>uint*</type>
                </param>
                <param name="pData">
                    <type>void*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Resource2*, Guid*, uint*, void*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ID3D12Resource2*)Unsafe.AsPointer(ref this)</param>, <param name="guid">guid</param>, <param name="pDataSize">pDataSize</param>, <param name="pData">pData</param>);
        </code>
                </body>
            </function>
            <function name="SetPrivateData" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="guid">
                    <type>Guid*</type>
                </param>
                <param name="DataSize">
                    <type>uint</type>
                </param>
                <param name="pData">
                    <type>void*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Resource2*, Guid*, uint, void*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ID3D12Resource2*)Unsafe.AsPointer(ref this)</param>, <param name="guid">guid</param>, <param name="DataSize">DataSize</param>, <param name="pData">pData</param>);
        </code>
                </body>
            </function>
            <function name="SetPrivateDataInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="guid">
                    <type>Guid*</type>
                </param>
                <param name="pData">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Resource2*, Guid*, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ID3D12Resource2*)Unsafe.AsPointer(ref this)</param>, <param name="guid">guid</param>, <param name="pData">pData</param>);
        </code>
                </body>
            </function>
            <function name="SetName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Name">
                    <type>ushort*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Resource2*, ushort*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ID3D12Resource2*)Unsafe.AsPointer(ref this)</param>, <param name="Name">Name</param>);
        </code>
                </body>
            </function>
            <function name="GetDevice" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvDevice">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Resource2*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ID3D12Resource2*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvDevice">ppvDevice</param>);
        </code>
                </body>
            </function>
            <function name="Map" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Subresource">
                    <type>uint</type>
                </param>
                <param name="pReadRange">
                    <type>D3D12_RANGE*</type>
                </param>
                <param name="ppData">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Resource2*, uint, D3D12_RANGE*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ID3D12Resource2*)Unsafe.AsPointer(ref this)</param>, <param name="Subresource">Subresource</param>, <param name="pReadRange">pReadRange</param>, <param name="ppData">ppData</param>);
        </code>
                </body>
            </function>
            <function name="Unmap" access="public" unsafe="true">
                <type>void</type>
                <param name="Subresource">
                    <type>uint</type>
                </param>
                <param name="pWrittenRange">
                    <type>D3D12_RANGE*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID3D12Resource2*, uint, D3D12_RANGE*, void&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ID3D12Resource2*)Unsafe.AsPointer(ref this)</param>, <param name="Subresource">Subresource</param>, <param name="pWrittenRange">pWrittenRange</param>);
        </code>
                </body>
            </function>
            <function name="GetDesc" access="public" unsafe="true">
                <type>D3D12_RESOURCE_DESC</type>
                <body>
                    <code>
                        <fixup type="*result">D3D12_RESOURCE_DESC</fixup> result;
        return *((delegate* unmanaged&lt;ID3D12Resource2*, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_DESC*&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ID3D12Resource2*)Unsafe.AsPointer(ref this)</param><param special="retFixup">, &amp;result</param>);
        </code>
                </body>
            </function>
            <function name="GetGPUVirtualAddress" access="public" unsafe="true">
                <type native="D3D12_GPU_VIRTUAL_ADDRESS">ulong</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Resource2*, ulong&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ID3D12Resource2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="WriteToSubresource" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="DstSubresource">
                    <type>uint</type>
                </param>
                <param name="pDstBox">
                    <type>D3D12_BOX*</type>
                </param>
                <param name="pSrcData">
                    <type>void*</type>
                </param>
                <param name="SrcRowPitch">
                    <type>uint</type>
                </param>
                <param name="SrcDepthPitch">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Resource2*, uint, D3D12_BOX*, void*, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ID3D12Resource2*)Unsafe.AsPointer(ref this)</param>, <param name="DstSubresource">DstSubresource</param>, <param name="pDstBox">pDstBox</param>, <param name="pSrcData">pSrcData</param>, <param name="SrcRowPitch">SrcRowPitch</param>, <param name="SrcDepthPitch">SrcDepthPitch</param>);
        </code>
                </body>
            </function>
            <function name="ReadFromSubresource" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDstData">
                    <type>void*</type>
                </param>
                <param name="DstRowPitch">
                    <type>uint</type>
                </param>
                <param name="DstDepthPitch">
                    <type>uint</type>
                </param>
                <param name="SrcSubresource">
                    <type>uint</type>
                </param>
                <param name="pSrcBox">
                    <type>D3D12_BOX*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Resource2*, void*, uint, uint, uint, D3D12_BOX*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(ID3D12Resource2*)Unsafe.AsPointer(ref this)</param>, <param name="pDstData">pDstData</param>, <param name="DstRowPitch">DstRowPitch</param>, <param name="DstDepthPitch">DstDepthPitch</param>, <param name="SrcSubresource">SrcSubresource</param>, <param name="pSrcBox">pSrcBox</param>);
        </code>
                </body>
            </function>
            <function name="GetHeapProperties" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pHeapProperties">
                    <type>D3D12_HEAP_PROPERTIES*</type>
                </param>
                <param name="pHeapFlags">
                    <type>D3D12_HEAP_FLAGS*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Resource2*, D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS*, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(ID3D12Resource2*)Unsafe.AsPointer(ref this)</param>, <param name="pHeapProperties">pHeapProperties</param>, <param name="pHeapFlags">pHeapFlags</param>);
        </code>
                </body>
            </function>
            <function name="GetProtectedResourceSession" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppProtectedSession">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Resource2*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(ID3D12Resource2*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppProtectedSession">ppProtectedSession</param>);
        </code>
                </body>
            </function>
            <function name="GetDesc1" access="public" unsafe="true">
                <type>D3D12_RESOURCE_DESC1</type>
                <body>
                    <code>
                        <fixup type="*result">D3D12_RESOURCE_DESC1</fixup> result;
        return *((delegate* unmanaged&lt;ID3D12Resource2*, D3D12_RESOURCE_DESC1*, D3D12_RESOURCE_DESC1*&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(ID3D12Resource2*)Unsafe.AsPointer(ref this)</param><param special="retFixup">, &amp;result</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
