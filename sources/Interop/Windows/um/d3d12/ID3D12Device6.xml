<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d3d12.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ID3D12Device6" access="public" native="struct ID3D12Device6 : ID3D12Device5" uuid="c70b221b-40e4-4a17-89af-025a0727a6dc" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetPrivateData" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="guid">
                    <type>Guid*</type>
                </param>
                <param name="pDataSize">
                    <type>uint*</type>
                </param>
                <param name="pData">
                    <type>void*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, Guid*, uint*, void*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="guid">guid</param>, <param name="pDataSize">pDataSize</param>, <param name="pData">pData</param>);
        </code>
                </body>
            </function>
            <function name="SetPrivateData" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="guid">
                    <type>Guid*</type>
                </param>
                <param name="DataSize">
                    <type>uint</type>
                </param>
                <param name="pData">
                    <type>void*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, Guid*, uint, void*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="guid">guid</param>, <param name="DataSize">DataSize</param>, <param name="pData">pData</param>);
        </code>
                </body>
            </function>
            <function name="SetPrivateDataInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="guid">
                    <type>Guid*</type>
                </param>
                <param name="pData">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, Guid*, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="guid">guid</param>, <param name="pData">pData</param>);
        </code>
                </body>
            </function>
            <function name="SetName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Name">
                    <type>ushort*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, ushort*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="Name">Name</param>);
        </code>
                </body>
            </function>
            <function name="GetNodeCount" access="public" unsafe="true">
                <type native="UINT">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, uint&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="CreateCommandQueue" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDesc">
                    <type>D3D12_COMMAND_QUEUE_DESC*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppCommandQueue">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_COMMAND_QUEUE_DESC*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>, <param name="riid">riid</param>, <param name="ppCommandQueue">ppCommandQueue</param>);
        </code>
                </body>
            </function>
            <function name="CreateCommandAllocator" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="type">
                    <type>D3D12_COMMAND_LIST_TYPE</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppCommandAllocator">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_COMMAND_LIST_TYPE, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="type">type</param>, <param name="riid">riid</param>, <param name="ppCommandAllocator">ppCommandAllocator</param>);
        </code>
                </body>
            </function>
            <function name="CreateGraphicsPipelineState" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDesc">
                    <type>D3D12_GRAPHICS_PIPELINE_STATE_DESC*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppPipelineState">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_GRAPHICS_PIPELINE_STATE_DESC*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>, <param name="riid">riid</param>, <param name="ppPipelineState">ppPipelineState</param>);
        </code>
                </body>
            </function>
            <function name="CreateComputePipelineState" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDesc">
                    <type>D3D12_COMPUTE_PIPELINE_STATE_DESC*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppPipelineState">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_COMPUTE_PIPELINE_STATE_DESC*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>, <param name="riid">riid</param>, <param name="ppPipelineState">ppPipelineState</param>);
        </code>
                </body>
            </function>
            <function name="CreateCommandList" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="nodeMask">
                    <type>uint</type>
                </param>
                <param name="type">
                    <type>D3D12_COMMAND_LIST_TYPE</type>
                </param>
                <param name="pCommandAllocator">
                    <type>ID3D12CommandAllocator*</type>
                </param>
                <param name="pInitialState">
                    <type>ID3D12PipelineState*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppCommandList">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, uint, D3D12_COMMAND_LIST_TYPE, ID3D12CommandAllocator*, ID3D12PipelineState*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="nodeMask">nodeMask</param>, <param name="type">type</param>, <param name="pCommandAllocator">pCommandAllocator</param>, <param name="pInitialState">pInitialState</param>, <param name="riid">riid</param>, <param name="ppCommandList">ppCommandList</param>);
        </code>
                </body>
            </function>
            <function name="CheckFeatureSupport" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Feature">
                    <type>D3D12_FEATURE</type>
                </param>
                <param name="pFeatureSupportData">
                    <type>void*</type>
                </param>
                <param name="FeatureSupportDataSize">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_FEATURE, void*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="Feature">Feature</param>, <param name="pFeatureSupportData">pFeatureSupportData</param>, <param name="FeatureSupportDataSize">FeatureSupportDataSize</param>);
        </code>
                </body>
            </function>
            <function name="CreateDescriptorHeap" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDescriptorHeapDesc">
                    <type>D3D12_DESCRIPTOR_HEAP_DESC*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvHeap">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_DESCRIPTOR_HEAP_DESC*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pDescriptorHeapDesc">pDescriptorHeapDesc</param>, <param name="riid">riid</param>, <param name="ppvHeap">ppvHeap</param>);
        </code>
                </body>
            </function>
            <function name="GetDescriptorHandleIncrementSize" access="public" unsafe="true">
                <type native="UINT">uint</type>
                <param name="DescriptorHeapType">
                    <type>D3D12_DESCRIPTOR_HEAP_TYPE</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_DESCRIPTOR_HEAP_TYPE, uint&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="DescriptorHeapType">DescriptorHeapType</param>);
        </code>
                </body>
            </function>
            <function name="CreateRootSignature" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="nodeMask">
                    <type>uint</type>
                </param>
                <param name="pBlobWithRootSignature">
                    <type>void*</type>
                </param>
                <param name="blobLengthInBytes">
                    <type>nuint</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvRootSignature">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, uint, void*, nuint, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="nodeMask">nodeMask</param>, <param name="pBlobWithRootSignature">pBlobWithRootSignature</param>, <param name="blobLengthInBytes">blobLengthInBytes</param>, <param name="riid">riid</param>, <param name="ppvRootSignature">ppvRootSignature</param>);
        </code>
                </body>
            </function>
            <function name="CreateConstantBufferView" access="public" unsafe="true">
                <type>void</type>
                <param name="pDesc">
                    <type>D3D12_CONSTANT_BUFFER_VIEW_DESC*</type>
                </param>
                <param name="DestDescriptor">
                    <type>D3D12_CPU_DESCRIPTOR_HANDLE</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID3D12Device6*, D3D12_CONSTANT_BUFFER_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, void&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>, <param name="DestDescriptor">DestDescriptor</param>);
        </code>
                </body>
            </function>
            <function name="CreateShaderResourceView" access="public" unsafe="true">
                <type>void</type>
                <param name="pResource">
                    <type>ID3D12Resource*</type>
                </param>
                <param name="pDesc">
                    <type>D3D12_SHADER_RESOURCE_VIEW_DESC*</type>
                </param>
                <param name="DestDescriptor">
                    <type>D3D12_CPU_DESCRIPTOR_HANDLE</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID3D12Device6*, ID3D12Resource*, D3D12_SHADER_RESOURCE_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, void&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pResource">pResource</param>, <param name="pDesc">pDesc</param>, <param name="DestDescriptor">DestDescriptor</param>);
        </code>
                </body>
            </function>
            <function name="CreateUnorderedAccessView" access="public" unsafe="true">
                <type>void</type>
                <param name="pResource">
                    <type>ID3D12Resource*</type>
                </param>
                <param name="pCounterResource">
                    <type>ID3D12Resource*</type>
                </param>
                <param name="pDesc">
                    <type>D3D12_UNORDERED_ACCESS_VIEW_DESC*</type>
                </param>
                <param name="DestDescriptor">
                    <type>D3D12_CPU_DESCRIPTOR_HANDLE</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID3D12Device6*, ID3D12Resource*, ID3D12Resource*, D3D12_UNORDERED_ACCESS_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, void&gt;)(lpVtbl[<vtbl explicit="False">19</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pResource">pResource</param>, <param name="pCounterResource">pCounterResource</param>, <param name="pDesc">pDesc</param>, <param name="DestDescriptor">DestDescriptor</param>);
        </code>
                </body>
            </function>
            <function name="CreateRenderTargetView" access="public" unsafe="true">
                <type>void</type>
                <param name="pResource">
                    <type>ID3D12Resource*</type>
                </param>
                <param name="pDesc">
                    <type>D3D12_RENDER_TARGET_VIEW_DESC*</type>
                </param>
                <param name="DestDescriptor">
                    <type>D3D12_CPU_DESCRIPTOR_HANDLE</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID3D12Device6*, ID3D12Resource*, D3D12_RENDER_TARGET_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, void&gt;)(lpVtbl[<vtbl explicit="False">20</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pResource">pResource</param>, <param name="pDesc">pDesc</param>, <param name="DestDescriptor">DestDescriptor</param>);
        </code>
                </body>
            </function>
            <function name="CreateDepthStencilView" access="public" unsafe="true">
                <type>void</type>
                <param name="pResource">
                    <type>ID3D12Resource*</type>
                </param>
                <param name="pDesc">
                    <type>D3D12_DEPTH_STENCIL_VIEW_DESC*</type>
                </param>
                <param name="DestDescriptor">
                    <type>D3D12_CPU_DESCRIPTOR_HANDLE</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID3D12Device6*, ID3D12Resource*, D3D12_DEPTH_STENCIL_VIEW_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, void&gt;)(lpVtbl[<vtbl explicit="False">21</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pResource">pResource</param>, <param name="pDesc">pDesc</param>, <param name="DestDescriptor">DestDescriptor</param>);
        </code>
                </body>
            </function>
            <function name="CreateSampler" access="public" unsafe="true">
                <type>void</type>
                <param name="pDesc">
                    <type>D3D12_SAMPLER_DESC*</type>
                </param>
                <param name="DestDescriptor">
                    <type>D3D12_CPU_DESCRIPTOR_HANDLE</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID3D12Device6*, D3D12_SAMPLER_DESC*, D3D12_CPU_DESCRIPTOR_HANDLE, void&gt;)(lpVtbl[<vtbl explicit="False">22</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>, <param name="DestDescriptor">DestDescriptor</param>);
        </code>
                </body>
            </function>
            <function name="CopyDescriptors" access="public" unsafe="true">
                <type>void</type>
                <param name="NumDestDescriptorRanges">
                    <type>uint</type>
                </param>
                <param name="pDestDescriptorRangeStarts">
                    <type>D3D12_CPU_DESCRIPTOR_HANDLE*</type>
                </param>
                <param name="pDestDescriptorRangeSizes">
                    <type>uint*</type>
                </param>
                <param name="NumSrcDescriptorRanges">
                    <type>uint</type>
                </param>
                <param name="pSrcDescriptorRangeStarts">
                    <type>D3D12_CPU_DESCRIPTOR_HANDLE*</type>
                </param>
                <param name="pSrcDescriptorRangeSizes">
                    <type>uint*</type>
                </param>
                <param name="DescriptorHeapsType">
                    <type>D3D12_DESCRIPTOR_HEAP_TYPE</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID3D12Device6*, uint, D3D12_CPU_DESCRIPTOR_HANDLE*, uint*, uint, D3D12_CPU_DESCRIPTOR_HANDLE*, uint*, D3D12_DESCRIPTOR_HEAP_TYPE, void&gt;)(lpVtbl[<vtbl explicit="False">23</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="NumDestDescriptorRanges">NumDestDescriptorRanges</param>, <param name="pDestDescriptorRangeStarts">pDestDescriptorRangeStarts</param>, <param name="pDestDescriptorRangeSizes">pDestDescriptorRangeSizes</param>, <param name="NumSrcDescriptorRanges">NumSrcDescriptorRanges</param>, <param name="pSrcDescriptorRangeStarts">pSrcDescriptorRangeStarts</param>, <param name="pSrcDescriptorRangeSizes">pSrcDescriptorRangeSizes</param>, <param name="DescriptorHeapsType">DescriptorHeapsType</param>);
        </code>
                </body>
            </function>
            <function name="CopyDescriptorsSimple" access="public" unsafe="true">
                <type>void</type>
                <param name="NumDescriptors">
                    <type>uint</type>
                </param>
                <param name="DestDescriptorRangeStart">
                    <type>D3D12_CPU_DESCRIPTOR_HANDLE</type>
                </param>
                <param name="SrcDescriptorRangeStart">
                    <type>D3D12_CPU_DESCRIPTOR_HANDLE</type>
                </param>
                <param name="DescriptorHeapsType">
                    <type>D3D12_DESCRIPTOR_HEAP_TYPE</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID3D12Device6*, uint, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_CPU_DESCRIPTOR_HANDLE, D3D12_DESCRIPTOR_HEAP_TYPE, void&gt;)(lpVtbl[<vtbl explicit="False">24</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="NumDescriptors">NumDescriptors</param>, <param name="DestDescriptorRangeStart">DestDescriptorRangeStart</param>, <param name="SrcDescriptorRangeStart">SrcDescriptorRangeStart</param>, <param name="DescriptorHeapsType">DescriptorHeapsType</param>);
        </code>
                </body>
            </function>
            <function name="GetResourceAllocationInfo" access="public" unsafe="true">
                <type>D3D12_RESOURCE_ALLOCATION_INFO</type>
                <param name="visibleMask">
                    <type>uint</type>
                </param>
                <param name="numResourceDescs">
                    <type>uint</type>
                </param>
                <param name="pResourceDescs">
                    <type>D3D12_RESOURCE_DESC*</type>
                </param>
                <body>
                    <code>
                        <fixup type="*result">D3D12_RESOURCE_ALLOCATION_INFO</fixup> result;
        return *((delegate* unmanaged&lt;ID3D12Device6*, D3D12_RESOURCE_ALLOCATION_INFO*, uint, uint, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO*&gt;)(lpVtbl[<vtbl explicit="False">25</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param><param special="retFixup">, &amp;result</param>, <param name="visibleMask">visibleMask</param>, <param name="numResourceDescs">numResourceDescs</param>, <param name="pResourceDescs">pResourceDescs</param>);
        </code>
                </body>
            </function>
            <function name="GetCustomHeapProperties" access="public" unsafe="true">
                <type>D3D12_HEAP_PROPERTIES</type>
                <param name="nodeMask">
                    <type>uint</type>
                </param>
                <param name="heapType">
                    <type>D3D12_HEAP_TYPE</type>
                </param>
                <body>
                    <code>
                        <fixup type="*result">D3D12_HEAP_PROPERTIES</fixup> result;
        return *((delegate* unmanaged&lt;ID3D12Device6*, D3D12_HEAP_PROPERTIES*, uint, D3D12_HEAP_TYPE, D3D12_HEAP_PROPERTIES*&gt;)(lpVtbl[<vtbl explicit="False">26</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param><param special="retFixup">, &amp;result</param>, <param name="nodeMask">nodeMask</param>, <param name="heapType">heapType</param>);
        </code>
                </body>
            </function>
            <function name="CreateCommittedResource" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pHeapProperties">
                    <type>D3D12_HEAP_PROPERTIES*</type>
                </param>
                <param name="HeapFlags">
                    <type>D3D12_HEAP_FLAGS</type>
                </param>
                <param name="pDesc">
                    <type>D3D12_RESOURCE_DESC*</type>
                </param>
                <param name="InitialResourceState">
                    <type>D3D12_RESOURCE_STATES</type>
                </param>
                <param name="pOptimizedClearValue">
                    <type>D3D12_CLEAR_VALUE*</type>
                </param>
                <param name="riidResource">
                    <type>Guid*</type>
                </param>
                <param name="ppvResource">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">27</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pHeapProperties">pHeapProperties</param>, <param name="HeapFlags">HeapFlags</param>, <param name="pDesc">pDesc</param>, <param name="InitialResourceState">InitialResourceState</param>, <param name="pOptimizedClearValue">pOptimizedClearValue</param>, <param name="riidResource">riidResource</param>, <param name="ppvResource">ppvResource</param>);
        </code>
                </body>
            </function>
            <function name="CreateHeap" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDesc">
                    <type>D3D12_HEAP_DESC*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvHeap">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_HEAP_DESC*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">28</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>, <param name="riid">riid</param>, <param name="ppvHeap">ppvHeap</param>);
        </code>
                </body>
            </function>
            <function name="CreatePlacedResource" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pHeap">
                    <type>ID3D12Heap*</type>
                </param>
                <param name="HeapOffset">
                    <type>ulong</type>
                </param>
                <param name="pDesc">
                    <type>D3D12_RESOURCE_DESC*</type>
                </param>
                <param name="InitialState">
                    <type>D3D12_RESOURCE_STATES</type>
                </param>
                <param name="pOptimizedClearValue">
                    <type>D3D12_CLEAR_VALUE*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvResource">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, ID3D12Heap*, ulong, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">29</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pHeap">pHeap</param>, <param name="HeapOffset">HeapOffset</param>, <param name="pDesc">pDesc</param>, <param name="InitialState">InitialState</param>, <param name="pOptimizedClearValue">pOptimizedClearValue</param>, <param name="riid">riid</param>, <param name="ppvResource">ppvResource</param>);
        </code>
                </body>
            </function>
            <function name="CreateReservedResource" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDesc">
                    <type>D3D12_RESOURCE_DESC*</type>
                </param>
                <param name="InitialState">
                    <type>D3D12_RESOURCE_STATES</type>
                </param>
                <param name="pOptimizedClearValue">
                    <type>D3D12_CLEAR_VALUE*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvResource">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">30</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>, <param name="InitialState">InitialState</param>, <param name="pOptimizedClearValue">pOptimizedClearValue</param>, <param name="riid">riid</param>, <param name="ppvResource">ppvResource</param>);
        </code>
                </body>
            </function>
            <function name="CreateSharedHandle" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pObject">
                    <type>ID3D12DeviceChild*</type>
                </param>
                <param name="pAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
                <param name="Access">
                    <type>uint</type>
                </param>
                <param name="Name">
                    <type>ushort*</type>
                </param>
                <param name="pHandle">
                    <type>IntPtr*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, ID3D12DeviceChild*, SECURITY_ATTRIBUTES*, uint, ushort*, IntPtr*, int&gt;)(lpVtbl[<vtbl explicit="False">31</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pObject">pObject</param>, <param name="pAttributes">pAttributes</param>, <param name="Access">Access</param>, <param name="Name">Name</param>, <param name="pHandle">pHandle</param>);
        </code>
                </body>
            </function>
            <function name="OpenSharedHandle" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="NTHandle">
                    <type>IntPtr</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObj">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, IntPtr, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">32</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="NTHandle">NTHandle</param>, <param name="riid">riid</param>, <param name="ppvObj">ppvObj</param>);
        </code>
                </body>
            </function>
            <function name="OpenSharedHandleByName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Name">
                    <type>ushort*</type>
                </param>
                <param name="Access">
                    <type>uint</type>
                </param>
                <param name="pNTHandle">
                    <type>IntPtr*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, ushort*, uint, IntPtr*, int&gt;)(lpVtbl[<vtbl explicit="False">33</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="Name">Name</param>, <param name="Access">Access</param>, <param name="pNTHandle">pNTHandle</param>);
        </code>
                </body>
            </function>
            <function name="MakeResident" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="NumObjects">
                    <type>uint</type>
                </param>
                <param name="ppObjects">
                    <type>ID3D12Pageable**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, uint, ID3D12Pageable**, int&gt;)(lpVtbl[<vtbl explicit="False">34</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="NumObjects">NumObjects</param>, <param name="ppObjects">ppObjects</param>);
        </code>
                </body>
            </function>
            <function name="Evict" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="NumObjects">
                    <type>uint</type>
                </param>
                <param name="ppObjects">
                    <type>ID3D12Pageable**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, uint, ID3D12Pageable**, int&gt;)(lpVtbl[<vtbl explicit="False">35</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="NumObjects">NumObjects</param>, <param name="ppObjects">ppObjects</param>);
        </code>
                </body>
            </function>
            <function name="CreateFence" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="InitialValue">
                    <type>ulong</type>
                </param>
                <param name="Flags">
                    <type>D3D12_FENCE_FLAGS</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppFence">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, ulong, D3D12_FENCE_FLAGS, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">36</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="InitialValue">InitialValue</param>, <param name="Flags">Flags</param>, <param name="riid">riid</param>, <param name="ppFence">ppFence</param>);
        </code>
                </body>
            </function>
            <function name="GetDeviceRemovedReason" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, int&gt;)(lpVtbl[<vtbl explicit="False">37</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetCopyableFootprints" access="public" unsafe="true">
                <type>void</type>
                <param name="pResourceDesc">
                    <type>D3D12_RESOURCE_DESC*</type>
                </param>
                <param name="FirstSubresource">
                    <type>uint</type>
                </param>
                <param name="NumSubresources">
                    <type>uint</type>
                </param>
                <param name="BaseOffset">
                    <type>ulong</type>
                </param>
                <param name="pLayouts">
                    <type>D3D12_PLACED_SUBRESOURCE_FOOTPRINT*</type>
                </param>
                <param name="pNumRows">
                    <type>uint*</type>
                </param>
                <param name="pRowSizeInBytes">
                    <type>ulong*</type>
                </param>
                <param name="pTotalBytes">
                    <type>ulong*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID3D12Device6*, D3D12_RESOURCE_DESC*, uint, uint, ulong, D3D12_PLACED_SUBRESOURCE_FOOTPRINT*, uint*, ulong*, ulong*, void&gt;)(lpVtbl[<vtbl explicit="False">38</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pResourceDesc">pResourceDesc</param>, <param name="FirstSubresource">FirstSubresource</param>, <param name="NumSubresources">NumSubresources</param>, <param name="BaseOffset">BaseOffset</param>, <param name="pLayouts">pLayouts</param>, <param name="pNumRows">pNumRows</param>, <param name="pRowSizeInBytes">pRowSizeInBytes</param>, <param name="pTotalBytes">pTotalBytes</param>);
        </code>
                </body>
            </function>
            <function name="CreateQueryHeap" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDesc">
                    <type>D3D12_QUERY_HEAP_DESC*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvHeap">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_QUERY_HEAP_DESC*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">39</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>, <param name="riid">riid</param>, <param name="ppvHeap">ppvHeap</param>);
        </code>
                </body>
            </function>
            <function name="SetStablePowerState" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Enable">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, int, int&gt;)(lpVtbl[<vtbl explicit="False">40</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="Enable">Enable</param>);
        </code>
                </body>
            </function>
            <function name="CreateCommandSignature" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDesc">
                    <type>D3D12_COMMAND_SIGNATURE_DESC*</type>
                </param>
                <param name="pRootSignature">
                    <type>ID3D12RootSignature*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvCommandSignature">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_COMMAND_SIGNATURE_DESC*, ID3D12RootSignature*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">41</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>, <param name="pRootSignature">pRootSignature</param>, <param name="riid">riid</param>, <param name="ppvCommandSignature">ppvCommandSignature</param>);
        </code>
                </body>
            </function>
            <function name="GetResourceTiling" access="public" unsafe="true">
                <type>void</type>
                <param name="pTiledResource">
                    <type>ID3D12Resource*</type>
                </param>
                <param name="pNumTilesForEntireResource">
                    <type>uint*</type>
                </param>
                <param name="pPackedMipDesc">
                    <type>D3D12_PACKED_MIP_INFO*</type>
                </param>
                <param name="pStandardTileShapeForNonPackedMips">
                    <type>D3D12_TILE_SHAPE*</type>
                </param>
                <param name="pNumSubresourceTilings">
                    <type>uint*</type>
                </param>
                <param name="FirstSubresourceTilingToGet">
                    <type>uint</type>
                </param>
                <param name="pSubresourceTilingsForNonPackedMips">
                    <type>D3D12_SUBRESOURCE_TILING*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID3D12Device6*, ID3D12Resource*, uint*, D3D12_PACKED_MIP_INFO*, D3D12_TILE_SHAPE*, uint*, uint, D3D12_SUBRESOURCE_TILING*, void&gt;)(lpVtbl[<vtbl explicit="False">42</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pTiledResource">pTiledResource</param>, <param name="pNumTilesForEntireResource">pNumTilesForEntireResource</param>, <param name="pPackedMipDesc">pPackedMipDesc</param>, <param name="pStandardTileShapeForNonPackedMips">pStandardTileShapeForNonPackedMips</param>, <param name="pNumSubresourceTilings">pNumSubresourceTilings</param>, <param name="FirstSubresourceTilingToGet">FirstSubresourceTilingToGet</param>, <param name="pSubresourceTilingsForNonPackedMips">pSubresourceTilingsForNonPackedMips</param>);
        </code>
                </body>
            </function>
            <function name="GetAdapterLuid" access="public" unsafe="true">
                <type>LUID</type>
                <body>
                    <code>
                        <fixup type="*result">LUID</fixup> result;
        return *((delegate* unmanaged&lt;ID3D12Device6*, LUID*, LUID*&gt;)(lpVtbl[<vtbl explicit="False">43</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param><param special="retFixup">, &amp;result</param>);
        </code>
                </body>
            </function>
            <function name="CreatePipelineLibrary" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pLibraryBlob">
                    <type>void*</type>
                </param>
                <param name="BlobLength">
                    <type>nuint</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppPipelineLibrary">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, void*, nuint, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">44</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pLibraryBlob">pLibraryBlob</param>, <param name="BlobLength">BlobLength</param>, <param name="riid">riid</param>, <param name="ppPipelineLibrary">ppPipelineLibrary</param>);
        </code>
                </body>
            </function>
            <function name="SetEventOnMultipleFenceCompletion" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppFences">
                    <type>ID3D12Fence**</type>
                </param>
                <param name="pFenceValues">
                    <type>ulong*</type>
                </param>
                <param name="NumFences">
                    <type>uint</type>
                </param>
                <param name="Flags">
                    <type>D3D12_MULTIPLE_FENCE_WAIT_FLAGS</type>
                </param>
                <param name="hEvent">
                    <type>IntPtr</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, ID3D12Fence**, ulong*, uint, D3D12_MULTIPLE_FENCE_WAIT_FLAGS, IntPtr, int&gt;)(lpVtbl[<vtbl explicit="False">45</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="ppFences">ppFences</param>, <param name="pFenceValues">pFenceValues</param>, <param name="NumFences">NumFences</param>, <param name="Flags">Flags</param>, <param name="hEvent">hEvent</param>);
        </code>
                </body>
            </function>
            <function name="SetResidencyPriority" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="NumObjects">
                    <type>uint</type>
                </param>
                <param name="ppObjects">
                    <type>ID3D12Pageable**</type>
                </param>
                <param name="pPriorities">
                    <type>D3D12_RESIDENCY_PRIORITY*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, uint, ID3D12Pageable**, D3D12_RESIDENCY_PRIORITY*, int&gt;)(lpVtbl[<vtbl explicit="False">46</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="NumObjects">NumObjects</param>, <param name="ppObjects">ppObjects</param>, <param name="pPriorities">pPriorities</param>);
        </code>
                </body>
            </function>
            <function name="CreatePipelineState" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDesc">
                    <type>D3D12_PIPELINE_STATE_STREAM_DESC*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppPipelineState">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_PIPELINE_STATE_STREAM_DESC*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">47</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>, <param name="riid">riid</param>, <param name="ppPipelineState">ppPipelineState</param>);
        </code>
                </body>
            </function>
            <function name="OpenExistingHeapFromAddress" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pAddress">
                    <type>void*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvHeap">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, void*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">48</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pAddress">pAddress</param>, <param name="riid">riid</param>, <param name="ppvHeap">ppvHeap</param>);
        </code>
                </body>
            </function>
            <function name="OpenExistingHeapFromFileMapping" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="hFileMapping">
                    <type>IntPtr</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvHeap">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, IntPtr, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">49</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="hFileMapping">hFileMapping</param>, <param name="riid">riid</param>, <param name="ppvHeap">ppvHeap</param>);
        </code>
                </body>
            </function>
            <function name="EnqueueMakeResident" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Flags">
                    <type>D3D12_RESIDENCY_FLAGS</type>
                </param>
                <param name="NumObjects">
                    <type>uint</type>
                </param>
                <param name="ppObjects">
                    <type>ID3D12Pageable**</type>
                </param>
                <param name="pFenceToSignal">
                    <type>ID3D12Fence*</type>
                </param>
                <param name="FenceValueToSignal">
                    <type>ulong</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_RESIDENCY_FLAGS, uint, ID3D12Pageable**, ID3D12Fence*, ulong, int&gt;)(lpVtbl[<vtbl explicit="False">50</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="Flags">Flags</param>, <param name="NumObjects">NumObjects</param>, <param name="ppObjects">ppObjects</param>, <param name="pFenceToSignal">pFenceToSignal</param>, <param name="FenceValueToSignal">FenceValueToSignal</param>);
        </code>
                </body>
            </function>
            <function name="CreateCommandList1" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="nodeMask">
                    <type>uint</type>
                </param>
                <param name="type">
                    <type>D3D12_COMMAND_LIST_TYPE</type>
                </param>
                <param name="flags">
                    <type>D3D12_COMMAND_LIST_FLAGS</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppCommandList">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, uint, D3D12_COMMAND_LIST_TYPE, D3D12_COMMAND_LIST_FLAGS, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">51</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="nodeMask">nodeMask</param>, <param name="type">type</param>, <param name="flags">flags</param>, <param name="riid">riid</param>, <param name="ppCommandList">ppCommandList</param>);
        </code>
                </body>
            </function>
            <function name="CreateProtectedResourceSession" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDesc">
                    <type>D3D12_PROTECTED_RESOURCE_SESSION_DESC*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppSession">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_PROTECTED_RESOURCE_SESSION_DESC*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">52</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>, <param name="riid">riid</param>, <param name="ppSession">ppSession</param>);
        </code>
                </body>
            </function>
            <function name="CreateCommittedResource1" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pHeapProperties">
                    <type>D3D12_HEAP_PROPERTIES*</type>
                </param>
                <param name="HeapFlags">
                    <type>D3D12_HEAP_FLAGS</type>
                </param>
                <param name="pDesc">
                    <type>D3D12_RESOURCE_DESC*</type>
                </param>
                <param name="InitialResourceState">
                    <type>D3D12_RESOURCE_STATES</type>
                </param>
                <param name="pOptimizedClearValue">
                    <type>D3D12_CLEAR_VALUE*</type>
                </param>
                <param name="pProtectedSession">
                    <type>ID3D12ProtectedResourceSession*</type>
                </param>
                <param name="riidResource">
                    <type>Guid*</type>
                </param>
                <param name="ppvResource">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_HEAP_PROPERTIES*, D3D12_HEAP_FLAGS, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, ID3D12ProtectedResourceSession*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">53</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pHeapProperties">pHeapProperties</param>, <param name="HeapFlags">HeapFlags</param>, <param name="pDesc">pDesc</param>, <param name="InitialResourceState">InitialResourceState</param>, <param name="pOptimizedClearValue">pOptimizedClearValue</param>, <param name="pProtectedSession">pProtectedSession</param>, <param name="riidResource">riidResource</param>, <param name="ppvResource">ppvResource</param>);
        </code>
                </body>
            </function>
            <function name="CreateHeap1" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDesc">
                    <type>D3D12_HEAP_DESC*</type>
                </param>
                <param name="pProtectedSession">
                    <type>ID3D12ProtectedResourceSession*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvHeap">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_HEAP_DESC*, ID3D12ProtectedResourceSession*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">54</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>, <param name="pProtectedSession">pProtectedSession</param>, <param name="riid">riid</param>, <param name="ppvHeap">ppvHeap</param>);
        </code>
                </body>
            </function>
            <function name="CreateReservedResource1" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDesc">
                    <type>D3D12_RESOURCE_DESC*</type>
                </param>
                <param name="InitialState">
                    <type>D3D12_RESOURCE_STATES</type>
                </param>
                <param name="pOptimizedClearValue">
                    <type>D3D12_CLEAR_VALUE*</type>
                </param>
                <param name="pProtectedSession">
                    <type>ID3D12ProtectedResourceSession*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvResource">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_STATES, D3D12_CLEAR_VALUE*, ID3D12ProtectedResourceSession*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">55</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>, <param name="InitialState">InitialState</param>, <param name="pOptimizedClearValue">pOptimizedClearValue</param>, <param name="pProtectedSession">pProtectedSession</param>, <param name="riid">riid</param>, <param name="ppvResource">ppvResource</param>);
        </code>
                </body>
            </function>
            <function name="GetResourceAllocationInfo1" access="public" unsafe="true">
                <type>D3D12_RESOURCE_ALLOCATION_INFO</type>
                <param name="visibleMask">
                    <type>uint</type>
                </param>
                <param name="numResourceDescs">
                    <type>uint</type>
                </param>
                <param name="pResourceDescs">
                    <type>D3D12_RESOURCE_DESC*</type>
                </param>
                <param name="pResourceAllocationInfo1">
                    <type>D3D12_RESOURCE_ALLOCATION_INFO1*</type>
                </param>
                <body>
                    <code>
                        <fixup type="*result">D3D12_RESOURCE_ALLOCATION_INFO</fixup> result;
        return *((delegate* unmanaged&lt;ID3D12Device6*, D3D12_RESOURCE_ALLOCATION_INFO*, uint, uint, D3D12_RESOURCE_DESC*, D3D12_RESOURCE_ALLOCATION_INFO1*, D3D12_RESOURCE_ALLOCATION_INFO*&gt;)(lpVtbl[<vtbl explicit="False">56</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param><param special="retFixup">, &amp;result</param>, <param name="visibleMask">visibleMask</param>, <param name="numResourceDescs">numResourceDescs</param>, <param name="pResourceDescs">pResourceDescs</param>, <param name="pResourceAllocationInfo1">pResourceAllocationInfo1</param>);
        </code>
                </body>
            </function>
            <function name="CreateLifetimeTracker" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pOwner">
                    <type>ID3D12LifetimeOwner*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvTracker">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, ID3D12LifetimeOwner*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">57</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pOwner">pOwner</param>, <param name="riid">riid</param>, <param name="ppvTracker">ppvTracker</param>);
        </code>
                </body>
            </function>
            <function name="RemoveDevice" access="public" unsafe="true">
                <type>void</type>
                <body>
                    <code>((delegate* unmanaged&lt;ID3D12Device6*, void&gt;)(lpVtbl[<vtbl explicit="False">58</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="EnumerateMetaCommands" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pNumMetaCommands">
                    <type>uint*</type>
                </param>
                <param name="pDescs">
                    <type>D3D12_META_COMMAND_DESC*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, uint*, D3D12_META_COMMAND_DESC*, int&gt;)(lpVtbl[<vtbl explicit="False">59</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pNumMetaCommands">pNumMetaCommands</param>, <param name="pDescs">pDescs</param>);
        </code>
                </body>
            </function>
            <function name="EnumerateMetaCommandParameters" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="CommandId">
                    <type>Guid*</type>
                </param>
                <param name="Stage">
                    <type>D3D12_META_COMMAND_PARAMETER_STAGE</type>
                </param>
                <param name="pTotalStructureSizeInBytes">
                    <type>uint*</type>
                </param>
                <param name="pParameterCount">
                    <type>uint*</type>
                </param>
                <param name="pParameterDescs">
                    <type>D3D12_META_COMMAND_PARAMETER_DESC*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, Guid*, D3D12_META_COMMAND_PARAMETER_STAGE, uint*, uint*, D3D12_META_COMMAND_PARAMETER_DESC*, int&gt;)(lpVtbl[<vtbl explicit="False">60</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="CommandId">CommandId</param>, <param name="Stage">Stage</param>, <param name="pTotalStructureSizeInBytes">pTotalStructureSizeInBytes</param>, <param name="pParameterCount">pParameterCount</param>, <param name="pParameterDescs">pParameterDescs</param>);
        </code>
                </body>
            </function>
            <function name="CreateMetaCommand" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="CommandId">
                    <type>Guid*</type>
                </param>
                <param name="NodeMask">
                    <type>uint</type>
                </param>
                <param name="pCreationParametersData">
                    <type>void*</type>
                </param>
                <param name="CreationParametersDataSizeInBytes">
                    <type>nuint</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppMetaCommand">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, Guid*, uint, void*, nuint, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">61</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="CommandId">CommandId</param>, <param name="NodeMask">NodeMask</param>, <param name="pCreationParametersData">pCreationParametersData</param>, <param name="CreationParametersDataSizeInBytes">CreationParametersDataSizeInBytes</param>, <param name="riid">riid</param>, <param name="ppMetaCommand">ppMetaCommand</param>);
        </code>
                </body>
            </function>
            <function name="CreateStateObject" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDesc">
                    <type>D3D12_STATE_OBJECT_DESC*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppStateObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_STATE_OBJECT_DESC*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">62</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>, <param name="riid">riid</param>, <param name="ppStateObject">ppStateObject</param>);
        </code>
                </body>
            </function>
            <function name="GetRaytracingAccelerationStructurePrebuildInfo" access="public" unsafe="true">
                <type>void</type>
                <param name="pDesc">
                    <type>D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*</type>
                </param>
                <param name="pInfo">
                    <type>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID3D12Device6*, D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS*, D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO*, void&gt;)(lpVtbl[<vtbl explicit="False">63</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>, <param name="pInfo">pInfo</param>);
        </code>
                </body>
            </function>
            <function name="CheckDriverMatchingIdentifier" access="public" unsafe="true">
                <type>D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS</type>
                <param name="SerializedDataType">
                    <type>D3D12_SERIALIZED_DATA_TYPE</type>
                </param>
                <param name="pIdentifierToCheck">
                    <type>D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_SERIALIZED_DATA_TYPE, D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER*, D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS&gt;)(lpVtbl[<vtbl explicit="False">64</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="SerializedDataType">SerializedDataType</param>, <param name="pIdentifierToCheck">pIdentifierToCheck</param>);
        </code>
                </body>
            </function>
            <function name="SetBackgroundProcessingMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Mode">
                    <type>D3D12_BACKGROUND_PROCESSING_MODE</type>
                </param>
                <param name="MeasurementsAction">
                    <type>D3D12_MEASUREMENTS_ACTION</type>
                </param>
                <param name="hEventToSignalUponCompletion">
                    <type>IntPtr</type>
                </param>
                <param name="pbFurtherMeasurementsDesired">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12Device6*, D3D12_BACKGROUND_PROCESSING_MODE, D3D12_MEASUREMENTS_ACTION, IntPtr, int*, int&gt;)(lpVtbl[<vtbl explicit="False">65</vtbl>]))(<param special="thisPtr">(ID3D12Device6*)Unsafe.AsPointer(ref this)</param>, <param name="Mode">Mode</param>, <param name="MeasurementsAction">MeasurementsAction</param>, <param name="hEventToSignalUponCompletion">hEventToSignalUponCompletion</param>, <param name="pbFurtherMeasurementsDesired">pbFurtherMeasurementsDesired</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
