<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d3d12.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ID3D12PipelineLibrary" access="public" native="struct ID3D12PipelineLibrary : ID3D12DeviceChild" uuid="c64226a8-9201-46af-b4cc-53fb9ff7414f" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12PipelineLibrary*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12PipelineLibrary*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12PipelineLibrary*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetPrivateData" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="guid">
                    <type>Guid*</type>
                </param>
                <param name="pDataSize">
                    <type>uint*</type>
                </param>
                <param name="pData">
                    <type>void*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12PipelineLibrary*, Guid*, uint*, void*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="guid">guid</param>, <param name="pDataSize">pDataSize</param>, <param name="pData">pData</param>);
        </code>
                </body>
            </function>
            <function name="SetPrivateData" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="guid">
                    <type>Guid*</type>
                </param>
                <param name="DataSize">
                    <type>uint</type>
                </param>
                <param name="pData">
                    <type>void*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12PipelineLibrary*, Guid*, uint, void*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="guid">guid</param>, <param name="DataSize">DataSize</param>, <param name="pData">pData</param>);
        </code>
                </body>
            </function>
            <function name="SetPrivateDataInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="guid">
                    <type>Guid*</type>
                </param>
                <param name="pData">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12PipelineLibrary*, Guid*, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="guid">guid</param>, <param name="pData">pData</param>);
        </code>
                </body>
            </function>
            <function name="SetName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Name">
                    <type>ushort*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12PipelineLibrary*, ushort*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="Name">Name</param>);
        </code>
                </body>
            </function>
            <function name="GetDevice" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvDevice">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12PipelineLibrary*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvDevice">ppvDevice</param>);
        </code>
                </body>
            </function>
            <function name="StorePipeline" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pName">
                    <type>ushort*</type>
                </param>
                <param name="pPipeline">
                    <type>ID3D12PipelineState*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12PipelineLibrary*, ushort*, ID3D12PipelineState*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="pName">pName</param>, <param name="pPipeline">pPipeline</param>);
        </code>
                </body>
            </function>
            <function name="LoadGraphicsPipeline" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pName">
                    <type>ushort*</type>
                </param>
                <param name="pDesc">
                    <type>D3D12_GRAPHICS_PIPELINE_STATE_DESC*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppPipelineState">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12PipelineLibrary*, ushort*, D3D12_GRAPHICS_PIPELINE_STATE_DESC*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="pName">pName</param>, <param name="pDesc">pDesc</param>, <param name="riid">riid</param>, <param name="ppPipelineState">ppPipelineState</param>);
        </code>
                </body>
            </function>
            <function name="LoadComputePipeline" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pName">
                    <type>ushort*</type>
                </param>
                <param name="pDesc">
                    <type>D3D12_COMPUTE_PIPELINE_STATE_DESC*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppPipelineState">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12PipelineLibrary*, ushort*, D3D12_COMPUTE_PIPELINE_STATE_DESC*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="pName">pName</param>, <param name="pDesc">pDesc</param>, <param name="riid">riid</param>, <param name="ppPipelineState">ppPipelineState</param>);
        </code>
                </body>
            </function>
            <function name="GetSerializedSize" access="public" unsafe="true">
                <type native="SIZE_T">nuint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12PipelineLibrary*, nuint&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Serialize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pData">
                    <type>void*</type>
                </param>
                <param name="DataSizeInBytes">
                    <type>nuint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12PipelineLibrary*, void*, nuint, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ID3D12PipelineLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="pData">pData</param>, <param name="DataSizeInBytes">DataSizeInBytes</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
