<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dwrite_1.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDWriteTextAnalysisSink1" access="public" native="struct IDWriteTextAnalysisSink1 : IDWriteTextAnalysisSink" uuid="b0d941a0-85e7-4d8b-9fd3-5ced9934482a" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalysisSink1*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalysisSink1*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalysisSink1*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalysisSink1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalysisSink1*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalysisSink1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetScriptAnalysis" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="textPosition">
                    <type>uint</type>
                </param>
                <param name="textLength">
                    <type>uint</type>
                </param>
                <param name="scriptAnalysis">
                    <type>DWRITE_SCRIPT_ANALYSIS*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalysisSink1*, uint, uint, DWRITE_SCRIPT_ANALYSIS*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalysisSink1*)Unsafe.AsPointer(ref this)</param>, <param name="textPosition">textPosition</param>, <param name="textLength">textLength</param>, <param name="scriptAnalysis">scriptAnalysis</param>);
        </code>
                </body>
            </function>
            <function name="SetLineBreakpoints" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="textPosition">
                    <type>uint</type>
                </param>
                <param name="textLength">
                    <type>uint</type>
                </param>
                <param name="lineBreakpoints">
                    <type>DWRITE_LINE_BREAKPOINT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalysisSink1*, uint, uint, DWRITE_LINE_BREAKPOINT*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalysisSink1*)Unsafe.AsPointer(ref this)</param>, <param name="textPosition">textPosition</param>, <param name="textLength">textLength</param>, <param name="lineBreakpoints">lineBreakpoints</param>);
        </code>
                </body>
            </function>
            <function name="SetBidiLevel" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="textPosition">
                    <type>uint</type>
                </param>
                <param name="textLength">
                    <type>uint</type>
                </param>
                <param name="explicitLevel">
                    <type>byte</type>
                </param>
                <param name="resolvedLevel">
                    <type>byte</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalysisSink1*, uint, uint, byte, byte, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalysisSink1*)Unsafe.AsPointer(ref this)</param>, <param name="textPosition">textPosition</param>, <param name="textLength">textLength</param>, <param name="explicitLevel">explicitLevel</param>, <param name="resolvedLevel">resolvedLevel</param>);
        </code>
                </body>
            </function>
            <function name="SetNumberSubstitution" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="textPosition">
                    <type>uint</type>
                </param>
                <param name="textLength">
                    <type>uint</type>
                </param>
                <param name="numberSubstitution">
                    <type>IDWriteNumberSubstitution*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalysisSink1*, uint, uint, IDWriteNumberSubstitution*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalysisSink1*)Unsafe.AsPointer(ref this)</param>, <param name="textPosition">textPosition</param>, <param name="textLength">textLength</param>, <param name="numberSubstitution">numberSubstitution</param>);
        </code>
                </body>
            </function>
            <function name="SetGlyphOrientation" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="textPosition">
                    <type>uint</type>
                </param>
                <param name="textLength">
                    <type>uint</type>
                </param>
                <param name="glyphOrientationAngle">
                    <type>DWRITE_GLYPH_ORIENTATION_ANGLE</type>
                </param>
                <param name="adjustedBidiLevel">
                    <type>byte</type>
                </param>
                <param name="isSideways">
                    <type>int</type>
                </param>
                <param name="isRightToLeft">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalysisSink1*, uint, uint, DWRITE_GLYPH_ORIENTATION_ANGLE, byte, int, int, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalysisSink1*)Unsafe.AsPointer(ref this)</param>, <param name="textPosition">textPosition</param>, <param name="textLength">textLength</param>, <param name="glyphOrientationAngle">glyphOrientationAngle</param>, <param name="adjustedBidiLevel">adjustedBidiLevel</param>, <param name="isSideways">isSideways</param>, <param name="isRightToLeft">isRightToLeft</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
