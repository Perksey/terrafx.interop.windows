<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/amvideo.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IFullScreenVideoEx" access="public" native="struct IFullScreenVideoEx : IFullScreenVideo" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="CountModes" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pModes">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="pModes">pModes</param>);
        </code>
                </body>
            </function>
            <function name="GetModeInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Mode">
                    <type>int</type>
                </param>
                <param name="pWidth">
                    <type>int*</type>
                </param>
                <param name="pHeight">
                    <type>int*</type>
                </param>
                <param name="pDepth">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, int, int*, int*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="Mode">Mode</param>, <param name="pWidth">pWidth</param>, <param name="pHeight">pHeight</param>, <param name="pDepth">pDepth</param>);
        </code>
                </body>
            </function>
            <function name="GetCurrentMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pMode">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="pMode">pMode</param>);
        </code>
                </body>
            </function>
            <function name="IsModeAvailable" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Mode">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, int, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="Mode">Mode</param>);
        </code>
                </body>
            </function>
            <function name="IsModeEnabled" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Mode">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, int, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="Mode">Mode</param>);
        </code>
                </body>
            </function>
            <function name="SetEnabled" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Mode">
                    <type>int</type>
                </param>
                <param name="bEnabled">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, int, int, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="Mode">Mode</param>, <param name="bEnabled">bEnabled</param>);
        </code>
                </body>
            </function>
            <function name="GetClipFactor" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pClipFactor">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="pClipFactor">pClipFactor</param>);
        </code>
                </body>
            </function>
            <function name="SetClipFactor" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ClipFactor">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, int, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="ClipFactor">ClipFactor</param>);
        </code>
                </body>
            </function>
            <function name="SetMessageDrain" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="hwnd">
                    <type>IntPtr</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, IntPtr, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="hwnd">hwnd</param>);
        </code>
                </body>
            </function>
            <function name="GetMessageDrain" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="hwnd">
                    <type>IntPtr*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, IntPtr*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="hwnd">hwnd</param>);
        </code>
                </body>
            </function>
            <function name="SetMonitor" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Monitor">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, int, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="Monitor">Monitor</param>);
        </code>
                </body>
            </function>
            <function name="GetMonitor" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Monitor">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="Monitor">Monitor</param>);
        </code>
                </body>
            </function>
            <function name="HideOnDeactivate" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Hide">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, int, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="Hide">Hide</param>);
        </code>
                </body>
            </function>
            <function name="IsHideOnDeactivate" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetCaption" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="strCaption">
                    <type>ushort*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, ushort*, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="strCaption">strCaption</param>);
        </code>
                </body>
            </function>
            <function name="GetCaption" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pstrCaption">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="pstrCaption">pstrCaption</param>);
        </code>
                </body>
            </function>
            <function name="SetDefault" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, int&gt;)(lpVtbl[<vtbl explicit="False">19</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetAcceleratorTable" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="hwnd">
                    <type>IntPtr</type>
                </param>
                <param name="hAccel">
                    <type>IntPtr</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, IntPtr, IntPtr, int&gt;)(lpVtbl[<vtbl explicit="False">20</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="hwnd">hwnd</param>, <param name="hAccel">hAccel</param>);
        </code>
                </body>
            </function>
            <function name="GetAcceleratorTable" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="phwnd">
                    <type>IntPtr*</type>
                </param>
                <param name="phAccel">
                    <type>IntPtr*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, IntPtr*, IntPtr*, int&gt;)(lpVtbl[<vtbl explicit="False">21</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="phwnd">phwnd</param>, <param name="phAccel">phAccel</param>);
        </code>
                </body>
            </function>
            <function name="KeepPixelAspectRatio" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="KeepAspect">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, int, int&gt;)(lpVtbl[<vtbl explicit="False">22</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="KeepAspect">KeepAspect</param>);
        </code>
                </body>
            </function>
            <function name="IsKeepPixelAspectRatio" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pKeepAspect">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFullScreenVideoEx*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">23</vtbl>]))(<param special="thisPtr">(IFullScreenVideoEx*)Unsafe.AsPointer(ref this)</param>, <param name="pKeepAspect">pKeepAspect</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
