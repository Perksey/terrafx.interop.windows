<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/amvideo.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDirectDrawVideo" access="public" native="struct IDirectDrawVideo : IUnknown" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetSwitches" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pSwitches">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>, <param name="pSwitches">pSwitches</param>);
        </code>
                </body>
            </function>
            <function name="SetSwitches" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Switches">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>, <param name="Switches">Switches</param>);
        </code>
                </body>
            </function>
            <function name="GetCaps" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pCaps">
                    <type>DDCAPS_DX7*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, DDCAPS_DX7*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>, <param name="pCaps">pCaps</param>);
        </code>
                </body>
            </function>
            <function name="GetEmulatedCaps" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pCaps">
                    <type>DDCAPS_DX7*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, DDCAPS_DX7*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>, <param name="pCaps">pCaps</param>);
        </code>
                </body>
            </function>
            <function name="GetSurfaceDesc" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pSurfaceDesc">
                    <type>DDSURFACEDESC*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, DDSURFACEDESC*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>, <param name="pSurfaceDesc">pSurfaceDesc</param>);
        </code>
                </body>
            </function>
            <function name="GetFourCCCodes" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pCount">
                    <type>uint*</type>
                </param>
                <param name="pCodes">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, uint*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>, <param name="pCount">pCount</param>, <param name="pCodes">pCodes</param>);
        </code>
                </body>
            </function>
            <function name="SetDirectDraw" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDirectDraw">
                    <type>IDirectDraw*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, IDirectDraw*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>, <param name="pDirectDraw">pDirectDraw</param>);
        </code>
                </body>
            </function>
            <function name="GetDirectDraw" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppDirectDraw">
                    <type>IDirectDraw**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, IDirectDraw**, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>, <param name="ppDirectDraw">ppDirectDraw</param>);
        </code>
                </body>
            </function>
            <function name="GetSurfaceType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pSurfaceType">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>, <param name="pSurfaceType">pSurfaceType</param>);
        </code>
                </body>
            </function>
            <function name="SetDefault" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="UseScanLine" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="UseScanLine">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, int, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>, <param name="UseScanLine">UseScanLine</param>);
        </code>
                </body>
            </function>
            <function name="CanUseScanLine" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="UseScanLine">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>, <param name="UseScanLine">UseScanLine</param>);
        </code>
                </body>
            </function>
            <function name="UseOverlayStretch" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="UseOverlayStretch">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, int, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>, <param name="UseOverlayStretch">UseOverlayStretch</param>);
        </code>
                </body>
            </function>
            <function name="CanUseOverlayStretch" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="UseOverlayStretch">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>, <param name="UseOverlayStretch">UseOverlayStretch</param>);
        </code>
                </body>
            </function>
            <function name="UseWhenFullScreen" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="UseWhenFullScreen">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, int, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>, <param name="UseWhenFullScreen">UseWhenFullScreen</param>);
        </code>
                </body>
            </function>
            <function name="WillUseFullScreen" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="UseWhenFullScreen">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectDrawVideo*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(IDirectDrawVideo*)Unsafe.AsPointer(ref this)</param>, <param name="UseWhenFullScreen">UseWhenFullScreen</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
