<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/minwinbase.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="PROCESS_HEAP_ENTRY" access="public" unsafe="true">
            <field name="lpData" access="public">
                <type native="PVOID">void*</type>
            </field>
            <field name="cbData" access="public">
                <type native="DWORD">uint</type>
            </field>
            <field name="cbOverhead" access="public">
                <type native="BYTE">byte</type>
            </field>
            <field name="iRegionIndex" access="public">
                <type native="BYTE">byte</type>
            </field>
            <field name="wFlags" access="public">
                <type native="WORD">ushort</type>
            </field>
            <field name="Anonymous" access="public">
                <type native="_PROCESS_HEAP_ENTRY::(anonymous union at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/minwinbase.h:244:5)">_Anonymous_e__Union</type>
            </field>
            <field name="Block" access="public">
                <type native="">ref _Anonymous_e__Union._Block_e__Struct</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Block, 1));
        </code>
                </get>
            </field>
            <field name="Region" access="public">
                <type native="">ref _Anonymous_e__Union._Region_e__Struct</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Region, 1));
        </code>
                </get>
            </field>
            <struct name="_Anonymous_e__Union" access="public" layout="Explicit">
                <field name="Block" access="public" offset="0">
                    <type native="struct (anonymous struct at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/minwinbase.h:245:9)">_Block_e__Struct</type>
                </field>
                <field name="Region" access="public" offset="0">
                    <type native="struct (anonymous struct at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/minwinbase.h:249:9)">_Region_e__Struct</type>
                </field>
                <struct name="_Block_e__Struct" access="public" unsafe="true">
                    <field name="hMem" access="public">
                        <type native="HANDLE">IntPtr</type>
                    </field>
                    <field name="dwReserved" access="public">
                        <type native="DWORD [3]" count="3" fixed="_dwReserved_e__FixedBuffer">uint</type>
                    </field>
                </struct>
                <struct name="_Region_e__Struct" access="public" unsafe="true">
                    <field name="dwCommittedSize" access="public">
                        <type native="DWORD">uint</type>
                    </field>
                    <field name="dwUnCommittedSize" access="public">
                        <type native="DWORD">uint</type>
                    </field>
                    <field name="lpFirstBlock" access="public">
                        <type native="LPVOID">void*</type>
                    </field>
                    <field name="lpLastBlock" access="public">
                        <type native="LPVOID">void*</type>
                    </field>
                </struct>
            </struct>
        </struct>
    </namespace>
</bindings>
