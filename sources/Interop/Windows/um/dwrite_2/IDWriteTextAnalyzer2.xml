<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dwrite_2.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDWriteTextAnalyzer2" access="public" native="struct IDWriteTextAnalyzer2 : IDWriteTextAnalyzer1" uuid="553a9ff3-5693-4df7-b52b-74806f7f2eb9" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="AnalyzeScript" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="analysisSource">
                    <type>IDWriteTextAnalysisSource*</type>
                </param>
                <param name="textPosition">
                    <type>uint</type>
                </param>
                <param name="textLength">
                    <type>uint</type>
                </param>
                <param name="analysisSink">
                    <type>IDWriteTextAnalysisSink*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource*, uint, uint, IDWriteTextAnalysisSink*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="analysisSource">analysisSource</param>, <param name="textPosition">textPosition</param>, <param name="textLength">textLength</param>, <param name="analysisSink">analysisSink</param>);
        </code>
                </body>
            </function>
            <function name="AnalyzeBidi" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="analysisSource">
                    <type>IDWriteTextAnalysisSource*</type>
                </param>
                <param name="textPosition">
                    <type>uint</type>
                </param>
                <param name="textLength">
                    <type>uint</type>
                </param>
                <param name="analysisSink">
                    <type>IDWriteTextAnalysisSink*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource*, uint, uint, IDWriteTextAnalysisSink*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="analysisSource">analysisSource</param>, <param name="textPosition">textPosition</param>, <param name="textLength">textLength</param>, <param name="analysisSink">analysisSink</param>);
        </code>
                </body>
            </function>
            <function name="AnalyzeNumberSubstitution" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="analysisSource">
                    <type>IDWriteTextAnalysisSource*</type>
                </param>
                <param name="textPosition">
                    <type>uint</type>
                </param>
                <param name="textLength">
                    <type>uint</type>
                </param>
                <param name="analysisSink">
                    <type>IDWriteTextAnalysisSink*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource*, uint, uint, IDWriteTextAnalysisSink*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="analysisSource">analysisSource</param>, <param name="textPosition">textPosition</param>, <param name="textLength">textLength</param>, <param name="analysisSink">analysisSink</param>);
        </code>
                </body>
            </function>
            <function name="AnalyzeLineBreakpoints" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="analysisSource">
                    <type>IDWriteTextAnalysisSource*</type>
                </param>
                <param name="textPosition">
                    <type>uint</type>
                </param>
                <param name="textLength">
                    <type>uint</type>
                </param>
                <param name="analysisSink">
                    <type>IDWriteTextAnalysisSink*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource*, uint, uint, IDWriteTextAnalysisSink*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="analysisSource">analysisSource</param>, <param name="textPosition">textPosition</param>, <param name="textLength">textLength</param>, <param name="analysisSink">analysisSink</param>);
        </code>
                </body>
            </function>
            <function name="GetGlyphs" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="textString">
                    <type>ushort*</type>
                </param>
                <param name="textLength">
                    <type>uint</type>
                </param>
                <param name="fontFace">
                    <type>IDWriteFontFace*</type>
                </param>
                <param name="isSideways">
                    <type>int</type>
                </param>
                <param name="isRightToLeft">
                    <type>int</type>
                </param>
                <param name="scriptAnalysis">
                    <type>DWRITE_SCRIPT_ANALYSIS*</type>
                </param>
                <param name="localeName">
                    <type>ushort*</type>
                </param>
                <param name="numberSubstitution">
                    <type>IDWriteNumberSubstitution*</type>
                </param>
                <param name="features">
                    <type>DWRITE_TYPOGRAPHIC_FEATURES**</type>
                </param>
                <param name="featureRangeLengths">
                    <type>uint*</type>
                </param>
                <param name="featureRanges">
                    <type>uint</type>
                </param>
                <param name="maxGlyphCount">
                    <type>uint</type>
                </param>
                <param name="clusterMap">
                    <type>ushort*</type>
                </param>
                <param name="textProps">
                    <type>DWRITE_SHAPING_TEXT_PROPERTIES*</type>
                </param>
                <param name="glyphIndices">
                    <type>ushort*</type>
                </param>
                <param name="glyphProps">
                    <type>DWRITE_SHAPING_GLYPH_PROPERTIES*</type>
                </param>
                <param name="actualGlyphCount">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, ushort*, uint, IDWriteFontFace*, int, int, DWRITE_SCRIPT_ANALYSIS*, ushort*, IDWriteNumberSubstitution*, DWRITE_TYPOGRAPHIC_FEATURES**, uint*, uint, uint, ushort*, DWRITE_SHAPING_TEXT_PROPERTIES*, ushort*, DWRITE_SHAPING_GLYPH_PROPERTIES*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="textString">textString</param>, <param name="textLength">textLength</param>, <param name="fontFace">fontFace</param>, <param name="isSideways">isSideways</param>, <param name="isRightToLeft">isRightToLeft</param>, <param name="scriptAnalysis">scriptAnalysis</param>, <param name="localeName">localeName</param>, <param name="numberSubstitution">numberSubstitution</param>, <param name="features">features</param>, <param name="featureRangeLengths">featureRangeLengths</param>, <param name="featureRanges">featureRanges</param>, <param name="maxGlyphCount">maxGlyphCount</param>, <param name="clusterMap">clusterMap</param>, <param name="textProps">textProps</param>, <param name="glyphIndices">glyphIndices</param>, <param name="glyphProps">glyphProps</param>, <param name="actualGlyphCount">actualGlyphCount</param>);
        </code>
                </body>
            </function>
            <function name="GetGlyphPlacements" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="textString">
                    <type>ushort*</type>
                </param>
                <param name="clusterMap">
                    <type>ushort*</type>
                </param>
                <param name="textProps">
                    <type>DWRITE_SHAPING_TEXT_PROPERTIES*</type>
                </param>
                <param name="textLength">
                    <type>uint</type>
                </param>
                <param name="glyphIndices">
                    <type>ushort*</type>
                </param>
                <param name="glyphProps">
                    <type>DWRITE_SHAPING_GLYPH_PROPERTIES*</type>
                </param>
                <param name="glyphCount">
                    <type>uint</type>
                </param>
                <param name="fontFace">
                    <type>IDWriteFontFace*</type>
                </param>
                <param name="fontEmSize">
                    <type>float</type>
                </param>
                <param name="isSideways">
                    <type>int</type>
                </param>
                <param name="isRightToLeft">
                    <type>int</type>
                </param>
                <param name="scriptAnalysis">
                    <type>DWRITE_SCRIPT_ANALYSIS*</type>
                </param>
                <param name="localeName">
                    <type>ushort*</type>
                </param>
                <param name="features">
                    <type>DWRITE_TYPOGRAPHIC_FEATURES**</type>
                </param>
                <param name="featureRangeLengths">
                    <type>uint*</type>
                </param>
                <param name="featureRanges">
                    <type>uint</type>
                </param>
                <param name="glyphAdvances">
                    <type>float*</type>
                </param>
                <param name="glyphOffsets">
                    <type>DWRITE_GLYPH_OFFSET*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, ushort*, ushort*, DWRITE_SHAPING_TEXT_PROPERTIES*, uint, ushort*, DWRITE_SHAPING_GLYPH_PROPERTIES*, uint, IDWriteFontFace*, float, int, int, DWRITE_SCRIPT_ANALYSIS*, ushort*, DWRITE_TYPOGRAPHIC_FEATURES**, uint*, uint, float*, DWRITE_GLYPH_OFFSET*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="textString">textString</param>, <param name="clusterMap">clusterMap</param>, <param name="textProps">textProps</param>, <param name="textLength">textLength</param>, <param name="glyphIndices">glyphIndices</param>, <param name="glyphProps">glyphProps</param>, <param name="glyphCount">glyphCount</param>, <param name="fontFace">fontFace</param>, <param name="fontEmSize">fontEmSize</param>, <param name="isSideways">isSideways</param>, <param name="isRightToLeft">isRightToLeft</param>, <param name="scriptAnalysis">scriptAnalysis</param>, <param name="localeName">localeName</param>, <param name="features">features</param>, <param name="featureRangeLengths">featureRangeLengths</param>, <param name="featureRanges">featureRanges</param>, <param name="glyphAdvances">glyphAdvances</param>, <param name="glyphOffsets">glyphOffsets</param>);
        </code>
                </body>
            </function>
            <function name="GetGdiCompatibleGlyphPlacements" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="textString">
                    <type>ushort*</type>
                </param>
                <param name="clusterMap">
                    <type>ushort*</type>
                </param>
                <param name="textProps">
                    <type>DWRITE_SHAPING_TEXT_PROPERTIES*</type>
                </param>
                <param name="textLength">
                    <type>uint</type>
                </param>
                <param name="glyphIndices">
                    <type>ushort*</type>
                </param>
                <param name="glyphProps">
                    <type>DWRITE_SHAPING_GLYPH_PROPERTIES*</type>
                </param>
                <param name="glyphCount">
                    <type>uint</type>
                </param>
                <param name="fontFace">
                    <type>IDWriteFontFace*</type>
                </param>
                <param name="fontEmSize">
                    <type>float</type>
                </param>
                <param name="pixelsPerDip">
                    <type>float</type>
                </param>
                <param name="transform">
                    <type>DWRITE_MATRIX*</type>
                </param>
                <param name="useGdiNatural">
                    <type>int</type>
                </param>
                <param name="isSideways">
                    <type>int</type>
                </param>
                <param name="isRightToLeft">
                    <type>int</type>
                </param>
                <param name="scriptAnalysis">
                    <type>DWRITE_SCRIPT_ANALYSIS*</type>
                </param>
                <param name="localeName">
                    <type>ushort*</type>
                </param>
                <param name="features">
                    <type>DWRITE_TYPOGRAPHIC_FEATURES**</type>
                </param>
                <param name="featureRangeLengths">
                    <type>uint*</type>
                </param>
                <param name="featureRanges">
                    <type>uint</type>
                </param>
                <param name="glyphAdvances">
                    <type>float*</type>
                </param>
                <param name="glyphOffsets">
                    <type>DWRITE_GLYPH_OFFSET*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, ushort*, ushort*, DWRITE_SHAPING_TEXT_PROPERTIES*, uint, ushort*, DWRITE_SHAPING_GLYPH_PROPERTIES*, uint, IDWriteFontFace*, float, float, DWRITE_MATRIX*, int, int, int, DWRITE_SCRIPT_ANALYSIS*, ushort*, DWRITE_TYPOGRAPHIC_FEATURES**, uint*, uint, float*, DWRITE_GLYPH_OFFSET*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="textString">textString</param>, <param name="clusterMap">clusterMap</param>, <param name="textProps">textProps</param>, <param name="textLength">textLength</param>, <param name="glyphIndices">glyphIndices</param>, <param name="glyphProps">glyphProps</param>, <param name="glyphCount">glyphCount</param>, <param name="fontFace">fontFace</param>, <param name="fontEmSize">fontEmSize</param>, <param name="pixelsPerDip">pixelsPerDip</param>, <param name="transform">transform</param>, <param name="useGdiNatural">useGdiNatural</param>, <param name="isSideways">isSideways</param>, <param name="isRightToLeft">isRightToLeft</param>, <param name="scriptAnalysis">scriptAnalysis</param>, <param name="localeName">localeName</param>, <param name="features">features</param>, <param name="featureRangeLengths">featureRangeLengths</param>, <param name="featureRanges">featureRanges</param>, <param name="glyphAdvances">glyphAdvances</param>, <param name="glyphOffsets">glyphOffsets</param>);
        </code>
                </body>
            </function>
            <function name="ApplyCharacterSpacing" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="leadingSpacing">
                    <type>float</type>
                </param>
                <param name="trailingSpacing">
                    <type>float</type>
                </param>
                <param name="minimumAdvanceWidth">
                    <type>float</type>
                </param>
                <param name="textLength">
                    <type>uint</type>
                </param>
                <param name="glyphCount">
                    <type>uint</type>
                </param>
                <param name="clusterMap">
                    <type>ushort*</type>
                </param>
                <param name="glyphAdvances">
                    <type>float*</type>
                </param>
                <param name="glyphOffsets">
                    <type>DWRITE_GLYPH_OFFSET*</type>
                </param>
                <param name="glyphProperties">
                    <type>DWRITE_SHAPING_GLYPH_PROPERTIES*</type>
                </param>
                <param name="modifiedGlyphAdvances">
                    <type>float*</type>
                </param>
                <param name="modifiedGlyphOffsets">
                    <type>DWRITE_GLYPH_OFFSET*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, float, float, float, uint, uint, ushort*, float*, DWRITE_GLYPH_OFFSET*, DWRITE_SHAPING_GLYPH_PROPERTIES*, float*, DWRITE_GLYPH_OFFSET*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="leadingSpacing">leadingSpacing</param>, <param name="trailingSpacing">trailingSpacing</param>, <param name="minimumAdvanceWidth">minimumAdvanceWidth</param>, <param name="textLength">textLength</param>, <param name="glyphCount">glyphCount</param>, <param name="clusterMap">clusterMap</param>, <param name="glyphAdvances">glyphAdvances</param>, <param name="glyphOffsets">glyphOffsets</param>, <param name="glyphProperties">glyphProperties</param>, <param name="modifiedGlyphAdvances">modifiedGlyphAdvances</param>, <param name="modifiedGlyphOffsets">modifiedGlyphOffsets</param>);
        </code>
                </body>
            </function>
            <function name="GetBaseline" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontFace">
                    <type>IDWriteFontFace*</type>
                </param>
                <param name="baseline">
                    <type>DWRITE_BASELINE</type>
                </param>
                <param name="isVertical">
                    <type>int</type>
                </param>
                <param name="isSimulationAllowed">
                    <type>int</type>
                </param>
                <param name="scriptAnalysis">
                    <type>DWRITE_SCRIPT_ANALYSIS</type>
                </param>
                <param name="localeName">
                    <type>ushort*</type>
                </param>
                <param name="baselineCoordinate">
                    <type>int*</type>
                </param>
                <param name="exists">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, IDWriteFontFace*, DWRITE_BASELINE, int, int, DWRITE_SCRIPT_ANALYSIS, ushort*, int*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="fontFace">fontFace</param>, <param name="baseline">baseline</param>, <param name="isVertical">isVertical</param>, <param name="isSimulationAllowed">isSimulationAllowed</param>, <param name="scriptAnalysis">scriptAnalysis</param>, <param name="localeName">localeName</param>, <param name="baselineCoordinate">baselineCoordinate</param>, <param name="exists">exists</param>);
        </code>
                </body>
            </function>
            <function name="AnalyzeVerticalGlyphOrientation" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="analysisSource">
                    <type>IDWriteTextAnalysisSource1*</type>
                </param>
                <param name="textPosition">
                    <type>uint</type>
                </param>
                <param name="textLength">
                    <type>uint</type>
                </param>
                <param name="analysisSink">
                    <type>IDWriteTextAnalysisSink1*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, IDWriteTextAnalysisSource1*, uint, uint, IDWriteTextAnalysisSink1*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="analysisSource">analysisSource</param>, <param name="textPosition">textPosition</param>, <param name="textLength">textLength</param>, <param name="analysisSink">analysisSink</param>);
        </code>
                </body>
            </function>
            <function name="GetGlyphOrientationTransform" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="glyphOrientationAngle">
                    <type>DWRITE_GLYPH_ORIENTATION_ANGLE</type>
                </param>
                <param name="isSideways">
                    <type>int</type>
                </param>
                <param name="transform">
                    <type>DWRITE_MATRIX*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, DWRITE_GLYPH_ORIENTATION_ANGLE, int, DWRITE_MATRIX*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="glyphOrientationAngle">glyphOrientationAngle</param>, <param name="isSideways">isSideways</param>, <param name="transform">transform</param>);
        </code>
                </body>
            </function>
            <function name="GetScriptProperties" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="scriptAnalysis">
                    <type>DWRITE_SCRIPT_ANALYSIS</type>
                </param>
                <param name="scriptProperties">
                    <type>DWRITE_SCRIPT_PROPERTIES*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, DWRITE_SCRIPT_ANALYSIS, DWRITE_SCRIPT_PROPERTIES*, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="scriptAnalysis">scriptAnalysis</param>, <param name="scriptProperties">scriptProperties</param>);
        </code>
                </body>
            </function>
            <function name="GetTextComplexity" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="textString">
                    <type>ushort*</type>
                </param>
                <param name="textLength">
                    <type>uint</type>
                </param>
                <param name="fontFace">
                    <type>IDWriteFontFace*</type>
                </param>
                <param name="isTextSimple">
                    <type>int*</type>
                </param>
                <param name="textLengthRead">
                    <type>uint*</type>
                </param>
                <param name="glyphIndices">
                    <type>ushort*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, ushort*, uint, IDWriteFontFace*, int*, uint*, ushort*, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="textString">textString</param>, <param name="textLength">textLength</param>, <param name="fontFace">fontFace</param>, <param name="isTextSimple">isTextSimple</param>, <param name="textLengthRead">textLengthRead</param>, <param name="glyphIndices">glyphIndices</param>);
        </code>
                </body>
            </function>
            <function name="GetJustificationOpportunities" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontFace">
                    <type>IDWriteFontFace*</type>
                </param>
                <param name="fontEmSize">
                    <type>float</type>
                </param>
                <param name="scriptAnalysis">
                    <type>DWRITE_SCRIPT_ANALYSIS</type>
                </param>
                <param name="textLength">
                    <type>uint</type>
                </param>
                <param name="glyphCount">
                    <type>uint</type>
                </param>
                <param name="textString">
                    <type>ushort*</type>
                </param>
                <param name="clusterMap">
                    <type>ushort*</type>
                </param>
                <param name="glyphProperties">
                    <type>DWRITE_SHAPING_GLYPH_PROPERTIES*</type>
                </param>
                <param name="justificationOpportunities">
                    <type>DWRITE_JUSTIFICATION_OPPORTUNITY*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, IDWriteFontFace*, float, DWRITE_SCRIPT_ANALYSIS, uint, uint, ushort*, ushort*, DWRITE_SHAPING_GLYPH_PROPERTIES*, DWRITE_JUSTIFICATION_OPPORTUNITY*, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="fontFace">fontFace</param>, <param name="fontEmSize">fontEmSize</param>, <param name="scriptAnalysis">scriptAnalysis</param>, <param name="textLength">textLength</param>, <param name="glyphCount">glyphCount</param>, <param name="textString">textString</param>, <param name="clusterMap">clusterMap</param>, <param name="glyphProperties">glyphProperties</param>, <param name="justificationOpportunities">justificationOpportunities</param>);
        </code>
                </body>
            </function>
            <function name="JustifyGlyphAdvances" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lineWidth">
                    <type>float</type>
                </param>
                <param name="glyphCount">
                    <type>uint</type>
                </param>
                <param name="justificationOpportunities">
                    <type>DWRITE_JUSTIFICATION_OPPORTUNITY*</type>
                </param>
                <param name="glyphAdvances">
                    <type>float*</type>
                </param>
                <param name="glyphOffsets">
                    <type>DWRITE_GLYPH_OFFSET*</type>
                </param>
                <param name="justifiedGlyphAdvances">
                    <type>float*</type>
                </param>
                <param name="justifiedGlyphOffsets">
                    <type>DWRITE_GLYPH_OFFSET*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, float, uint, DWRITE_JUSTIFICATION_OPPORTUNITY*, float*, DWRITE_GLYPH_OFFSET*, float*, DWRITE_GLYPH_OFFSET*, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="lineWidth">lineWidth</param>, <param name="glyphCount">glyphCount</param>, <param name="justificationOpportunities">justificationOpportunities</param>, <param name="glyphAdvances">glyphAdvances</param>, <param name="glyphOffsets">glyphOffsets</param>, <param name="justifiedGlyphAdvances">justifiedGlyphAdvances</param>, <param name="justifiedGlyphOffsets">justifiedGlyphOffsets</param>);
        </code>
                </body>
            </function>
            <function name="GetJustifiedGlyphs" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontFace">
                    <type>IDWriteFontFace*</type>
                </param>
                <param name="fontEmSize">
                    <type>float</type>
                </param>
                <param name="scriptAnalysis">
                    <type>DWRITE_SCRIPT_ANALYSIS</type>
                </param>
                <param name="textLength">
                    <type>uint</type>
                </param>
                <param name="glyphCount">
                    <type>uint</type>
                </param>
                <param name="maxGlyphCount">
                    <type>uint</type>
                </param>
                <param name="clusterMap">
                    <type>ushort*</type>
                </param>
                <param name="glyphIndices">
                    <type>ushort*</type>
                </param>
                <param name="glyphAdvances">
                    <type>float*</type>
                </param>
                <param name="justifiedGlyphAdvances">
                    <type>float*</type>
                </param>
                <param name="justifiedGlyphOffsets">
                    <type>DWRITE_GLYPH_OFFSET*</type>
                </param>
                <param name="glyphProperties">
                    <type>DWRITE_SHAPING_GLYPH_PROPERTIES*</type>
                </param>
                <param name="actualGlyphCount">
                    <type>uint*</type>
                </param>
                <param name="modifiedClusterMap">
                    <type>ushort*</type>
                </param>
                <param name="modifiedGlyphIndices">
                    <type>ushort*</type>
                </param>
                <param name="modifiedGlyphAdvances">
                    <type>float*</type>
                </param>
                <param name="modifiedGlyphOffsets">
                    <type>DWRITE_GLYPH_OFFSET*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, IDWriteFontFace*, float, DWRITE_SCRIPT_ANALYSIS, uint, uint, uint, ushort*, ushort*, float*, float*, DWRITE_GLYPH_OFFSET*, DWRITE_SHAPING_GLYPH_PROPERTIES*, uint*, ushort*, ushort*, float*, DWRITE_GLYPH_OFFSET*, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="fontFace">fontFace</param>, <param name="fontEmSize">fontEmSize</param>, <param name="scriptAnalysis">scriptAnalysis</param>, <param name="textLength">textLength</param>, <param name="glyphCount">glyphCount</param>, <param name="maxGlyphCount">maxGlyphCount</param>, <param name="clusterMap">clusterMap</param>, <param name="glyphIndices">glyphIndices</param>, <param name="glyphAdvances">glyphAdvances</param>, <param name="justifiedGlyphAdvances">justifiedGlyphAdvances</param>, <param name="justifiedGlyphOffsets">justifiedGlyphOffsets</param>, <param name="glyphProperties">glyphProperties</param>, <param name="actualGlyphCount">actualGlyphCount</param>, <param name="modifiedClusterMap">modifiedClusterMap</param>, <param name="modifiedGlyphIndices">modifiedGlyphIndices</param>, <param name="modifiedGlyphAdvances">modifiedGlyphAdvances</param>, <param name="modifiedGlyphOffsets">modifiedGlyphOffsets</param>);
        </code>
                </body>
            </function>
            <function name="GetGlyphOrientationTransform" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="glyphOrientationAngle">
                    <type>DWRITE_GLYPH_ORIENTATION_ANGLE</type>
                </param>
                <param name="isSideways">
                    <type>int</type>
                </param>
                <param name="originX">
                    <type>float</type>
                </param>
                <param name="originY">
                    <type>float</type>
                </param>
                <param name="transform">
                    <type>DWRITE_MATRIX*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, DWRITE_GLYPH_ORIENTATION_ANGLE, int, float, float, DWRITE_MATRIX*, int&gt;)(lpVtbl[<vtbl explicit="False">19</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="glyphOrientationAngle">glyphOrientationAngle</param>, <param name="isSideways">isSideways</param>, <param name="originX">originX</param>, <param name="originY">originY</param>, <param name="transform">transform</param>);
        </code>
                </body>
            </function>
            <function name="GetTypographicFeatures" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontFace">
                    <type>IDWriteFontFace*</type>
                </param>
                <param name="scriptAnalysis">
                    <type>DWRITE_SCRIPT_ANALYSIS</type>
                </param>
                <param name="localeName">
                    <type>ushort*</type>
                </param>
                <param name="maxTagCount">
                    <type>uint</type>
                </param>
                <param name="actualTagCount">
                    <type>uint*</type>
                </param>
                <param name="tags">
                    <type>DWRITE_FONT_FEATURE_TAG*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, IDWriteFontFace*, DWRITE_SCRIPT_ANALYSIS, ushort*, uint, uint*, DWRITE_FONT_FEATURE_TAG*, int&gt;)(lpVtbl[<vtbl explicit="False">20</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="fontFace">fontFace</param>, <param name="scriptAnalysis">scriptAnalysis</param>, <param name="localeName">localeName</param>, <param name="maxTagCount">maxTagCount</param>, <param name="actualTagCount">actualTagCount</param>, <param name="tags">tags</param>);
        </code>
                </body>
            </function>
            <function name="CheckTypographicFeature" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontFace">
                    <type>IDWriteFontFace*</type>
                </param>
                <param name="scriptAnalysis">
                    <type>DWRITE_SCRIPT_ANALYSIS</type>
                </param>
                <param name="localeName">
                    <type>ushort*</type>
                </param>
                <param name="featureTag">
                    <type>DWRITE_FONT_FEATURE_TAG</type>
                </param>
                <param name="glyphCount">
                    <type>uint</type>
                </param>
                <param name="glyphIndices">
                    <type>ushort*</type>
                </param>
                <param name="featureApplies">
                    <type>byte*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextAnalyzer2*, IDWriteFontFace*, DWRITE_SCRIPT_ANALYSIS, ushort*, DWRITE_FONT_FEATURE_TAG, uint, ushort*, byte*, int&gt;)(lpVtbl[<vtbl explicit="False">21</vtbl>]))(<param special="thisPtr">(IDWriteTextAnalyzer2*)Unsafe.AsPointer(ref this)</param>, <param name="fontFace">fontFace</param>, <param name="scriptAnalysis">scriptAnalysis</param>, <param name="localeName">localeName</param>, <param name="featureTag">featureTag</param>, <param name="glyphCount">glyphCount</param>, <param name="glyphIndices">glyphIndices</param>, <param name="featureApplies">featureApplies</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
