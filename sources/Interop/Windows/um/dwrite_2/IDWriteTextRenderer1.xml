<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dwrite_2.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDWriteTextRenderer1" access="public" native="struct IDWriteTextRenderer1 : IDWriteTextRenderer" uuid="d3e0e934-22a0-427e-aae4-7d9574b59db1" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextRenderer1*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDWriteTextRenderer1*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextRenderer1*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDWriteTextRenderer1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextRenderer1*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDWriteTextRenderer1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="IsPixelSnappingDisabled" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="clientDrawingContext">
                    <type>void*</type>
                </param>
                <param name="isDisabled">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextRenderer1*, void*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDWriteTextRenderer1*)Unsafe.AsPointer(ref this)</param>, <param name="clientDrawingContext">clientDrawingContext</param>, <param name="isDisabled">isDisabled</param>);
        </code>
                </body>
            </function>
            <function name="GetCurrentTransform" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="clientDrawingContext">
                    <type>void*</type>
                </param>
                <param name="transform">
                    <type>DWRITE_MATRIX*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextRenderer1*, void*, DWRITE_MATRIX*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDWriteTextRenderer1*)Unsafe.AsPointer(ref this)</param>, <param name="clientDrawingContext">clientDrawingContext</param>, <param name="transform">transform</param>);
        </code>
                </body>
            </function>
            <function name="GetPixelsPerDip" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="clientDrawingContext">
                    <type>void*</type>
                </param>
                <param name="pixelsPerDip">
                    <type>float*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextRenderer1*, void*, float*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDWriteTextRenderer1*)Unsafe.AsPointer(ref this)</param>, <param name="clientDrawingContext">clientDrawingContext</param>, <param name="pixelsPerDip">pixelsPerDip</param>);
        </code>
                </body>
            </function>
            <function name="DrawGlyphRun" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="clientDrawingContext">
                    <type>void*</type>
                </param>
                <param name="baselineOriginX">
                    <type>float</type>
                </param>
                <param name="baselineOriginY">
                    <type>float</type>
                </param>
                <param name="measuringMode">
                    <type>DWRITE_MEASURING_MODE</type>
                </param>
                <param name="glyphRun">
                    <type>DWRITE_GLYPH_RUN*</type>
                </param>
                <param name="glyphRunDescription">
                    <type>DWRITE_GLYPH_RUN_DESCRIPTION*</type>
                </param>
                <param name="clientDrawingEffect">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextRenderer1*, void*, float, float, DWRITE_MEASURING_MODE, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDWriteTextRenderer1*)Unsafe.AsPointer(ref this)</param>, <param name="clientDrawingContext">clientDrawingContext</param>, <param name="baselineOriginX">baselineOriginX</param>, <param name="baselineOriginY">baselineOriginY</param>, <param name="measuringMode">measuringMode</param>, <param name="glyphRun">glyphRun</param>, <param name="glyphRunDescription">glyphRunDescription</param>, <param name="clientDrawingEffect">clientDrawingEffect</param>);
        </code>
                </body>
            </function>
            <function name="DrawUnderline" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="clientDrawingContext">
                    <type>void*</type>
                </param>
                <param name="baselineOriginX">
                    <type>float</type>
                </param>
                <param name="baselineOriginY">
                    <type>float</type>
                </param>
                <param name="underline">
                    <type>DWRITE_UNDERLINE*</type>
                </param>
                <param name="clientDrawingEffect">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextRenderer1*, void*, float, float, DWRITE_UNDERLINE*, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDWriteTextRenderer1*)Unsafe.AsPointer(ref this)</param>, <param name="clientDrawingContext">clientDrawingContext</param>, <param name="baselineOriginX">baselineOriginX</param>, <param name="baselineOriginY">baselineOriginY</param>, <param name="underline">underline</param>, <param name="clientDrawingEffect">clientDrawingEffect</param>);
        </code>
                </body>
            </function>
            <function name="DrawStrikethrough" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="clientDrawingContext">
                    <type>void*</type>
                </param>
                <param name="baselineOriginX">
                    <type>float</type>
                </param>
                <param name="baselineOriginY">
                    <type>float</type>
                </param>
                <param name="strikethrough">
                    <type>DWRITE_STRIKETHROUGH*</type>
                </param>
                <param name="clientDrawingEffect">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextRenderer1*, void*, float, float, DWRITE_STRIKETHROUGH*, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDWriteTextRenderer1*)Unsafe.AsPointer(ref this)</param>, <param name="clientDrawingContext">clientDrawingContext</param>, <param name="baselineOriginX">baselineOriginX</param>, <param name="baselineOriginY">baselineOriginY</param>, <param name="strikethrough">strikethrough</param>, <param name="clientDrawingEffect">clientDrawingEffect</param>);
        </code>
                </body>
            </function>
            <function name="DrawInlineObject" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="clientDrawingContext">
                    <type>void*</type>
                </param>
                <param name="originX">
                    <type>float</type>
                </param>
                <param name="originY">
                    <type>float</type>
                </param>
                <param name="inlineObject">
                    <type>IDWriteInlineObject*</type>
                </param>
                <param name="isSideways">
                    <type>int</type>
                </param>
                <param name="isRightToLeft">
                    <type>int</type>
                </param>
                <param name="clientDrawingEffect">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextRenderer1*, void*, float, float, IDWriteInlineObject*, int, int, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IDWriteTextRenderer1*)Unsafe.AsPointer(ref this)</param>, <param name="clientDrawingContext">clientDrawingContext</param>, <param name="originX">originX</param>, <param name="originY">originY</param>, <param name="inlineObject">inlineObject</param>, <param name="isSideways">isSideways</param>, <param name="isRightToLeft">isRightToLeft</param>, <param name="clientDrawingEffect">clientDrawingEffect</param>);
        </code>
                </body>
            </function>
            <function name="DrawGlyphRun" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="clientDrawingContext">
                    <type>void*</type>
                </param>
                <param name="baselineOriginX">
                    <type>float</type>
                </param>
                <param name="baselineOriginY">
                    <type>float</type>
                </param>
                <param name="orientationAngle">
                    <type>DWRITE_GLYPH_ORIENTATION_ANGLE</type>
                </param>
                <param name="measuringMode">
                    <type>DWRITE_MEASURING_MODE</type>
                </param>
                <param name="glyphRun">
                    <type>DWRITE_GLYPH_RUN*</type>
                </param>
                <param name="glyphRunDescription">
                    <type>DWRITE_GLYPH_RUN_DESCRIPTION*</type>
                </param>
                <param name="clientDrawingEffect">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextRenderer1*, void*, float, float, DWRITE_GLYPH_ORIENTATION_ANGLE, DWRITE_MEASURING_MODE, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IDWriteTextRenderer1*)Unsafe.AsPointer(ref this)</param>, <param name="clientDrawingContext">clientDrawingContext</param>, <param name="baselineOriginX">baselineOriginX</param>, <param name="baselineOriginY">baselineOriginY</param>, <param name="orientationAngle">orientationAngle</param>, <param name="measuringMode">measuringMode</param>, <param name="glyphRun">glyphRun</param>, <param name="glyphRunDescription">glyphRunDescription</param>, <param name="clientDrawingEffect">clientDrawingEffect</param>);
        </code>
                </body>
            </function>
            <function name="DrawUnderline" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="clientDrawingContext">
                    <type>void*</type>
                </param>
                <param name="baselineOriginX">
                    <type>float</type>
                </param>
                <param name="baselineOriginY">
                    <type>float</type>
                </param>
                <param name="orientationAngle">
                    <type>DWRITE_GLYPH_ORIENTATION_ANGLE</type>
                </param>
                <param name="underline">
                    <type>DWRITE_UNDERLINE*</type>
                </param>
                <param name="clientDrawingEffect">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextRenderer1*, void*, float, float, DWRITE_GLYPH_ORIENTATION_ANGLE, DWRITE_UNDERLINE*, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IDWriteTextRenderer1*)Unsafe.AsPointer(ref this)</param>, <param name="clientDrawingContext">clientDrawingContext</param>, <param name="baselineOriginX">baselineOriginX</param>, <param name="baselineOriginY">baselineOriginY</param>, <param name="orientationAngle">orientationAngle</param>, <param name="underline">underline</param>, <param name="clientDrawingEffect">clientDrawingEffect</param>);
        </code>
                </body>
            </function>
            <function name="DrawStrikethrough" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="clientDrawingContext">
                    <type>void*</type>
                </param>
                <param name="baselineOriginX">
                    <type>float</type>
                </param>
                <param name="baselineOriginY">
                    <type>float</type>
                </param>
                <param name="orientationAngle">
                    <type>DWRITE_GLYPH_ORIENTATION_ANGLE</type>
                </param>
                <param name="strikethrough">
                    <type>DWRITE_STRIKETHROUGH*</type>
                </param>
                <param name="clientDrawingEffect">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextRenderer1*, void*, float, float, DWRITE_GLYPH_ORIENTATION_ANGLE, DWRITE_STRIKETHROUGH*, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IDWriteTextRenderer1*)Unsafe.AsPointer(ref this)</param>, <param name="clientDrawingContext">clientDrawingContext</param>, <param name="baselineOriginX">baselineOriginX</param>, <param name="baselineOriginY">baselineOriginY</param>, <param name="orientationAngle">orientationAngle</param>, <param name="strikethrough">strikethrough</param>, <param name="clientDrawingEffect">clientDrawingEffect</param>);
        </code>
                </body>
            </function>
            <function name="DrawInlineObject" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="clientDrawingContext">
                    <type>void*</type>
                </param>
                <param name="originX">
                    <type>float</type>
                </param>
                <param name="originY">
                    <type>float</type>
                </param>
                <param name="orientationAngle">
                    <type>DWRITE_GLYPH_ORIENTATION_ANGLE</type>
                </param>
                <param name="inlineObject">
                    <type>IDWriteInlineObject*</type>
                </param>
                <param name="isSideways">
                    <type>int</type>
                </param>
                <param name="isRightToLeft">
                    <type>int</type>
                </param>
                <param name="clientDrawingEffect">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextRenderer1*, void*, float, float, DWRITE_GLYPH_ORIENTATION_ANGLE, IDWriteInlineObject*, int, int, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IDWriteTextRenderer1*)Unsafe.AsPointer(ref this)</param>, <param name="clientDrawingContext">clientDrawingContext</param>, <param name="originX">originX</param>, <param name="originY">originY</param>, <param name="orientationAngle">orientationAngle</param>, <param name="inlineObject">inlineObject</param>, <param name="isSideways">isSideways</param>, <param name="isRightToLeft">isRightToLeft</param>, <param name="clientDrawingEffect">clientDrawingEffect</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
