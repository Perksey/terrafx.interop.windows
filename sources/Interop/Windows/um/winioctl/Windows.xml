<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/winioctl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <class name="Windows" access="public" static="true" unsafe="true">
            <function name="DeviceDsmParameterBlock" access="public" static="true">
                <type native="PVOID">void*</type>
                <param name="Input">
                    <type>DEVICE_MANAGE_DATA_SET_ATTRIBUTES*</type>
                </param>
                <code>
                    <value></value>return (void*)((nuint)Input + Input-&gt;ParameterBlockOffset);
            </code>
            </function>
            <function name="DeviceDsmDataSetRanges" access="public" static="true">
                <type native="PDEVICE_DSM_RANGE">DEVICE_DATA_SET_RANGE*</type>
                <param name="Input">
                    <type>DEVICE_MANAGE_DATA_SET_ATTRIBUTES*</type>
                </param>
                <code>
                    <value></value>return (DEVICE_DATA_SET_RANGE*)((nuint)Input + Input-&gt;DataSetRangesOffset);
            </code>
            </function>
            <function name="DeviceDsmNumberOfDataSetRanges" access="public" static="true">
                <type native="DWORD">uint</type>
                <param name="Input">
                    <type>DEVICE_MANAGE_DATA_SET_ATTRIBUTES*</type>
                </param>
                <code>return Input-&gt;DataSetRangesLength / (uint)(sizeof(DEVICE_DATA_SET_RANGE));
            </code>
            </function>
            <function name="DeviceDsmGetInputLength" access="public" static="true">
                <type native="DWORD">uint</type>
                <param name="Definition">
                    <type>DEVICE_DSM_DEFINITION*</type>
                </param>
                <param name="ParameterBlockLength">
                    <type>uint</type>
                </param>
                <param name="NumberOfDataSetRanges">
                    <type>uint</type>
                </param>
                <code>
                    <unchecked>
                        <value></value>
                    </unchecked>uint Bytes = 28;

            if (ParameterBlockLength != 0)
            {
                Bytes = (((Bytes) + ((Definition-&gt;ParameterBlockAlignment) - 1)) / (Definition-&gt;ParameterBlockAlignment) * (Definition-&gt;ParameterBlockAlignment));
                Bytes += ParameterBlockLength;
            }

            if (NumberOfDataSetRanges != 0)
            {
                Bytes = (((Bytes) + ((8) - 1)) / (8) * (8));
                Bytes += (uint)(sizeof(DEVICE_DATA_SET_RANGE)) * NumberOfDataSetRanges;
            }

            return Bytes;
            </code>
            </function>
            <function name="DeviceDsmGetNumberOfDataSetRanges" access="public" static="true">
                <type native="DWORD">uint</type>
                <param name="Definition">
                    <type>DEVICE_DSM_DEFINITION*</type>
                </param>
                <param name="InputLength">
                    <type>uint</type>
                </param>
                <param name="ParameterBlockLength">
                    <type>uint</type>
                </param>
                <code>
                    <unchecked>
                        <value></value>
                    </unchecked>uint Bytes = 28;

            if (ParameterBlockLength != 0)
            {
                Bytes = (((Bytes) + ((Definition-&gt;ParameterBlockAlignment) - 1)) / (Definition-&gt;ParameterBlockAlignment) * (Definition-&gt;ParameterBlockAlignment));
                Bytes += ParameterBlockLength;
            }

            Bytes = (((Bytes) + ((8) - 1)) / (8) * (8));
            Bytes = InputLength - Bytes;
            return Bytes / (uint)(sizeof(DEVICE_DATA_SET_RANGE));
            </code>
            </function>
            <function name="DeviceDsmInitializeInput" access="public" static="true">
                <type>void</type>
                <param name="Definition">
                    <type>DEVICE_DSM_DEFINITION*</type>
                </param>
                <param name="Input">
                    <type>DEVICE_MANAGE_DATA_SET_ATTRIBUTES*</type>
                </param>
                <param name="InputLength">
                    <type>uint</type>
                </param>
                <param name="Flags">
                    <type>uint</type>
                </param>
                <param name="Parameters">
                    <type>void*</type>
                </param>
                <param name="ParameterBlockLength">
                    <type>uint</type>
                </param>
                <code>
                    <unchecked>
                        <value></value>
                    </unchecked>uint Bytes = 28;

            Unsafe.InitBlockUnaligned((Input), 0, (InputLength));
            Input-&gt;Size = Bytes;
            Input-&gt;Action = Definition-&gt;Action;
            Input-&gt;Flags = Flags;
            if (ParameterBlockLength == 0)
            {
                goto Cleanup;
            }

            Bytes = (((Bytes) + ((Definition-&gt;ParameterBlockAlignment) - 1)) / (Definition-&gt;ParameterBlockAlignment) * (Definition-&gt;ParameterBlockAlignment));
            Input-&gt;ParameterBlockOffset = Bytes;
            Input-&gt;ParameterBlockLength = ParameterBlockLength;
            if (Parameters == null)
            {
                goto Cleanup;
            }

            Unsafe.CopyBlockUnaligned((DeviceDsmParameterBlock(Input)), (Parameters), (Input-&gt;ParameterBlockLength));
            Cleanup:
            return;
            </code>
            </function>
            <function name="DeviceDsmAddDataSetRange" access="public" static="true">
                <type native="BOOLEAN">byte</type>
                <param name="Input">
                    <type>DEVICE_MANAGE_DATA_SET_ATTRIBUTES*</type>
                </param>
                <param name="InputLength">
                    <type>uint</type>
                </param>
                <param name="Offset">
                    <type>long</type>
                </param>
                <param name="Length">
                    <type>ulong</type>
                </param>
                <code>
                    <value></value>uint Bytes = 0;
            uint Index = 0;
            DEVICE_DATA_SET_RANGE* Ranges = null;
            byte Return = 0;

            if (Input-&gt;Flags &amp; 0x00000001 != 0)
            {
                goto Cleanup;
            }

            if (Input-&gt;DataSetRangesLength == 0)
            {
                if (Input-&gt;ParameterBlockLength == 0)
                {
                    Bytes = (uint)(sizeof(DEVICE_MANAGE_DATA_SET_ATTRIBUTES));
                }
                else
                {
                    Bytes = Input-&gt;ParameterBlockOffset + Input-&gt;ParameterBlockLength;
                }

                Bytes = (((Bytes) + ((8) - 1)) / (8) * (8));
            }
            else
            {
                Bytes = Input-&gt;DataSetRangesOffset + Input-&gt;DataSetRangesLength;
            }

            if ((InputLength - Bytes) &lt; sizeof(DEVICE_DATA_SET_RANGE))
            {
                goto Cleanup;
            }

            if (Input-&gt;DataSetRangesOffset == 0)
            {
                Input-&gt;DataSetRangesOffset = Bytes;
            }

            Ranges = DeviceDsmDataSetRanges(Input);
            Index = DeviceDsmNumberOfDataSetRanges(Input);
            Ranges[Index].StartingOffset = Offset;
            Ranges[Index].LengthInBytes = Length;
            Input-&gt;DataSetRangesLength += (uint)(sizeof(DEVICE_DATA_SET_RANGE));
            Return = 1;
            Cleanup:
            return Return;
            </code>
            </function>
            <function name="DeviceDsmValidateInput" access="public" static="true">
                <type native="BOOLEAN">byte</type>
                <param name="Definition">
                    <type>DEVICE_DSM_DEFINITION*</type>
                </param>
                <param name="Input">
                    <type>DEVICE_MANAGE_DATA_SET_ATTRIBUTES*</type>
                </param>
                <param name="InputLength">
                    <type>uint</type>
                </param>
                <code>
                    <value></value>
                    <value></value>
                    <value></value>
                    <value></value>uint Max = 0;
            uint Min = 0;
            byte Valid = 0;

            if (Definition-&gt;Action != Input-&gt;Action)
            {
                goto Cleanup;
            }

            if (Definition-&gt;ParameterBlockLength != 0)
            {
                Min = (uint)(sizeof(DEVICE_MANAGE_DATA_SET_ATTRIBUTES));
                Max = InputLength;
                if (Input-&gt;ParameterBlockOffset &lt; Min || Input-&gt;ParameterBlockOffset &gt; Max || Input-&gt;ParameterBlockOffset % Definition-&gt;ParameterBlockAlignment != 0)
                {
                    goto Cleanup;
                }

                Min = Definition-&gt;ParameterBlockLength;
                Max = InputLength - Input-&gt;ParameterBlockOffset;
                if (Input-&gt;ParameterBlockLength &lt; Min || Input-&gt;ParameterBlockLength &gt; Max)
                {
                    goto Cleanup;
                }
            }

            if (Input-&gt;Flags &amp; 0x00000001 == 0)
            {
                Min = (uint)(sizeof(DEVICE_MANAGE_DATA_SET_ATTRIBUTES));
                Max = InputLength;
                if (Input-&gt;DataSetRangesOffset &lt; Min || Input-&gt;DataSetRangesOffset &gt; Max || Input-&gt;DataSetRangesOffset % 8 != 0)
                {
                    goto Cleanup;
                }

                Min = (uint)(sizeof(DEVICE_DATA_SET_RANGE));
                Max = InputLength - Input-&gt;DataSetRangesOffset;
                if (Input-&gt;DataSetRangesLength &lt; Min || Input-&gt;DataSetRangesLength &gt; Max || Input-&gt;DataSetRangesLength % Min != 0)
                {
                    goto Cleanup;
                }

                if (Definition-&gt;SingleRange != 0 &amp;&amp; Input-&gt;DataSetRangesLength != Min)
                {
                    goto Cleanup;
                }
            }
            else
            {
                if (Input-&gt;DataSetRangesOffset != 0 || Input-&gt;DataSetRangesLength != 0)
                {
                    goto Cleanup;
                }
            }

            if (Input-&gt;ParameterBlockOffset &lt; Input-&gt;DataSetRangesOffset &amp;&amp; Input-&gt;ParameterBlockOffset + Input-&gt;ParameterBlockLength &gt; Input-&gt;DataSetRangesOffset)
            {
                goto Cleanup;
            }

            if (Input-&gt;DataSetRangesOffset &lt; Input-&gt;ParameterBlockOffset &amp;&amp; Input-&gt;DataSetRangesOffset + Input-&gt;DataSetRangesLength &gt; Input-&gt;ParameterBlockOffset)
            {
                goto Cleanup;
            }

            Valid = 1;
            Cleanup:
            return Valid;
            </code>
            </function>
            <function name="DeviceDsmOutputBlock" access="public" static="true">
                <type native="PVOID">void*</type>
                <param name="Output">
                    <type>DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT*</type>
                </param>
                <code>
                    <value></value>return (void*)((nuint)Output + Output-&gt;OutputBlockOffset);
            </code>
            </function>
            <function name="DeviceDsmGetOutputLength" access="public" static="true">
                <type native="DWORD">uint</type>
                <param name="Definition">
                    <type>DEVICE_DSM_DEFINITION*</type>
                </param>
                <param name="OutputBlockLength">
                    <type>uint</type>
                </param>
                <code>uint Bytes = 0;

            if (Definition-&gt;HasOutput == 0)
            {
                goto Cleanup;
            }

            Bytes = (uint)(sizeof(DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT));
            if (Definition-&gt;OutputBlockLength == 0)
            {
                goto Cleanup;
            }

            if (Definition-&gt;OutputBlockLength &gt; OutputBlockLength)
            {
                OutputBlockLength = Definition-&gt;OutputBlockLength;
            }

            Bytes = (((Bytes) + ((Definition-&gt;OutputBlockAlignment) - 1)) / (Definition-&gt;OutputBlockAlignment) * (Definition-&gt;OutputBlockAlignment));
            Bytes += OutputBlockLength;
            Cleanup:
            return Bytes;
            </code>
            </function>
            <function name="DeviceDsmValidateOutputLength" access="public" static="true">
                <type native="BOOLEAN">byte</type>
                <param name="Definition">
                    <type>DEVICE_DSM_DEFINITION*</type>
                </param>
                <param name="OutputLength">
                    <type>uint</type>
                </param>
                <code>uint Bytes = DeviceDsmGetOutputLength(Definition, 0);

            return (byte)((OutputLength &gt;= Bytes) ? 1 : 0);
            </code>
            </function>
            <function name="DeviceDsmGetOutputBlockLength" access="public" static="true">
                <type native="DWORD">uint</type>
                <param name="Definition">
                    <type>DEVICE_DSM_DEFINITION*</type>
                </param>
                <param name="OutputLength">
                    <type>uint</type>
                </param>
                <code>uint Bytes = 0;

            if (Definition-&gt;OutputBlockLength == 0)
            {
                goto Cleanup;
            }

            Bytes = (uint)(sizeof(DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT));
            Bytes = (((Bytes) + ((Definition-&gt;OutputBlockAlignment) - 1)) / (Definition-&gt;OutputBlockAlignment) * (Definition-&gt;OutputBlockAlignment));
            Bytes = OutputLength - Bytes;
            Cleanup:
            return Bytes;
            </code>
            </function>
            <function name="DeviceDsmInitializeOutput" access="public" static="true">
                <type>void</type>
                <param name="Definition">
                    <type>DEVICE_DSM_DEFINITION*</type>
                </param>
                <param name="Output">
                    <type>DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT*</type>
                </param>
                <param name="OutputLength">
                    <type>uint</type>
                </param>
                <param name="Flags">
                    <type>uint</type>
                </param>
                <code>
                    <unchecked>
                        <value></value>
                    </unchecked>uint Bytes = 36;

            Unsafe.InitBlockUnaligned((Output), 0, (OutputLength));
            Output-&gt;Size = Bytes;
            Output-&gt;Action = Definition-&gt;Action;
            Output-&gt;Flags = Flags;
            if (Definition-&gt;OutputBlockLength != 0)
            {
                Bytes = (((Bytes) + ((Definition-&gt;OutputBlockAlignment) - 1)) / (Definition-&gt;OutputBlockAlignment) * (Definition-&gt;OutputBlockAlignment));
                Output-&gt;OutputBlockOffset = Bytes;
                Output-&gt;OutputBlockLength = OutputLength - Bytes;
            }

            return;
            </code>
            </function>
            <function name="DeviceDsmValidateOutput" access="public" static="true">
                <type native="BOOLEAN">byte</type>
                <param name="Definition">
                    <type>DEVICE_DSM_DEFINITION*</type>
                </param>
                <param name="Output">
                    <type>DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT*</type>
                </param>
                <param name="OutputLength">
                    <type>uint</type>
                </param>
                <code>
                    <value></value>uint Max = 0;
            uint Min = 0;
            byte Valid = 0;

            if (Definition-&gt;Action != Output-&gt;Action)
            {
                goto Cleanup;
            }

            if (Definition-&gt;HasOutput == 0)
            {
                goto Cleanup;
            }

            if (Definition-&gt;OutputBlockLength != 0)
            {
                Min = (uint)(sizeof(DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT));
                Max = OutputLength;
                if (Output-&gt;OutputBlockOffset &lt; Min || Output-&gt;OutputBlockOffset &gt; Max || Output-&gt;OutputBlockOffset % Definition-&gt;OutputBlockAlignment != 0)
                {
                    goto Cleanup;
                }

                Min = Definition-&gt;OutputBlockLength;
                Max = OutputLength - Output-&gt;OutputBlockOffset;
                if (Output-&gt;OutputBlockLength &lt; Min || Output-&gt;OutputBlockLength &gt; Max)
                {
                    goto Cleanup;
                }
            }
            else
            {
                if (Output-&gt;OutputBlockOffset != 0 || Output-&gt;OutputBlockLength != 0)
                {
                    goto Cleanup;
                }
            }

            Valid = 1;
            Cleanup:
            return Valid;
            </code>
            </function>
            <constant name="DiskClassGuid" access="public">
                <type primitive="False">Guid</type>
                <value>
                    <code>GUID_DEVINTERFACE_DISK
            </code>
                </value>
            </constant>
            <constant name="CdRomClassGuid" access="public">
                <type primitive="False">Guid</type>
                <value>
                    <code>GUID_DEVINTERFACE_CDROM
            </code>
                </value>
            </constant>
            <constant name="PartitionClassGuid" access="public">
                <type primitive="False">Guid</type>
                <value>
                    <code>GUID_DEVINTERFACE_PARTITION
            </code>
                </value>
            </constant>
            <constant name="TapeClassGuid" access="public">
                <type primitive="False">Guid</type>
                <value>
                    <code>GUID_DEVINTERFACE_TAPE
            </code>
                </value>
            </constant>
            <constant name="WriteOnceDiskClassGuid" access="public">
                <type primitive="False">Guid</type>
                <value>
                    <code>GUID_DEVINTERFACE_WRITEONCEDISK
            </code>
                </value>
            </constant>
            <constant name="VolumeClassGuid" access="public">
                <type primitive="False">Guid</type>
                <value>
                    <code>GUID_DEVINTERFACE_VOLUME
            </code>
                </value>
            </constant>
            <constant name="MediumChangerClassGuid" access="public">
                <type primitive="False">Guid</type>
                <value>
                    <code>GUID_DEVINTERFACE_MEDIUMCHANGER
            </code>
                </value>
            </constant>
            <constant name="FloppyClassGuid" access="public">
                <type primitive="False">Guid</type>
                <value>
                    <code>GUID_DEVINTERFACE_FLOPPY
            </code>
                </value>
            </constant>
            <constant name="CdChangerClassGuid" access="public">
                <type primitive="False">Guid</type>
                <value>
                    <code>GUID_DEVINTERFACE_CDCHANGER
            </code>
                </value>
            </constant>
            <constant name="StoragePortClassGuid" access="public">
                <type primitive="False">Guid</type>
                <value>
                    <code>GUID_DEVINTERFACE_STORAGEPORT
            </code>
                </value>
            </constant>
            <constant name="HiddenVolumeClassGuid" access="public">
                <type primitive="False">Guid</type>
                <value>
                    <code>GUID_DEVINTERFACE_HIDDEN_VOLUME
            </code>
                </value>
            </constant>
            <constant name="GUID_CLASS_COMPORT" access="public">
                <type primitive="False">Guid</type>
                <value>
                    <code>GUID_DEVINTERFACE_COMPORT
            </code>
                </value>
            </constant>
            <constant name="GUID_SERENUM_BUS_ENUMERATOR" access="public">
                <type primitive="False">Guid</type>
                <value>
                    <code>GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_BEEP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_CD_ROM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_CD_ROM_FILE_SYSTEM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000003
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_CONTROLLER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_DATALINK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000005
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_DFS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000006
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_DISK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000007
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_DISK_FILE_SYSTEM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_FILE_SYSTEM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000009
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_INPORT_PORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000000a
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_KEYBOARD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000000b
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_MAILSLOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000000c
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_MIDI_IN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000000d
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_MIDI_OUT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000000e
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_MOUSE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000000f
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_MULTI_UNC_PROVIDER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_NAMED_PIPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000011
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_NETWORK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000012
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_NETWORK_BROWSER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000013
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_NETWORK_FILE_SYSTEM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000014
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_NULL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000015
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_PARALLEL_PORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000016
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_PHYSICAL_NETCARD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000017
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_PRINTER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000018
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_SCANNER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000019
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_SERIAL_MOUSE_PORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000001a
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_SERIAL_PORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000001b
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_SCREEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000001c
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_SOUND" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000001d
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_STREAMS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000001e
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_TAPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000001f
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_TAPE_FILE_SYSTEM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_TRANSPORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000021
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_UNKNOWN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000022
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_VIDEO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000023
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_VIRTUAL_DISK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000024
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_WAVE_IN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000025
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_WAVE_OUT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000026
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_8042_PORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000027
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_NETWORK_REDIRECTOR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000028
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_BATTERY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000029
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_BUS_EXTENDER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000002a
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_MODEM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000002b
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_VDM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000002c
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_MASS_STORAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000002d
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_SMB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000002e
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_KS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000002f
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_CHANGER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000030
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_SMARTCARD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000031
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_ACPI" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000032
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_DVD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000033
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_FULLSCREEN_VIDEO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000034
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_DFS_FILE_SYSTEM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000035
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_DFS_VOLUME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000036
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_SERENUM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000037
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_TERMSRV" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000038
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_KSEC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000039
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_FIPS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000003A
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_INFINIBAND" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000003B
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_VMBUS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000003E
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_CRYPT_PROVIDER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000003F
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_WPD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_BLUETOOTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000041
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_MT_COMPOSITE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000042
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_MT_TRANSPORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000043
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_BIOMETRIC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000044
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_PMI" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000045
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_EHSTOR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000046
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_DEVAPI" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000047
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_GPIO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000048
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_USBEX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000049
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_CONSOLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000050
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_NFP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000051
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_SYSENV" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000052
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_VIRTUAL_BLOCK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000053
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_POINT_OF_SERVICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000054
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_STORAGE_REPLICATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000055
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_TRUST_ENV" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000056
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_UCM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000057
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_UCMTCPCI" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000058
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_PERSISTENT_MEMORY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000059
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_NVDIMM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000005a
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_HOLOGRAPHIC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000005b
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_SDFXHCI" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000005c
            </code>
                </value>
            </constant>
            <constant name="FILE_DEVICE_UCMUCSI" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000005d
            </code>
                </value>
            </constant>
            <constant name="METHOD_BUFFERED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="METHOD_IN_DIRECT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="METHOD_OUT_DIRECT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="METHOD_NEITHER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="METHOD_DIRECT_TO_HARDWARE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="METHOD_DIRECT_FROM_HARDWARE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="FILE_ANY_ACCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="FILE_SPECIAL_ACCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0)
            </code>
                </value>
            </constant>
            <constant name="FILE_READ_ACCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0001)
            </code>
                </value>
            </constant>
            <constant name="FILE_WRITE_ACCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0002)
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_BASE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000002d
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_CHECK_VERIFY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0200) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_CHECK_VERIFY2" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0200) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_MEDIA_REMOVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0201) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_EJECT_MEDIA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0202) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_LOAD_MEDIA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0203) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_LOAD_MEDIA2" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0203) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_RESERVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0204) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_RELEASE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0205) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_FIND_NEW_DEVICES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0206) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_EJECTION_CONTROL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0250) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_MCN_CONTROL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0251) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_GET_MEDIA_TYPES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0300) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_GET_MEDIA_TYPES_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0301) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_GET_MEDIA_SERIAL_NUMBER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0304) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_GET_HOTPLUG_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0305) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_SET_HOTPLUG_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0306) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_RESET_BUS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0400) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_RESET_DEVICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0401) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_BREAK_RESERVATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0405) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_PERSISTENT_RESERVE_IN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0406) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_PERSISTENT_RESERVE_OUT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0407) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_GET_DEVICE_NUMBER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0420) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_GET_DEVICE_NUMBER_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0421) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_PREDICT_FAILURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0440) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_FAILURE_PREDICTION_CONFIG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0441) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_GET_COUNTERS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x442) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_READ_CAPACITY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0450) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_GET_DEVICE_TELEMETRY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0470) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_DEVICE_TELEMETRY_NOTIFY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0471) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_DEVICE_TELEMETRY_QUERY_CAPS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0472) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_GET_DEVICE_TELEMETRY_RAW" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0473) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_SET_TEMPERATURE_THRESHOLD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0480) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_PROTOCOL_COMMAND" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x04F0) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_QUERY_PROPERTY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0500) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_MANAGE_DATA_SET_ATTRIBUTES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((0x0501) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_GET_LB_PROVISIONING_MAP_RESOURCES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0502) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_SET_PROPERTY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((0x0503) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_REINITIALIZE_MEDIA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((0x0590) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_GET_BC_PROPERTIES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0600) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_ALLOCATE_BC_STREAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0601) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_FREE_BC_STREAM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0602) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_CHECK_PRIORITY_HINT_SUPPORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0620) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_START_DATA_INTEGRITY_CHECK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0621) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_STOP_DATA_INTEGRITY_CHECK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0622) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="OBSOLETE_IOCTL_STORAGE_RESET_BUS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0400) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="OBSOLETE_IOCTL_STORAGE_RESET_DEVICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0401) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_FIRMWARE_GET_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0700) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_FIRMWARE_DOWNLOAD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0701) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_FIRMWARE_ACTIVATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0702) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_ENABLE_IDLE_POWER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0720) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_GET_IDLE_POWERUP_REASON" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0721) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_POWER_ACTIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0722) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_POWER_IDLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0723) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_EVENT_NOTIFICATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0724) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_DEVICE_POWER_CAP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0725) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_RPMB_COMMAND" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0726) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_ATTRIBUTE_MANAGEMENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0727) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_DIAGNOSTIC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0728) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_GET_PHYSICAL_ELEMENT_STATUS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0729) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_REMOVE_ELEMENT_AND_TRUNCATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0730) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_GET_DEVICE_INTERNAL_LOG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000002d) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0731) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="STORAGE_DEVICE_FLAGS_RANDOM_DEVICEGUID_REASON_CONFLICT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="STORAGE_DEVICE_FLAGS_RANDOM_DEVICEGUID_REASON_NOHWID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="STORAGE_DEVICE_FLAGS_PAGE_83_DEVICEGUID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="RECOVERED_WRITES_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="UNRECOVERED_WRITES_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="RECOVERED_READS_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="UNRECOVERED_READS_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="WRITE_COMPRESSION_INFO_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="READ_COMPRESSION_INFO_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="TAPE_RETURN_STATISTICS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="TAPE_RETURN_ENV_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="TAPE_RESET_STATISTICS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="MEDIA_ERASEABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="MEDIA_WRITE_ONCE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="MEDIA_READ_ONLY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="MEDIA_READ_WRITE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="MEDIA_WRITE_PROTECTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="MEDIA_CURRENTLY_MOUNTED" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="STORAGE_FAILURE_PREDICTION_CONFIG_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="SRB_TYPE_SCSI_REQUEST_BLOCK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="SRB_TYPE_STORAGE_REQUEST_BLOCK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="STORAGE_ADDRESS_TYPE_BTL8" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="StorageIdTypeNAA" access="public">
                <type primitive="True">STORAGE_IDENTIFIER_TYPE</type>
                <value>
                    <code>StorageIdTypeFCPHName
            </code>
                </value>
            </constant>
            <constant name="STORAGE_RPMB_DESCRIPTOR_VERSION_1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="STORAGE_RPMB_MINIMUM_RELIABLE_WRITE_SIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>512
            </code>
                </value>
            </constant>
            <constant name="STORAGE_CRYPTO_CAPABILITY_VERSION_1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="STORAGE_CRYPTO_DESCRIPTOR_VERSION_1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="STORAGE_TIER_NAME_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(256)
            </code>
                </value>
            </constant>
            <constant name="STORAGE_TIER_DESCRIPTION_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(512)
            </code>
                </value>
            </constant>
            <constant name="STORAGE_TIER_FLAG_NO_SEEK_PENALTY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00020000)
            </code>
                </value>
            </constant>
            <constant name="STORAGE_TIER_FLAG_WRITE_BACK_CACHE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00200000)
            </code>
                </value>
            </constant>
            <constant name="STORAGE_TIER_FLAG_READ_CACHE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00400000)
            </code>
                </value>
            </constant>
            <constant name="STORAGE_TIER_FLAG_PARITY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00800000)
            </code>
                </value>
            </constant>
            <constant name="STORAGE_TIER_FLAG_SMR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x01000000)
            </code>
                </value>
            </constant>
            <constant name="STORAGE_TEMPERATURE_VALUE_NOT_REPORTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8000
            </code>
                </value>
            </constant>
            <constant name="STORAGE_TEMPERATURE_THRESHOLD_FLAG_ADAPTER_REQUEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="STORAGE_COMPONENT_ROLE_CACHE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="STORAGE_COMPONENT_ROLE_TIERING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="STORAGE_COMPONENT_ROLE_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="STORAGE_ATTRIBUTE_BYTE_ADDRESSABLE_IO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="STORAGE_ATTRIBUTE_BLOCK_IO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="STORAGE_ATTRIBUTE_DYNAMIC_PERSISTENCE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04
            </code>
                </value>
            </constant>
            <constant name="STORAGE_ATTRIBUTE_VOLATILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x08
            </code>
                </value>
            </constant>
            <constant name="STORAGE_ATTRIBUTE_ASYNC_EVENT_NOTIFICATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10
            </code>
                </value>
            </constant>
            <constant name="STORAGE_ATTRIBUTE_PERF_SIZE_INDEPENDENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20
            </code>
                </value>
            </constant>
            <constant name="STORAGE_DEVICE_MAX_OPERATIONAL_STATUS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="STORAGE_ADAPTER_SERIAL_NUMBER_V1_MAX_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(128)
            </code>
                </value>
            </constant>
            <constant name="STORAGE_ADAPTER_SERIAL_NUMBER_V1_VERSION" access="public">
                <type primitive="True">uint</type>
                <value>
                    <unchecked>
                        <code>(264)
            </code>
                    </unchecked>
                </value>
            </constant>
            <constant name="STORAGE_ADAPTER_SERIAL_NUMBER_V1_SIZE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <unchecked>
                        <code>(264)
            </code>
                    </unchecked>
                </value>
            </constant>
            <constant name="STORAGE_DEVICE_NUMA_NODE_UNKNOWN" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xffffffff
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmActionFlag_NonDestructive" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x80000000)
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_None" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000000U)
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_Trim" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000001U)
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_Notification" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000002U | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_OffloadRead" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000003U | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_OffloadWrite" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000004U)
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_Allocation" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000005U | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_Repair" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000006U | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_Scrub" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000007U | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_DrtQuery" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000008U | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_DrtClear" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000009U | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_DrtDisable" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x0000000AU | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_TieringQuery" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x0000000BU | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_Map" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x0000000CU | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_RegenerateParity" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x0000000DU | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_NvCache_Change_Priority" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x0000000EU | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_NvCache_Evict" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x0000000FU | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_TopologyIdQuery" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000010U | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_GetPhysicalAddresses" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000011U | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_ScopeRegen" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000012U | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_ReportZones" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000013U | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_OpenZone" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000014U | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_FinishZone" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000015U | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_CloseZone" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000016U | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_ResetWritePointer" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000017U)
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_GetRangeErrorInfo" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000018U | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_WriteZeroes" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x00000019U)
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_LostQuery" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x0000001AU | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_GetFreeSpace" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x0000001BU | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_ConversionQuery" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x0000001CU | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="DeviceDsmAction_VdtSet" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x0000001DU)
            </code>
                </value>
            </constant>
            <constant name="DEVICE_DSM_FLAG_ENTIRE_DATA_SET_RANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="DEVICE_DSM_FLAG_TRIM_NOT_FS_ALLOCATED" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="DEVICE_DSM_FLAG_TRIM_BYPASS_RZAT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000000
            </code>
                </value>
            </constant>
            <constant name="DEVICE_DSM_NOTIFY_FLAG_BEGIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="DEVICE_DSM_NOTIFY_FLAG_END" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="STORAGE_OFFLOAD_MAX_TOKEN_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>512
            </code>
                </value>
            </constant>
            <constant name="STORAGE_OFFLOAD_TOKEN_ID_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1F8
            </code>
                </value>
            </constant>
            <constant name="STORAGE_OFFLOAD_TOKEN_TYPE_ZERO_DATA" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFF0001
            </code>
                </value>
            </constant>
            <constant name="STORAGE_OFFLOAD_READ_RANGE_TRUNCATED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="STORAGE_OFFLOAD_WRITE_RANGE_TRUNCATED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="STORAGE_OFFLOAD_TOKEN_INVALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0002
            </code>
                </value>
            </constant>
            <constant name="DEVICE_DSM_FLAG_ALLOCATION_CONSOLIDATEABLE_ONLY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000000
            </code>
                </value>
            </constant>
            <constant name="DEVICE_DSM_PARAMETERS_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="DEVICE_DATA_SET_LBP_STATE_PARAMETERS_VERSION_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="DEVICE_DSM_ALLOCATION_OUTPUT_V1" access="public">
                <type primitive="True">uint</type>
                <value>
                    <unchecked>
                        <code>(32)
            </code>
                    </unchecked>
                </value>
            </constant>
            <constant name="DEVICE_DATA_SET_LB_PROVISIONING_STATE_VERSION_V1" access="public">
                <type primitive="True">uint</type>
                <value>
                    <unchecked>
                        <code>(32)
            </code>
                    </unchecked>
                </value>
            </constant>
            <constant name="DEVICE_DSM_ALLOCATION_OUTPUT_V2" access="public">
                <type primitive="True">uint</type>
                <value>
                    <unchecked>
                        <code>(40)
            </code>
                    </unchecked>
                </value>
            </constant>
            <constant name="DEVICE_DATA_SET_LB_PROVISIONING_STATE_VERSION_V2" access="public">
                <type primitive="True">uint</type>
                <value>
                    <unchecked>
                        <code>(40)
            </code>
                    </unchecked>
                </value>
            </constant>
            <constant name="DEVICE_DSM_FLAG_REPAIR_INPUT_TOPOLOGY_ID_PRESENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000000
            </code>
                </value>
            </constant>
            <constant name="DEVICE_DSM_FLAG_REPAIR_OUTPUT_PARITY_EXTENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20000000
            </code>
                </value>
            </constant>
            <constant name="DEVICE_DSM_FLAG_SCRUB_SKIP_IN_SYNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000000
            </code>
                </value>
            </constant>
            <constant name="DEVICE_DSM_FLAG_SCRUB_OUTPUT_PARITY_EXTENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20000000
            </code>
                </value>
            </constant>
            <constant name="DEVICE_DSM_FLAG_PHYSICAL_ADDRESSES_OMIT_TOTAL_RANGES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000000
            </code>
                </value>
            </constant>
            <constant name="DEVICE_DSM_PHYSICAL_ADDRESS_HAS_MEMORY_ERROR" access="public">
                <type primitive="True">long</type>
                <value>
                    <code>
                        <value></value>((long)-1)
            </code>
                </value>
            </constant>
            <constant name="DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT_VERSION_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="DEVICE_STORAGE_NO_ERRORS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="DEVICE_DSM_RANGE_ERROR_OUTPUT_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="DEVICE_DSM_RANGE_ERROR_INFO_VERSION_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="IOCTL_STORAGE_BC_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="STORAGE_PRIORITY_HINT_SUPPORTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="ERROR_HISTORY_DIRECTORY_ENTRY_DEFAULT_COUNT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="DEVICEDUMP_STRUCTURE_VERSION_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="DEVICEDUMP_MAX_IDSTRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>32
            </code>
                </value>
            </constant>
            <constant name="MAX_FW_BUCKET_ID_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>132
            </code>
                </value>
            </constant>
            <constant name="STORAGE_CRASH_TELEMETRY_REGKEY" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"\\Registry\\Machine\\System\\CurrentControlSet\\Control\\CrashControl\\StorageTelemetry"
            </code>
                </value>
            </constant>
            <constant name="STORAGE_DEVICE_TELEMETRY_REGKEY" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"\\Registry\\Machine\\System\\CurrentControlSet\\Control\\Storage\\StorageTelemetry"
            </code>
                </value>
            </constant>
            <constant name="DDUMP_FLAG_DATA_READ_FROM_DEVICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="FW_ISSUEID_NO_ISSUE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="FW_ISSUEID_UNKNOWN" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="TC_PUBLIC_DEVICEDUMP_CONTENT_SMART" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="TC_PUBLIC_DEVICEDUMP_CONTENT_GPLOG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="TC_PUBLIC_DEVICEDUMP_CONTENT_GPLOG_MAX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="TC_DEVICEDUMP_SUBSECTION_DESC_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="TC_PUBLIC_DATA_TYPE_ATAGP" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x41, 0x54, 0x41, 0x47, 0x50, 0x4C, 0x6F, 0x67, 0x50, 0x61, 0x67, 0x65, 0x73, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="TC_PUBLIC_DATA_TYPE_ATASMART" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x41, 0x54, 0x41, 0x53, 0x4D, 0x41, 0x52, 0x54, 0x50, 0x61, 0x67, 0x65, 0x73, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="CDB_SIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="TELEMETRY_COMMAND_SIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="DEVICEDUMP_CAP_PRIVATE_SECTION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="DEVICEDUMP_CAP_RESTRICTED_SECTION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="STORAGE_IDLE_POWERUP_REASON_VERSION_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="STORAGE_DEVICE_POWER_CAP_VERSION_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="STORAGE_EVENT_NOTIFICATION_VERSION_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="STORAGE_EVENT_MEDIA_STATUS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000000000000001
            </code>
                </value>
            </constant>
            <constant name="STORAGE_EVENT_DEVICE_STATUS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000000000000002
            </code>
                </value>
            </constant>
            <constant name="STORAGE_EVENT_DEVICE_OPERATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000000000000004
            </code>
                </value>
            </constant>
            <constant name="STORAGE_EVENT_ALL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000000001 | 0x0000000000000002 | 0x0000000000000004)
            </code>
                </value>
            </constant>
            <constant name="READ_COPY_NUMBER_KEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x52434e00
            </code>
                </value>
            </constant>
            <constant name="READ_COPY_NUMBER_BYPASS_CACHE_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="STORAGE_COUNTERS_VERSION_V1" access="public">
                <type primitive="True">uint</type>
                <value>
                    <unchecked>
                        <value>
                            <code>32
            </code>
                        </value>
                    </unchecked>
                </value>
            </constant>
            <constant name="STORAGE_HW_FIRMWARE_REQUEST_FLAG_CONTROLLER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="STORAGE_HW_FIRMWARE_REQUEST_FLAG_LAST_SEGMENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="STORAGE_HW_FIRMWARE_REQUEST_FLAG_FIRST_SEGMENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="STORAGE_HW_FIRMWARE_REQUEST_FLAG_SWITCH_TO_EXISTING_FIRMWARE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="STORAGE_HW_FIRMWARE_INVALID_SLOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xFF
            </code>
                </value>
            </constant>
            <constant name="STORAGE_HW_FIRMWARE_REVISION_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="STORAGE_PROTOCOL_STRUCTURE_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="STORAGE_PROTOCOL_COMMAND_FLAG_ADAPTER_REQUEST" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="STORAGE_PROTOCOL_STATUS_PENDING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0
            </code>
                </value>
            </constant>
            <constant name="STORAGE_PROTOCOL_STATUS_SUCCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="STORAGE_PROTOCOL_STATUS_ERROR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="STORAGE_PROTOCOL_STATUS_INVALID_REQUEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x3
            </code>
                </value>
            </constant>
            <constant name="STORAGE_PROTOCOL_STATUS_NO_DEVICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="STORAGE_PROTOCOL_STATUS_BUSY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x5
            </code>
                </value>
            </constant>
            <constant name="STORAGE_PROTOCOL_STATUS_DATA_OVERRUN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x6
            </code>
                </value>
            </constant>
            <constant name="STORAGE_PROTOCOL_STATUS_INSUFFICIENT_RESOURCES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x7
            </code>
                </value>
            </constant>
            <constant name="STORAGE_PROTOCOL_STATUS_THROTTLED_REQUEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8
            </code>
                </value>
            </constant>
            <constant name="STORAGE_PROTOCOL_STATUS_NOT_SUPPORTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xFF
            </code>
                </value>
            </constant>
            <constant name="STORAGE_PROTOCOL_COMMAND_LENGTH_NVME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40
            </code>
                </value>
            </constant>
            <constant name="STORAGE_PROTOCOL_SPECIFIC_NVME_ADMIN_COMMAND" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="STORAGE_PROTOCOL_SPECIFIC_NVME_NVM_COMMAND" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="STORATTRIBUTE_NONE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="STORATTRIBUTE_MANAGEMENT_STATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SCMBUS_BASE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000059
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SCMBUS_DEVICE_FUNCTION_BASE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SCM_LOGICAL_DEVICE_FUNCTION_BASE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x300
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SCM_PHYSICAL_DEVICE_FUNCTION_BASE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x600
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SCM_BUS_GET_LOGICAL_DEVICES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000059) &lt;&lt; 16) | ((0) &lt;&lt; 14) | (((0x0 + 0x00)) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SCM_BUS_GET_PHYSICAL_DEVICES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000059) &lt;&lt; 16) | ((0) &lt;&lt; 14) | (((0x0 + 0x01)) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SCM_BUS_GET_REGIONS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000059) &lt;&lt; 16) | ((0) &lt;&lt; 14) | (((0x0 + 0x02)) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SCM_LD_GET_INTERLEAVE_SET" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000059) &lt;&lt; 16) | ((0) &lt;&lt; 14) | (((0x300 + 0x00)) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SCM_PD_QUERY_PROPERTY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000059) &lt;&lt; 16) | ((0) &lt;&lt; 14) | (((0x600 + 0x00)) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SCM_PD_FIRMWARE_DOWNLOAD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000059) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | (((0x600 + 0x01)) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SCM_PD_FIRMWARE_ACTIVATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000059) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | (((0x600 + 0x02)) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SCM_PD_PASSTHROUGH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000059) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | (((0x600 + 0x03)) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SCM_PD_UPDATE_MANAGEMENT_STATUS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000059) &lt;&lt; 16) | ((0) &lt;&lt; 14) | (((0x600 + 0x04)) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SCM_PD_REINITIALIZE_MEDIA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000059) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | (((0x600 + 0x05)) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="SCM_MAX_SYMLINK_LEN_IN_CHARS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>256
            </code>
                </value>
            </constant>
            <constant name="SCM_REGION_SPA_UNKNOWN" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>
                        <value>
                            <value></value>
                        </value>((ulong)~((ulong)0))
            </code>
                </value>
            </constant>
            <constant name="MAX_INTERFACE_CODES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="SCM_PD_FIRMWARE_REVISION_LENGTH_BYTES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>32
            </code>
                </value>
            </constant>
            <constant name="SCM_PD_MEMORY_SIZE_UNKNOWN" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>
                        <value>
                            <value></value>
                        </value>((ulong)~((ulong)0))
            </code>
                </value>
            </constant>
            <constant name="SCM_PD_PROPERTY_NAME_LENGTH_IN_CHARS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>128
            </code>
                </value>
            </constant>
            <constant name="SCM_PD_MAX_OPERATIONAL_STATUS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="SCM_PD_FIRMWARE_LAST_DOWNLOAD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_BASE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000007
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_GET_DRIVE_GEOMETRY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0000) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_GET_PARTITION_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0001) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_SET_PARTITION_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0002) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_GET_DRIVE_LAYOUT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0003) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_SET_DRIVE_LAYOUT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0004) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_VERIFY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0005) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_FORMAT_TRACKS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0006) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_REASSIGN_BLOCKS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0007) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_PERFORMANCE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0008) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_IS_WRITABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0009) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_LOGGING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x000a) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_FORMAT_TRACKS_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x000b) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_HISTOGRAM_STRUCTURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x000c) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_HISTOGRAM_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x000d) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_HISTOGRAM_RESET" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x000e) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_REQUEST_STRUCTURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x000f) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_REQUEST_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0010) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_PERFORMANCE_OFF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0018) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_CONTROLLER_NUMBER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0011) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="SMART_GET_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0020) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="SMART_SEND_DRIVE_COMMAND" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0021) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="SMART_RCV_DRIVE_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0022) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_GET_PARTITION_INFO_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0012) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_SET_PARTITION_INFO_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0013) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_GET_DRIVE_LAYOUT_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0014) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_SET_DRIVE_LAYOUT_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0015) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_CREATE_DISK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0016) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_GET_LENGTH_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0017) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_GET_DRIVE_GEOMETRY_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0028) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_REASSIGN_BLOCKS_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0029) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_UPDATE_DRIVE_SIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0032) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_GROW_PARTITION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0034) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_GET_CACHE_INFORMATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0035) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_SET_CACHE_INFORMATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0036) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="OBSOLETE_DISK_GET_WRITE_CACHE_STATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0037) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_DELETE_DRIVE_LAYOUT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0040) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_UPDATE_PROPERTIES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0050) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_FORMAT_DRIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x00f3) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_SENSE_DEVICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x00f8) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_CHECK_VERIFY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0200) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_MEDIA_REMOVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0201) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_EJECT_MEDIA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0202) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_LOAD_MEDIA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0203) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_RESERVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0204) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_RELEASE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0205) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_FIND_NEW_DEVICES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0206) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_GET_MEDIA_TYPES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x0300) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="PARTITION_ENTRY_UNUSED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00
            </code>
                </value>
            </constant>
            <constant name="PARTITION_FAT_12" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="PARTITION_XENIX_1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="PARTITION_XENIX_2" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x03
            </code>
                </value>
            </constant>
            <constant name="PARTITION_FAT_16" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04
            </code>
                </value>
            </constant>
            <constant name="PARTITION_EXTENDED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x05
            </code>
                </value>
            </constant>
            <constant name="PARTITION_HUGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x06
            </code>
                </value>
            </constant>
            <constant name="PARTITION_IFS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x07
            </code>
                </value>
            </constant>
            <constant name="PARTITION_OS2BOOTMGR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0A
            </code>
                </value>
            </constant>
            <constant name="PARTITION_FAT32" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0B
            </code>
                </value>
            </constant>
            <constant name="PARTITION_FAT32_XINT13" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0C
            </code>
                </value>
            </constant>
            <constant name="PARTITION_XINT13" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0E
            </code>
                </value>
            </constant>
            <constant name="PARTITION_XINT13_EXTENDED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0F
            </code>
                </value>
            </constant>
            <constant name="PARTITION_MSFT_RECOVERY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x27
            </code>
                </value>
            </constant>
            <constant name="PARTITION_MAIN_OS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x28
            </code>
                </value>
            </constant>
            <constant name="PARTIITON_OS_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x29
            </code>
                </value>
            </constant>
            <constant name="PARTITION_PRE_INSTALLED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2a
            </code>
                </value>
            </constant>
            <constant name="PARTITION_BSP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2b
            </code>
                </value>
            </constant>
            <constant name="PARTITION_DPP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2c
            </code>
                </value>
            </constant>
            <constant name="PARTITION_WINDOWS_SYSTEM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2d
            </code>
                </value>
            </constant>
            <constant name="PARTITION_PREP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x41
            </code>
                </value>
            </constant>
            <constant name="PARTITION_LDM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x42
            </code>
                </value>
            </constant>
            <constant name="PARTITION_DM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x54
            </code>
                </value>
            </constant>
            <constant name="PARTITION_EZDRIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x55
            </code>
                </value>
            </constant>
            <constant name="PARTITION_UNIX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x63
            </code>
                </value>
            </constant>
            <constant name="PARTITION_SPACES_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xD7
            </code>
                </value>
            </constant>
            <constant name="PARTITION_SPACES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xE7
            </code>
                </value>
            </constant>
            <constant name="PARTITION_GPT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xEE
            </code>
                </value>
            </constant>
            <constant name="PARTITION_SYSTEM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xEF
            </code>
                </value>
            </constant>
            <constant name="VALID_NTFT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xC0
            </code>
                </value>
            </constant>
            <constant name="PARTITION_NTFT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x80
            </code>
                </value>
            </constant>
            <constant name="GPT_ATTRIBUTE_PLATFORM_REQUIRED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000000001)
            </code>
                </value>
            </constant>
            <constant name="GPT_ATTRIBUTE_NO_BLOCK_IO_PROTOCOL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000000002)
            </code>
                </value>
            </constant>
            <constant name="GPT_ATTRIBUTE_LEGACY_BIOS_BOOTABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000000004)
            </code>
                </value>
            </constant>
            <constant name="GPT_BASIC_DATA_ATTRIBUTE_NO_DRIVE_LETTER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x8000000000000000)
            </code>
                </value>
            </constant>
            <constant name="GPT_BASIC_DATA_ATTRIBUTE_HIDDEN" access="public">
                <type primitive="True">long</type>
                <value>
                    <code>(0x4000000000000000)
            </code>
                </value>
            </constant>
            <constant name="GPT_BASIC_DATA_ATTRIBUTE_SHADOW_COPY" access="public">
                <type primitive="True">long</type>
                <value>
                    <code>(0x2000000000000000)
            </code>
                </value>
            </constant>
            <constant name="GPT_BASIC_DATA_ATTRIBUTE_READ_ONLY" access="public">
                <type primitive="True">long</type>
                <value>
                    <code>(0x1000000000000000)
            </code>
                </value>
            </constant>
            <constant name="GPT_BASIC_DATA_ATTRIBUTE_OFFLINE" access="public">
                <type primitive="True">long</type>
                <value>
                    <code>(0x0800000000000000)
            </code>
                </value>
            </constant>
            <constant name="GPT_BASIC_DATA_ATTRIBUTE_DAX" access="public">
                <type primitive="True">long</type>
                <value>
                    <code>(0x0400000000000000)
            </code>
                </value>
            </constant>
            <constant name="GPT_BASIC_DATA_ATTRIBUTE_SERVICE" access="public">
                <type primitive="True">long</type>
                <value>
                    <code>(0x0200000000000000)
            </code>
                </value>
            </constant>
            <constant name="GPT_SPACES_ATTRIBUTE_NO_METADATA" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x8000000000000000)
            </code>
                </value>
            </constant>
            <constant name="HIST_NO_OF_BUCKETS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>24
            </code>
                </value>
            </constant>
            <constant name="HISTOGRAM_BUCKET_SIZE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <unchecked>
                        <value>
                            <code>8
            </code>
                        </value>
                    </unchecked>
                </value>
            </constant>
            <constant name="DISK_HISTOGRAM_SIZE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <unchecked>
                        <value>
                            <code>72
            </code>
                        </value>
                    </unchecked>
                </value>
            </constant>
            <constant name="DISK_LOGGING_START" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="DISK_LOGGING_STOP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="DISK_LOGGING_DUMP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="DISK_BINNING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CAP_ATA_ID_CMD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CAP_ATAPI_ID_CMD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="CAP_SMART_CMD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="ATAPI_ID_CMD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xA1
            </code>
                </value>
            </constant>
            <constant name="ID_CMD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xEC
            </code>
                </value>
            </constant>
            <constant name="SMART_CMD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xB0
            </code>
                </value>
            </constant>
            <constant name="SMART_CYL_LOW" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4F
            </code>
                </value>
            </constant>
            <constant name="SMART_CYL_HI" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xC2
            </code>
                </value>
            </constant>
            <constant name="SMART_NO_ERROR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="SMART_IDE_ERROR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="SMART_INVALID_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="SMART_INVALID_COMMAND" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="SMART_INVALID_BUFFER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="SMART_INVALID_DRIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="SMART_INVALID_IOCTL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="SMART_ERROR_NO_MEM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="SMART_INVALID_REGISTER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="SMART_NOT_SUPPORTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="SMART_NO_IDE_DEVICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>10
            </code>
                </value>
            </constant>
            <constant name="SMART_OFFLINE_ROUTINE_OFFLINE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="SMART_SHORT_SELFTEST_OFFLINE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="SMART_EXTENDED_SELFTEST_OFFLINE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="SMART_ABORT_OFFLINE_SELFTEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>127
            </code>
                </value>
            </constant>
            <constant name="SMART_SHORT_SELFTEST_CAPTIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>129
            </code>
                </value>
            </constant>
            <constant name="SMART_EXTENDED_SELFTEST_CAPTIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>130
            </code>
                </value>
            </constant>
            <constant name="READ_ATTRIBUTE_BUFFER_SIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>512
            </code>
                </value>
            </constant>
            <constant name="IDENTIFY_BUFFER_SIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>512
            </code>
                </value>
            </constant>
            <constant name="READ_THRESHOLD_BUFFER_SIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>512
            </code>
                </value>
            </constant>
            <constant name="SMART_LOG_SECTOR_SIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>512
            </code>
                </value>
            </constant>
            <constant name="READ_ATTRIBUTES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xD0
            </code>
                </value>
            </constant>
            <constant name="READ_THRESHOLDS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xD1
            </code>
                </value>
            </constant>
            <constant name="ENABLE_DISABLE_AUTOSAVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xD2
            </code>
                </value>
            </constant>
            <constant name="SAVE_ATTRIBUTE_VALUES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xD3
            </code>
                </value>
            </constant>
            <constant name="EXECUTE_OFFLINE_DIAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xD4
            </code>
                </value>
            </constant>
            <constant name="SMART_READ_LOG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xD5
            </code>
                </value>
            </constant>
            <constant name="SMART_WRITE_LOG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xd6
            </code>
                </value>
            </constant>
            <constant name="ENABLE_SMART" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xD8
            </code>
                </value>
            </constant>
            <constant name="DISABLE_SMART" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xD9
            </code>
                </value>
            </constant>
            <constant name="RETURN_SMART_STATUS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xDA
            </code>
                </value>
            </constant>
            <constant name="ENABLE_DISABLE_AUTO_OFFLINE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xDB
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_GET_DISK_ATTRIBUTES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0x003c) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_SET_DISK_ATTRIBUTES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x003d) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="DISK_ATTRIBUTE_OFFLINE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000000000000001
            </code>
                </value>
            </constant>
            <constant name="DISK_ATTRIBUTE_READ_ONLY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000000000000002
            </code>
                </value>
            </constant>
            <constant name="IOCTL_DISK_RESET_SNAPSHOT_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000007) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0084) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_CHANGER_BASE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000030
            </code>
                </value>
            </constant>
            <constant name="IOCTL_CHANGER_GET_PARAMETERS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000030) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0000) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_CHANGER_GET_STATUS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000030) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0001) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_CHANGER_GET_PRODUCT_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000030) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0002) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_CHANGER_SET_ACCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000030) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0004) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_CHANGER_GET_ELEMENT_STATUS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000030) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x0005) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_CHANGER_INITIALIZE_ELEMENT_STATUS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000030) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0006) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_CHANGER_SET_POSITION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000030) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0007) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_CHANGER_EXCHANGE_MEDIUM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000030) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0008) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_CHANGER_MOVE_MEDIUM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000030) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x0009) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_CHANGER_REINITIALIZE_TRANSPORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000030) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((0x000A) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_CHANGER_QUERY_VOLUME_TAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000030) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((0x000B) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="MAX_VOLUME_ID_SIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>36
            </code>
                </value>
            </constant>
            <constant name="MAX_VOLUME_TEMPLATE_SIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>40
            </code>
                </value>
            </constant>
            <constant name="VENDOR_ID_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="PRODUCT_ID_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>16
            </code>
                </value>
            </constant>
            <constant name="REVISION_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="SERIAL_NUMBER_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>32
            </code>
                </value>
            </constant>
            <constant name="CHANGER_BAR_CODE_SCANNER_INSTALLED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CHANGER_INIT_ELEM_STAT_WITH_RANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CHANGER_CLOSE_IEPORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="CHANGER_OPEN_IEPORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="CHANGER_STATUS_NON_VOLATILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="CHANGER_EXCHANGE_MEDIA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="CHANGER_CLEANER_SLOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="CHANGER_LOCK_UNLOCK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000080
            </code>
                </value>
            </constant>
            <constant name="CHANGER_CARTRIDGE_MAGAZINE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="CHANGER_MEDIUM_FLIP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000200
            </code>
                </value>
            </constant>
            <constant name="CHANGER_POSITION_TO_ELEMENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000400
            </code>
                </value>
            </constant>
            <constant name="CHANGER_REPORT_IEPORT_STATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000800
            </code>
                </value>
            </constant>
            <constant name="CHANGER_STORAGE_DRIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00001000
            </code>
                </value>
            </constant>
            <constant name="CHANGER_STORAGE_IEPORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00002000
            </code>
                </value>
            </constant>
            <constant name="CHANGER_STORAGE_SLOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00004000
            </code>
                </value>
            </constant>
            <constant name="CHANGER_STORAGE_TRANSPORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="CHANGER_DRIVE_CLEANING_REQUIRED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00010000
            </code>
                </value>
            </constant>
            <constant name="CHANGER_PREDISMOUNT_EJECT_REQUIRED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00020000
            </code>
                </value>
            </constant>
            <constant name="CHANGER_CLEANER_ACCESS_NOT_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00040000
            </code>
                </value>
            </constant>
            <constant name="CHANGER_PREMOUNT_EJECT_REQUIRED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00080000
            </code>
                </value>
            </constant>
            <constant name="CHANGER_VOLUME_IDENTIFICATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00100000
            </code>
                </value>
            </constant>
            <constant name="CHANGER_VOLUME_SEARCH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00200000
            </code>
                </value>
            </constant>
            <constant name="CHANGER_VOLUME_ASSERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00400000
            </code>
                </value>
            </constant>
            <constant name="CHANGER_VOLUME_REPLACE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00800000
            </code>
                </value>
            </constant>
            <constant name="CHANGER_VOLUME_UNDEFINE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01000000
            </code>
                </value>
            </constant>
            <constant name="CHANGER_SERIAL_NUMBER_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04000000
            </code>
                </value>
            </constant>
            <constant name="CHANGER_DEVICE_REINITIALIZE_CAPABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x08000000
            </code>
                </value>
            </constant>
            <constant name="CHANGER_KEYPAD_ENABLE_DISABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000000
            </code>
                </value>
            </constant>
            <constant name="CHANGER_DRIVE_EMPTY_ON_DOOR_ACCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20000000
            </code>
                </value>
            </constant>
            <constant name="CHANGER_RESERVED_BIT" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="CHANGER_PREDISMOUNT_ALIGN_TO_SLOT" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000001
            </code>
                </value>
            </constant>
            <constant name="CHANGER_PREDISMOUNT_ALIGN_TO_DRIVE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000002
            </code>
                </value>
            </constant>
            <constant name="CHANGER_CLEANER_AUTODISMOUNT" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000004
            </code>
                </value>
            </constant>
            <constant name="CHANGER_TRUE_EXCHANGE_CAPABLE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000008
            </code>
                </value>
            </constant>
            <constant name="CHANGER_SLOTS_USE_TRAYS" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000010
            </code>
                </value>
            </constant>
            <constant name="CHANGER_RTN_MEDIA_TO_ORIGINAL_ADDR" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000020
            </code>
                </value>
            </constant>
            <constant name="CHANGER_CLEANER_OPS_NOT_SUPPORTED" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000040
            </code>
                </value>
            </constant>
            <constant name="CHANGER_IEPORT_USER_CONTROL_OPEN" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000080
            </code>
                </value>
            </constant>
            <constant name="CHANGER_IEPORT_USER_CONTROL_CLOSE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000100
            </code>
                </value>
            </constant>
            <constant name="CHANGER_MOVE_EXTENDS_IEPORT" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000200
            </code>
                </value>
            </constant>
            <constant name="CHANGER_MOVE_RETRACTS_IEPORT" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000400
            </code>
                </value>
            </constant>
            <constant name="CHANGER_TO_TRANSPORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="CHANGER_TO_SLOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="CHANGER_TO_IEPORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04
            </code>
                </value>
            </constant>
            <constant name="CHANGER_TO_DRIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x08
            </code>
                </value>
            </constant>
            <constant name="LOCK_UNLOCK_IEPORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="LOCK_UNLOCK_DOOR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="LOCK_UNLOCK_KEYPAD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04
            </code>
                </value>
            </constant>
            <constant name="LOCK_ELEMENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="UNLOCK_ELEMENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="EXTEND_IEPORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="RETRACT_IEPORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="ELEMENT_STATUS_FULL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="ELEMENT_STATUS_IMPEXP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="ELEMENT_STATUS_EXCEPT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="ELEMENT_STATUS_ACCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="ELEMENT_STATUS_EXENAB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="ELEMENT_STATUS_INENAB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="ELEMENT_STATUS_PRODUCT_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="ELEMENT_STATUS_LUN_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00001000
            </code>
                </value>
            </constant>
            <constant name="ELEMENT_STATUS_ID_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00002000
            </code>
                </value>
            </constant>
            <constant name="ELEMENT_STATUS_NOT_BUS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="ELEMENT_STATUS_INVERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00400000
            </code>
                </value>
            </constant>
            <constant name="ELEMENT_STATUS_SVALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00800000
            </code>
                </value>
            </constant>
            <constant name="ELEMENT_STATUS_PVOLTAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000000
            </code>
                </value>
            </constant>
            <constant name="ELEMENT_STATUS_AVOLTAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20000000
            </code>
                </value>
            </constant>
            <constant name="ERROR_LABEL_UNREADABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="ERROR_LABEL_QUESTIONABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="ERROR_SLOT_NOT_PRESENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="ERROR_DRIVE_NOT_INSTALLED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="ERROR_TRAY_MALFUNCTION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="ERROR_INIT_STATUS_NEEDED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000011
            </code>
                </value>
            </constant>
            <constant name="ERROR_UNHANDLED_ERROR" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="SEARCH_ALL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0
            </code>
                </value>
            </constant>
            <constant name="SEARCH_PRIMARY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="SEARCH_ALTERNATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="SEARCH_ALL_NO_SEQ" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="SEARCH_PRI_NO_SEQ" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x5
            </code>
                </value>
            </constant>
            <constant name="SEARCH_ALT_NO_SEQ" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x6
            </code>
                </value>
            </constant>
            <constant name="ASSERT_PRIMARY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8
            </code>
                </value>
            </constant>
            <constant name="ASSERT_ALTERNATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x9
            </code>
                </value>
            </constant>
            <constant name="REPLACE_PRIMARY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xA
            </code>
                </value>
            </constant>
            <constant name="REPLACE_ALTERNATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xB
            </code>
                </value>
            </constant>
            <constant name="UNDEFINE_PRIMARY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xC
            </code>
                </value>
            </constant>
            <constant name="UNDEFINE_ALTERNATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xD
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SERIAL_LSRMST_INSERT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x0000001b) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((31) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SERENUM_EXPOSE_HARDWARE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000037) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((128) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SERENUM_REMOVE_HARDWARE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000037) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((129) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SERENUM_PORT_DESC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000037) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((130) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_SERENUM_GET_PORT_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000037) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((131) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="SERIAL_LSRMST_ESCAPE" access="public">
                <type primitive="True">byte</type>
                <value>
                    <code>
                        <value></value>((byte)0x00)
            </code>
                </value>
            </constant>
            <constant name="SERIAL_LSRMST_LSR_DATA" access="public">
                <type primitive="True">byte</type>
                <value>
                    <code>
                        <value></value>((byte)0x01)
            </code>
                </value>
            </constant>
            <constant name="SERIAL_LSRMST_LSR_NODATA" access="public">
                <type primitive="True">byte</type>
                <value>
                    <code>
                        <value></value>((byte)0x02)
            </code>
                </value>
            </constant>
            <constant name="SERIAL_LSRMST_MST" access="public">
                <type primitive="True">byte</type>
                <value>
                    <code>
                        <value></value>((byte)0x03)
            </code>
                </value>
            </constant>
            <constant name="SERIAL_IOC_FCR_FIFO_ENABLE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000001)
            </code>
                </value>
            </constant>
            <constant name="SERIAL_IOC_FCR_RCVR_RESET" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000002)
            </code>
                </value>
            </constant>
            <constant name="SERIAL_IOC_FCR_XMIT_RESET" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000004)
            </code>
                </value>
            </constant>
            <constant name="SERIAL_IOC_FCR_DMA_MODE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000008)
            </code>
                </value>
            </constant>
            <constant name="SERIAL_IOC_FCR_RES1" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000010)
            </code>
                </value>
            </constant>
            <constant name="SERIAL_IOC_FCR_RES2" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000020)
            </code>
                </value>
            </constant>
            <constant name="SERIAL_IOC_FCR_RCVR_TRIGGER_LSB" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000040)
            </code>
                </value>
            </constant>
            <constant name="SERIAL_IOC_FCR_RCVR_TRIGGER_MSB" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000080)
            </code>
                </value>
            </constant>
            <constant name="SERIAL_IOC_MCR_DTR" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000001)
            </code>
                </value>
            </constant>
            <constant name="SERIAL_IOC_MCR_RTS" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000002)
            </code>
                </value>
            </constant>
            <constant name="SERIAL_IOC_MCR_OUT1" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000004)
            </code>
                </value>
            </constant>
            <constant name="SERIAL_IOC_MCR_OUT2" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000008)
            </code>
                </value>
            </constant>
            <constant name="SERIAL_IOC_MCR_LOOP" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000010)
            </code>
                </value>
            </constant>
            <constant name="FSCTL_REQUEST_OPLOCK_LEVEL_1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_REQUEST_OPLOCK_LEVEL_2" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((1) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_REQUEST_BATCH_OPLOCK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((2) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_OPLOCK_BREAK_ACKNOWLEDGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((3) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_OPBATCH_ACK_CLOSE_PENDING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((4) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_OPLOCK_BREAK_NOTIFY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((5) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_LOCK_VOLUME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((6) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_UNLOCK_VOLUME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((7) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_DISMOUNT_VOLUME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((8) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_IS_VOLUME_MOUNTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((10) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_IS_PATHNAME_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((11) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_MARK_VOLUME_DIRTY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((12) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_RETRIEVAL_POINTERS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((14) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_GET_COMPRESSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((15) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_COMPRESSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((16) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_BOOTLOADER_ACCESSED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((19) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_MARK_AS_SYSTEM_HIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((19) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_OPLOCK_BREAK_ACK_NO_2" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((20) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_INVALIDATE_VOLUMES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((21) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_FAT_BPB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((22) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_REQUEST_FILTER_OPLOCK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((23) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_FILESYSTEM_GET_STATISTICS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((24) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_GET_NTFS_VOLUME_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((25) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_GET_NTFS_FILE_RECORD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((26) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_GET_VOLUME_BITMAP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((27) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_GET_RETRIEVAL_POINTERS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((28) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_MOVE_FILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((29) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_IS_VOLUME_DIRTY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((30) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_ALLOW_EXTENDED_DASD_IO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((32) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_FIND_FILES_BY_SID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((35) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_OBJECT_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((38) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_GET_OBJECT_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((39) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_DELETE_OBJECT_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((40) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_REPARSE_POINT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((41) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_GET_REPARSE_POINT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((42) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_DELETE_REPARSE_POINT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((43) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_ENUM_USN_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((44) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SECURITY_ID_CHECK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((45) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_READ_USN_JOURNAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((46) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_OBJECT_ID_EXTENDED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((47) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_CREATE_OR_GET_OBJECT_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((48) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_SPARSE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((49) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_ZERO_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((50) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_ALLOCATED_RANGES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((51) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_ENABLE_UPGRADE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((52) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_ENCRYPTION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((53) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_ENCRYPTION_FSCTL_IO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((54) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_WRITE_RAW_ENCRYPTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((55) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_READ_RAW_ENCRYPTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((56) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_CREATE_USN_JOURNAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((57) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_READ_FILE_USN_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((58) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_WRITE_USN_CLOSE_RECORD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((59) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_EXTEND_VOLUME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((60) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_USN_JOURNAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((61) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_DELETE_USN_JOURNAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((62) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_MARK_HANDLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((63) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SIS_COPYFILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((64) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SIS_LINK_FILES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((65) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_RECALL_FILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((69) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_READ_FROM_PLEX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((71) &lt;&lt; 2) | (2))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_FILE_PREFETCH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((72) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_MAKE_MEDIA_COMPATIBLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((76) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_DEFECT_MANAGEMENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((77) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_SPARING_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((78) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_ON_DISK_VOLUME_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((79) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_VOLUME_COMPRESSION_STATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((80) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_TXFS_MODIFY_RM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((81) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_TXFS_QUERY_RM_INFORMATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((82) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_TXFS_ROLLFORWARD_REDO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((84) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_TXFS_ROLLFORWARD_UNDO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((85) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_TXFS_START_RM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((86) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_TXFS_SHUTDOWN_RM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((87) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_TXFS_READ_BACKUP_INFORMATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((88) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_TXFS_WRITE_BACKUP_INFORMATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((89) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_TXFS_CREATE_SECONDARY_RM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((90) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_TXFS_GET_METADATA_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((91) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_TXFS_GET_TRANSACTED_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((92) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_TXFS_SAVEPOINT_INFORMATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((94) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_TXFS_CREATE_MINIVERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((95) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_TXFS_TRANSACTION_ACTIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((99) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_ZERO_ON_DEALLOCATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((101) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_REPAIR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((102) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_GET_REPAIR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((103) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_WAIT_FOR_REPAIR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((104) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_INITIATE_REPAIR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((106) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_CSC_INTERNAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((107) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SHRINK_VOLUME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((108) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_SHORT_NAME_BEHAVIOR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((109) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_DFSR_SET_GHOST_HANDLE_STATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((110) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_TXFS_LIST_TRANSACTION_LOCKED_FILES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((120) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_TXFS_LIST_TRANSACTIONS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((121) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_PAGEFILE_ENCRYPTION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((122) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_RESET_VOLUME_ALLOCATION_HINTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((123) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_DEPENDENT_VOLUME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((124) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SD_GLOBAL_CHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((125) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_TXFS_READ_BACKUP_INFORMATION2" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((126) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_LOOKUP_STREAM_FROM_CLUSTER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((127) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_TXFS_WRITE_BACKUP_INFORMATION2" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((128) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_FILE_TYPE_NOTIFICATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((129) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_FILE_LEVEL_TRIM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((130) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_GET_BOOT_AREA_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((140) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_GET_RETRIEVAL_POINTER_BASE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((141) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_PERSISTENT_VOLUME_STATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((142) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_PERSISTENT_VOLUME_STATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((143) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_REQUEST_OPLOCK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((144) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_CSV_TUNNEL_REQUEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((145) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_IS_CSV_FILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((146) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_FILE_SYSTEM_RECOGNITION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((147) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_CSV_GET_VOLUME_PATH_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((148) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_CSV_GET_VOLUME_NAME_FOR_VOLUME_MOUNT_POINT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((149) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_CSV_GET_VOLUME_PATH_NAMES_FOR_VOLUME_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((150) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_IS_FILE_ON_CSV_VOLUME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((151) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_CORRUPTION_HANDLING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((152) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_OFFLOAD_READ" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0001)) &lt;&lt; 14) | ((153) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_OFFLOAD_WRITE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((154) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_CSV_INTERNAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((155) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_PURGE_FAILURE_MODE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((156) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_FILE_LAYOUT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((157) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_IS_VOLUME_OWNED_BYCSVFS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((158) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_GET_INTEGRITY_INFORMATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((159) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_INTEGRITY_INFORMATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((160) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_FILE_REGIONS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((161) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_RKF_INTERNAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((171) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SCRUB_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((172) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_REPAIR_COPIES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((173) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_DISABLE_LOCAL_BUFFERING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((174) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_CSV_MGMT_LOCK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((175) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_CSV_QUERY_DOWN_LEVEL_FILE_SYSTEM_CHARACTERISTICS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((176) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_ADVANCE_FILE_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((177) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_CSV_SYNC_TUNNEL_REQUEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((178) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_CSV_QUERY_VETO_FILE_DIRECT_IO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((179) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_WRITE_USN_REASON" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((180) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_CSV_CONTROL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((181) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_GET_REFS_VOLUME_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((182) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_CSV_H_BREAKING_SYNC_TUNNEL_REQUEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((185) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_STORAGE_CLASSES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((187) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_REGION_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((188) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_USN_TRACK_MODIFIED_RANGES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((189) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_SHARED_VIRTUAL_DISK_SUPPORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((192) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SVHDX_SYNC_TUNNEL_REQUEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((193) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SVHDX_SET_INITIATOR_INFORMATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((194) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_EXTERNAL_BACKING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((195) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_GET_EXTERNAL_BACKING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((196) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_DELETE_EXTERNAL_BACKING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((197) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_ENUM_EXTERNAL_BACKING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((198) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_ENUM_OVERLAY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((199) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_ADD_OVERLAY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((204) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_REMOVE_OVERLAY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((205) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_UPDATE_OVERLAY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((206) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SHUFFLE_FILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((208) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_DUPLICATE_EXTENTS_TO_FILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((209) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SPARSE_OVERALLOCATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((211) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_STORAGE_QOS_CONTROL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((212) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_INITIATE_FILE_METADATA_OPTIMIZATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((215) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_FILE_METADATA_OPTIMIZATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((216) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SVHDX_ASYNC_TUNNEL_REQUEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((217) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_GET_WOF_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((218) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_HCS_SYNC_TUNNEL_REQUEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((219) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_HCS_ASYNC_TUNNEL_REQUEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((220) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_EXTENT_READ_CACHE_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((221) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_REFS_VOLUME_COUNTER_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((222) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_CLEAN_VOLUME_METADATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((223) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_INTEGRITY_INFORMATION_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((224) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SUSPEND_OVERLAY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((225) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_VIRTUAL_STORAGE_QUERY_PROPERTY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((226) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_FILESYSTEM_GET_STATISTICS_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((227) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_VOLUME_CONTAINER_STATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((228) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_LAYER_ROOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((229) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_DIRECT_ACCESS_EXTENTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((230) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_NOTIFY_STORAGE_SPACE_ALLOCATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((231) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SSDI_STORAGE_REQUEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((232) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_DIRECT_IMAGE_ORIGINAL_BASE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((233) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_READ_UNPRIVILEGED_USN_JOURNAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((234) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_GHOST_FILE_EXTENTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((235) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_GHOSTED_FILE_EXTENTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((236) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_UNMAP_SPACE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((237) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_HCS_SYNC_NO_WRITE_TUNNEL_REQUEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((238) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_STREAMS_QUERY_PARAMETERS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((241) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_STREAMS_ASSOCIATE_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((242) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_STREAMS_QUERY_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((243) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_GET_RETRIEVAL_POINTERS_AND_REFCOUNT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((244) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_VOLUME_NUMA_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((245) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_REFS_DEALLOCATE_RANGES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((246) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_REFS_SMR_VOLUME_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((247) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_REFS_SMR_VOLUME_GC_PARAMETERS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((248) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_REFS_FILE_STRICTLY_SEQUENTIAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((249) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_DUPLICATE_EXTENTS_TO_FILE_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0002)) &lt;&lt; 14) | ((250) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_BAD_RANGES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((251) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_DAX_ALLOC_ALIGNMENT_HINT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((252) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_DELETE_CORRUPTED_REFS_CONTAINER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((253) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SCRUB_UNDISCOVERABLE_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((254) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_NOTIFY_DATA_CHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((255) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_START_VIRTUALIZATION_INSTANCE_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((256) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_ENCRYPTION_KEY_CONTROL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((257) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_VIRTUAL_STORAGE_SET_BEHAVIOR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((258) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_SET_REPARSE_POINT_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0)) &lt;&lt; 14) | ((259) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_REARRANGE_FILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((264) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_VIRTUAL_STORAGE_PASSTHROUGH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((265) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="FSCTL_GET_RETRIEVAL_POINTER_COUNT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000009) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((266) &lt;&lt; 2) | (3))
            </code>
                </value>
            </constant>
            <constant name="GET_VOLUME_BITMAP_FLAG_MASK_METADATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="FLAG_USN_TRACK_MODIFIED_RANGES_ENABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="USN_PAGE_SIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x1000)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_DATA_OVERWRITE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_DATA_EXTEND" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_DATA_TRUNCATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000004)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_NAMED_DATA_OVERWRITE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000010)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_NAMED_DATA_EXTEND" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000020)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_NAMED_DATA_TRUNCATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000040)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_FILE_CREATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000100)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_FILE_DELETE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000200)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_EA_CHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000400)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_SECURITY_CHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000800)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_RENAME_OLD_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00001000)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_RENAME_NEW_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00002000)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_INDEXABLE_CHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00004000)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_BASIC_INFO_CHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00008000)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_HARD_LINK_CHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00010000)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_COMPRESSION_CHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00020000)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_ENCRYPTION_CHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00040000)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_OBJECT_ID_CHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00080000)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_REPARSE_POINT_CHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00100000)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_STREAM_CHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00200000)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_TRANSACTED_CHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00400000)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_INTEGRITY_CHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00800000)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_DESIRED_STORAGE_CLASS_CHANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x01000000)
            </code>
                </value>
            </constant>
            <constant name="USN_REASON_CLOSE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x80000000)
            </code>
                </value>
            </constant>
            <constant name="USN_DELETE_FLAG_DELETE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="USN_DELETE_FLAG_NOTIFY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="USN_DELETE_VALID_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000003)
            </code>
                </value>
            </constant>
            <constant name="USN_SOURCE_DATA_MANAGEMENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="USN_SOURCE_AUXILIARY_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="USN_SOURCE_REPLICATION_MANAGEMENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000004)
            </code>
                </value>
            </constant>
            <constant name="USN_SOURCE_CLIENT_REPLICATION_MANAGEMENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000008)
            </code>
                </value>
            </constant>
            <constant name="USN_SOURCE_VALID_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((0x00000001) | (0x00000002) | (0x00000004) | (0x00000008))
            </code>
                </value>
            </constant>
            <constant name="MARK_HANDLE_PROTECT_CLUSTERS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="MARK_HANDLE_TXF_SYSTEM_LOG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000004)
            </code>
                </value>
            </constant>
            <constant name="MARK_HANDLE_NOT_TXF_SYSTEM_LOG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000008)
            </code>
                </value>
            </constant>
            <constant name="MARK_HANDLE_REALTIME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000020)
            </code>
                </value>
            </constant>
            <constant name="MARK_HANDLE_NOT_REALTIME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000040)
            </code>
                </value>
            </constant>
            <constant name="MARK_HANDLE_FILTER_METADATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000200)
            </code>
                </value>
            </constant>
            <constant name="MARK_HANDLE_CLOUD_SYNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000800)
            </code>
                </value>
            </constant>
            <constant name="MARK_HANDLE_READ_COPY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000080)
            </code>
                </value>
            </constant>
            <constant name="MARK_HANDLE_NOT_READ_COPY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000100)
            </code>
                </value>
            </constant>
            <constant name="MARK_HANDLE_RETURN_PURGE_FAILURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000400)
            </code>
                </value>
            </constant>
            <constant name="MARK_HANDLE_DISABLE_FILE_METADATA_OPTIMIZATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00001000)
            </code>
                </value>
            </constant>
            <constant name="MARK_HANDLE_ENABLE_USN_SOURCE_ON_PAGING_IO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00002000)
            </code>
                </value>
            </constant>
            <constant name="MARK_HANDLE_SKIP_COHERENCY_SYNC_DISALLOW_WRITES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00004000)
            </code>
                </value>
            </constant>
            <constant name="MARK_HANDLE_ENABLE_CPU_CACHE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x10000000)
            </code>
                </value>
            </constant>
            <constant name="VOLUME_IS_DIRTY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="VOLUME_UPGRADE_SCHEDULED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="VOLUME_SESSION_OPEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000004)
            </code>
                </value>
            </constant>
            <constant name="FILE_PREFETCH_TYPE_FOR_CREATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="FILE_PREFETCH_TYPE_FOR_DIRENUM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="FILE_PREFETCH_TYPE_FOR_CREATE_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x3
            </code>
                </value>
            </constant>
            <constant name="FILE_PREFETCH_TYPE_FOR_DIRENUM_EX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="FILE_PREFETCH_TYPE_MAX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="FILESYSTEM_STATISTICS_TYPE_NTFS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="FILESYSTEM_STATISTICS_TYPE_FAT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="FILESYSTEM_STATISTICS_TYPE_EXFAT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="FILESYSTEM_STATISTICS_TYPE_REFS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="FILE_ZERO_DATA_INFORMATION_FLAG_PRESERVE_CACHED_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="FILE_SET_ENCRYPTION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="FILE_CLEAR_ENCRYPTION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="STREAM_SET_ENCRYPTION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000003
            </code>
                </value>
            </constant>
            <constant name="STREAM_CLEAR_ENCRYPTION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="MAXIMUM_ENCRYPTION_VALUE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="ENCRYPTION_FORMAT_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x01)
            </code>
                </value>
            </constant>
            <constant name="ENCRYPTED_DATA_INFO_SPARSE_FILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="COPYFILE_SIS_LINK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="COPYFILE_SIS_REPLACE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0002
            </code>
                </value>
            </constant>
            <constant name="COPYFILE_SIS_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0003
            </code>
                </value>
            </constant>
            <constant name="SET_REPAIR_ENABLED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="SET_REPAIR_WARN_ABOUT_DATA_LOSS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000008)
            </code>
                </value>
            </constant>
            <constant name="SET_REPAIR_DISABLED_AND_BUGCHECK_ON_CORRUPT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000010)
            </code>
                </value>
            </constant>
            <constant name="SET_REPAIR_VALID_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000019)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_IN_USE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000000001)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_REUSED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000000002)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_EXIST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000000004)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_BASE_RECORD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000000008)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_SYSTEM_FILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000000010)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_NOT_IMPLEMENTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000000020)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_UNABLE_TO_REPAIR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000000040)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_REPAIR_DISABLED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000000080)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_RECURSIVELY_CORRUPTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000000100)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_ORPHAN_GENERATED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000000200)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_REPAIRED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000000400)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_NOTHING_WRONG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000000800)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_NOT_FOUND" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000001000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_POTENTIAL_CROSSLINK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000002000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_STALE_INFORMATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000004000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_CLUSTERS_ALREADY_IN_USE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000008000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_LCN_NOT_EXIST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000010000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_INVALID_RUN_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000020000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_NOT_ORPHAN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000040000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_FILE_RECORD_IS_BASE_RECORD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000080000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_INVALID_ARRAY_LENGTH_COUNT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000100000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_SID_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000200000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_SID_MISMATCH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000400000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_INVALID_PARENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000000800000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_IN_USE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000001000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_REUSED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000002000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_EXIST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000004000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_BASE_RECORD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000008000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_PARENT_FILE_RECORD_NOT_INDEX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000010000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_VALID_INDEX_ENTRY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000020000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_OUT_OF_GENERIC_NAMES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000000040000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_OUT_OF_RESOURCE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x0000000080000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_INVALID_LCN" access="public">
                <type primitive="True">long</type>
                <value>
                    <code>(0x0000000100000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_INVALID_VCN" access="public">
                <type primitive="True">long</type>
                <value>
                    <code>(0x0000000200000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_NAME_CONFLICT" access="public">
                <type primitive="True">long</type>
                <value>
                    <code>(0x0000000400000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_ORPHAN" access="public">
                <type primitive="True">long</type>
                <value>
                    <code>(0x0000000800000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_TOO_SMALL" access="public">
                <type primitive="True">long</type>
                <value>
                    <code>(0x0000001000000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_ATTRIBUTE_NON_RESIDENT" access="public">
                <type primitive="True">long</type>
                <value>
                    <code>(0x0000002000000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_DENY_DEFRAG" access="public">
                <type primitive="True">long</type>
                <value>
                    <code>(0x0000004000000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_PREVIOUS_PARENT_STILL_VALID" access="public">
                <type primitive="True">long</type>
                <value>
                    <code>(0x0000008000000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_INDEX_ENTRY_MISMATCH" access="public">
                <type primitive="True">long</type>
                <value>
                    <code>(0x0000010000000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_INVALID_ORPHAN_RECOVERY_NAME" access="public">
                <type primitive="True">long</type>
                <value>
                    <code>(0x0000020000000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_INITIATE_REPAIR_HINT1_MULTIPLE_FILE_NAME_ATTRIBUTES" access="public">
                <type primitive="True">long</type>
                <value>
                    <code>(0x0000040000000000)
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_FLAG_LOGGING_MODE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_FLAG_RENAME_RM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MAX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_FLAG_LOG_CONTAINER_COUNT_MIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000080
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_FLAG_GROW_LOG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000400
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_FLAG_SHRINK_LOG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000800
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_FLAG_ENFORCE_MINIMUM_SIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00001000
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_FLAG_PRESERVE_CHANGES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00002000
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_FLAG_RESET_RM_AT_NEXT_START" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00004000
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_FLAG_DO_NOT_RESET_RM_AT_NEXT_START" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_FLAG_PREFER_CONSISTENCY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00010000
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_FLAG_PREFER_AVAILABILITY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00020000
            </code>
                </value>
            </constant>
            <constant name="TXFS_LOGGING_MODE_SIMPLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0001)
            </code>
                </value>
            </constant>
            <constant name="TXFS_LOGGING_MODE_FULL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0002)
            </code>
                </value>
            </constant>
            <constant name="TXFS_TRANSACTION_STATE_NONE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00
            </code>
                </value>
            </constant>
            <constant name="TXFS_TRANSACTION_STATE_ACTIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="TXFS_TRANSACTION_STATE_PREPARED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="TXFS_TRANSACTION_STATE_NOTACTIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x03
            </code>
                </value>
            </constant>
            <constant name="TXFS_MODIFY_RM_VALID_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001 | 0x00000002 | 0x00000004 | 0x00000008 | 0x00000010 | 0x00000020 | 0x00000040 | 0x00000080 | 0x00000100 | 0x00000800 | 0x00000400 | 0x00001000 | 0x00002000 | 0x00004000 | 0x00008000 | 0x00010000 | 0x00020000)
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_STATE_NOT_STARTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_STATE_STARTING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_STATE_ACTIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="TXFS_RM_STATE_SHUTTING_DOWN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="TXFS_QUERY_RM_INFORMATION_VALID_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000010 | 0x00000020 | 0x00000080 | 0x00000100 | 0x00004000 | 0x00008000 | 0x00010000 | 0x00020000)
            </code>
                </value>
            </constant>
            <constant name="TXFS_ROLLFORWARD_REDO_FLAG_USE_LAST_REDO_LSN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="TXFS_ROLLFORWARD_REDO_FLAG_USE_LAST_VIRTUAL_CLOCK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="TXFS_ROLLFORWARD_REDO_VALID_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x01 | 0x02)
            </code>
                </value>
            </constant>
            <constant name="TXFS_START_RM_FLAG_LOG_CONTAINER_COUNT_MAX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="TXFS_START_RM_FLAG_LOG_CONTAINER_COUNT_MIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="TXFS_START_RM_FLAG_LOG_CONTAINER_SIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="TXFS_START_RM_FLAG_LOG_GROWTH_INCREMENT_NUM_CONTAINERS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="TXFS_START_RM_FLAG_LOG_GROWTH_INCREMENT_PERCENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="TXFS_START_RM_FLAG_LOG_AUTO_SHRINK_PERCENTAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="TXFS_START_RM_FLAG_LOG_NO_CONTAINER_COUNT_MAX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="TXFS_START_RM_FLAG_LOG_NO_CONTAINER_COUNT_MIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000080
            </code>
                </value>
            </constant>
            <constant name="TXFS_START_RM_FLAG_RECOVER_BEST_EFFORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000200
            </code>
                </value>
            </constant>
            <constant name="TXFS_START_RM_FLAG_LOGGING_MODE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000400
            </code>
                </value>
            </constant>
            <constant name="TXFS_START_RM_FLAG_PRESERVE_CHANGES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000800
            </code>
                </value>
            </constant>
            <constant name="TXFS_START_RM_FLAG_PREFER_CONSISTENCY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00001000
            </code>
                </value>
            </constant>
            <constant name="TXFS_START_RM_FLAG_PREFER_AVAILABILITY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00002000
            </code>
                </value>
            </constant>
            <constant name="TXFS_START_RM_VALID_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001 | 0x00000002 | 0x00000004 | 0x00000008 | 0x00000010 | 0x00000020 | 0x00000200 | 0x00000040 | 0x00000400 | 0x00000800 | 0x00001000 | 0x00002000)
            </code>
                </value>
            </constant>
            <constant name="TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_FLAG_CREATED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY_FLAG_DELETED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="TXFS_TRANSACTED_VERSION_NONTRANSACTED" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFE
            </code>
                </value>
            </constant>
            <constant name="TXFS_TRANSACTED_VERSION_UNCOMMITTED" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="TXFS_SAVEPOINT_SET" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="TXFS_SAVEPOINT_ROLLBACK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="TXFS_SAVEPOINT_CLEAR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="TXFS_SAVEPOINT_CLEAR_ALL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="PERSISTENT_VOLUME_STATE_SHORT_NAME_CREATION_DISABLED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="PERSISTENT_VOLUME_STATE_VOLUME_SCRUB_DISABLED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="PERSISTENT_VOLUME_STATE_GLOBAL_METADATA_NO_SEEK_PENALTY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000004)
            </code>
                </value>
            </constant>
            <constant name="PERSISTENT_VOLUME_STATE_LOCAL_METADATA_NO_SEEK_PENALTY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000008)
            </code>
                </value>
            </constant>
            <constant name="PERSISTENT_VOLUME_STATE_NO_HEAT_GATHERING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000010)
            </code>
                </value>
            </constant>
            <constant name="PERSISTENT_VOLUME_STATE_CONTAINS_BACKING_WIM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000020)
            </code>
                </value>
            </constant>
            <constant name="PERSISTENT_VOLUME_STATE_BACKED_BY_WIM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000040)
            </code>
                </value>
            </constant>
            <constant name="PERSISTENT_VOLUME_STATE_NO_WRITE_AUTO_TIERING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000080)
            </code>
                </value>
            </constant>
            <constant name="PERSISTENT_VOLUME_STATE_TXF_DISABLED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000100)
            </code>
                </value>
            </constant>
            <constant name="PERSISTENT_VOLUME_STATE_REALLOCATE_ALL_DATA_WRITES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000200)
            </code>
                </value>
            </constant>
            <constant name="PERSISTENT_VOLUME_STATE_CHKDSK_RAN_ONCE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000400)
            </code>
                </value>
            </constant>
            <constant name="PERSISTENT_VOLUME_STATE_MODIFIED_BY_CHKDSK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000800)
            </code>
                </value>
            </constant>
            <constant name="PERSISTENT_VOLUME_STATE_DAX_FORMATTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00001000)
            </code>
                </value>
            </constant>
            <constant name="OPLOCK_LEVEL_CACHE_READ" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="OPLOCK_LEVEL_CACHE_HANDLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="OPLOCK_LEVEL_CACHE_WRITE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000004)
            </code>
                </value>
            </constant>
            <constant name="REQUEST_OPLOCK_INPUT_FLAG_REQUEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="REQUEST_OPLOCK_INPUT_FLAG_ACK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="REQUEST_OPLOCK_INPUT_FLAG_COMPLETE_ACK_ON_CLOSE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000004)
            </code>
                </value>
            </constant>
            <constant name="REQUEST_OPLOCK_CURRENT_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="REQUEST_OPLOCK_OUTPUT_FLAG_ACK_REQUIRED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="REQUEST_OPLOCK_OUTPUT_FLAG_MODES_PROVIDED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="QUERY_DEPENDENT_VOLUME_REQUEST_FLAG_HOST_VOLUMES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="QUERY_DEPENDENT_VOLUME_REQUEST_FLAG_GUEST_VOLUMES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="SD_GLOBAL_CHANGE_TYPE_MACHINE_SID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="SD_GLOBAL_CHANGE_TYPE_QUERY_STATS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="SD_GLOBAL_CHANGE_TYPE_ENUM_SDS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(2 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_PAGE_FILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_DENY_DEFRAG_SET" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_FS_SYSTEM_FILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="LOOKUP_STREAM_FROM_CLUSTER_ENTRY_FLAG_TXF_SYSTEM_FILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_MASK" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xff000000
            </code>
                </value>
            </constant>
            <constant name="LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01000000
            </code>
                </value>
            </constant>
            <constant name="LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_INDEX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02000000
            </code>
                </value>
            </constant>
            <constant name="LOOKUP_STREAM_FROM_CLUSTER_ENTRY_ATTRIBUTE_SYSTEM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x03000000
            </code>
                </value>
            </constant>
            <constant name="FILE_TYPE_NOTIFICATION_FLAG_USAGE_BEGIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="FILE_TYPE_NOTIFICATION_FLAG_USAGE_END" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CSV_MGMTLOCK_CHECK_VOLUME_REDIRECTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="CSV_NAMESPACE_INFO_V1" access="public">
                <type primitive="True">uint</type>
                <value>
                    <unchecked>
                        <code>(24)
            </code>
                    </unchecked>
                </value>
            </constant>
            <constant name="CSV_INVALID_DEVICE_NUMBER" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="CSV_QUERY_MDS_PATH_V2_VERSION_1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="CSV_QUERY_MDS_PATH_FLAG_STORAGE_ON_THIS_NODE_IS_CONNECTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="CSV_QUERY_MDS_PATH_FLAG_CSV_DIRECT_IO_ENABLED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="CSV_QUERY_MDS_PATH_FLAG_SMB_BYPASS_CSV_ENABLED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_RESTART" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_INCLUDE_NAMES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_INCLUDE_STREAMS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000004)
            </code>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_INCLUDE_EXTENTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000008)
            </code>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_INCLUDE_EXTRA_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000010)
            </code>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_INCLUDE_STREAMS_WITH_NO_CLUSTERS_ALLOCATED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000020)
            </code>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_INCLUDE_FULL_PATH_IN_NAMES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000040)
            </code>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000080)
            </code>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_DSC_ATTRIBUTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000100)
            </code>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_TXF_ATTRIBUTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000200)
            </code>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_EFS_ATTRIBUTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000400)
            </code>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_INCLUDE_ONLY_FILES_WITH_SPECIFIC_ATTRIBUTES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000800)
            </code>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_INCLUDE_FILES_WITH_DSC_ATTRIBUTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00001000)
            </code>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_DATA_ATTRIBUTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00002000)
            </code>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_REPARSE_ATTRIBUTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00004000)
            </code>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_INCLUDE_STREAM_INFORMATION_FOR_EA_ATTRIBUTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00008000)
            </code>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_SINGLE_INSTANCED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="FILE_LAYOUT_NAME_ENTRY_PRIMARY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="FILE_LAYOUT_NAME_ENTRY_DOS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="STREAM_LAYOUT_ENTRY_IMMOVABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="STREAM_LAYOUT_ENTRY_PINNED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="STREAM_LAYOUT_ENTRY_RESIDENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000004)
            </code>
                </value>
            </constant>
            <constant name="STREAM_LAYOUT_ENTRY_NO_CLUSTERS_ALLOCATED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000008)
            </code>
                </value>
            </constant>
            <constant name="STREAM_LAYOUT_ENTRY_HAS_INFORMATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000010)
            </code>
                </value>
            </constant>
            <constant name="STREAM_EXTENT_ENTRY_AS_RETRIEVAL_POINTERS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="STREAM_EXTENT_ENTRY_ALL_EXTENTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="CHECKSUM_TYPE_UNCHANGED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-1)
            </code>
                </value>
            </constant>
            <constant name="CHECKSUM_TYPE_NONE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0)
            </code>
                </value>
            </constant>
            <constant name="CHECKSUM_TYPE_CRC32" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1)
            </code>
                </value>
            </constant>
            <constant name="CHECKSUM_TYPE_CRC64" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(2)
            </code>
                </value>
            </constant>
            <constant name="CHECKSUM_TYPE_ECC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(3)
            </code>
                </value>
            </constant>
            <constant name="CHECKSUM_TYPE_FIRST_UNUSED_TYPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(4)
            </code>
                </value>
            </constant>
            <constant name="FSCTL_INTEGRITY_FLAG_CHECKSUM_ENFORCEMENT_OFF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1)
            </code>
                </value>
            </constant>
            <constant name="OFFLOAD_READ_FLAG_ALL_ZERO_BEYOND_CURRENT_RANGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1)
            </code>
                </value>
            </constant>
            <constant name="SET_PURGE_FAILURE_MODE_ENABLED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="SET_PURGE_FAILURE_MODE_DISABLED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="FILE_REGION_USAGE_VALID_CACHED_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="FILE_REGION_USAGE_VALID_NONCACHED_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="FILE_REGION_USAGE_OTHER_PAGE_ALIGNMENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="FILE_REGION_USAGE_LARGE_PAGE_ALIGNMENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="FILE_REGION_USAGE_QUERY_ALIGNMENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000008)
            </code>
                </value>
            </constant>
            <constant name="VALID_WRITE_USN_REASON_MASK" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>((0x00000001) | (0x80000000))
            </code>
                </value>
            </constant>
            <constant name="FILE_STORAGE_TIER_NAME_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(256)
            </code>
                </value>
            </constant>
            <constant name="FILE_STORAGE_TIER_DESCRIPTION_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(512)
            </code>
                </value>
            </constant>
            <constant name="FILE_STORAGE_TIER_FLAG_NO_SEEK_PENALTY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00020000)
            </code>
                </value>
            </constant>
            <constant name="FILE_STORAGE_TIER_FLAG_WRITE_BACK_CACHE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00200000)
            </code>
                </value>
            </constant>
            <constant name="FILE_STORAGE_TIER_FLAG_READ_CACHE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00400000)
            </code>
                </value>
            </constant>
            <constant name="FILE_STORAGE_TIER_FLAG_PARITY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00800000)
            </code>
                </value>
            </constant>
            <constant name="FILE_STORAGE_TIER_FLAG_SMR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x01000000)
            </code>
                </value>
            </constant>
            <constant name="QUERY_STORAGE_CLASSES_FLAGS_MEASURE_WRITE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="QUERY_STORAGE_CLASSES_FLAGS_MEASURE_READ" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000000
            </code>
                </value>
            </constant>
            <constant name="QUERY_STORAGE_CLASSES_FLAGS_NO_DEFRAG_VOLUME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20000000
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_STORAGE_CLASSES_OUTPUT_VERSION" access="public">
                <type primitive="True">uint</type>
                <value>
                    <unchecked>
                        <value>
                            <code>1088
            </code>
                        </value>
                    </unchecked>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_REPARSE_DATA_INVALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0001)
            </code>
                </value>
            </constant>
            <constant name="QUERY_FILE_LAYOUT_REPARSE_TAG_INVALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0002)
            </code>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_REGION_INFO_INPUT_VERSION" access="public">
                <type primitive="True">uint</type>
                <value>
                    <unchecked>
                        <value>
                            <code>32
            </code>
                        </value>
                    </unchecked>
                </value>
            </constant>
            <constant name="FSCTL_QUERY_REGION_INFO_OUTPUT_VERSION" access="public">
                <type primitive="True">uint</type>
                <value>
                    <unchecked>
                        <value>
                            <code>64
            </code>
                        </value>
                    </unchecked>
                </value>
            </constant>
            <constant name="DUPLICATE_EXTENTS_DATA_EX_SOURCE_ATOMIC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="DUPLICATE_EXTENTS_DATA_EX_ASYNC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="REFS_SMR_VOLUME_INFO_OUTPUT_VERSION_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="REFS_SMR_VOLUME_GC_PARAMETERS_VERSION_V1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="STREAMS_INVALID_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0)
            </code>
                </value>
            </constant>
            <constant name="STREAMS_MAX_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0xffff)
            </code>
                </value>
            </constant>
            <constant name="STREAMS_ASSOCIATE_ID_CLEAR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x1)
            </code>
                </value>
            </constant>
            <constant name="STREAMS_ASSOCIATE_ID_SET" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x2)
            </code>
                </value>
            </constant>
            <constant name="DAX_ALLOC_ALIGNMENT_FLAG_MANDATORY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="DAX_ALLOC_ALIGNMENT_FLAG_FALLBACK_SPECIFIED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="WOF_CURRENT_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="WOF_PROVIDER_WIM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="WOF_PROVIDER_FILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="WOF_PROVIDER_CLOUD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000003)
            </code>
                </value>
            </constant>
            <constant name="WIM_PROVIDER_HASH_SIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>20
            </code>
                </value>
            </constant>
            <constant name="WIM_PROVIDER_CURRENT_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="WIM_PROVIDER_EXTERNAL_FLAG_NOT_ACTIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="WIM_PROVIDER_EXTERNAL_FLAG_SUSPENDED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="WIM_BOOT_OS_WIM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="WIM_BOOT_NOT_OS_WIM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_PROVIDER_CURRENT_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="FILE_PROVIDER_SINGLE_FILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="FILE_PROVIDER_COMPRESSION_XPRESS4K" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000000)
            </code>
                </value>
            </constant>
            <constant name="FILE_PROVIDER_COMPRESSION_LZX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="FILE_PROVIDER_COMPRESSION_XPRESS8K" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="FILE_PROVIDER_COMPRESSION_XPRESS16K" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000003)
            </code>
                </value>
            </constant>
            <constant name="FILE_PROVIDER_COMPRESSION_MAXIMUM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000004)
            </code>
                </value>
            </constant>
            <constant name="FILE_PROVIDER_FLAG_COMPRESS_ON_WRITE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="CONTAINER_VOLUME_STATE_HOSTING_CONTAINER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="CONTAINER_ROOT_INFO_FLAG_SCRATCH_ROOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="CONTAINER_ROOT_INFO_FLAG_LAYER_ROOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_ROOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000004)
            </code>
                </value>
            </constant>
            <constant name="CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_TARGET_ROOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000008)
            </code>
                </value>
            </constant>
            <constant name="CONTAINER_ROOT_INFO_FLAG_VIRTUALIZATION_EXCEPTION_ROOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000010)
            </code>
                </value>
            </constant>
            <constant name="CONTAINER_ROOT_INFO_FLAG_BIND_ROOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000020)
            </code>
                </value>
            </constant>
            <constant name="CONTAINER_ROOT_INFO_FLAG_BIND_TARGET_ROOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000040)
            </code>
                </value>
            </constant>
            <constant name="CONTAINER_ROOT_INFO_FLAG_BIND_EXCEPTION_ROOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000080)
            </code>
                </value>
            </constant>
            <constant name="CONTAINER_ROOT_INFO_FLAG_BIND_DO_NOT_MAP_NAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000100)
            </code>
                </value>
            </constant>
            <constant name="CONTAINER_ROOT_INFO_VALID_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x000001ff)
            </code>
                </value>
            </constant>
            <constant name="PROJFS_PROTOCOL_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="IOCTL_VOLUME_BASE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000056
            </code>
                </value>
            </constant>
            <constant name="IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000056) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((0) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_VOLUME_ONLINE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000056) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((2) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_VOLUME_OFFLINE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000056) &lt;&lt; 16) | (((0x0001) | (0x0002)) &lt;&lt; 14) | ((3) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_VOLUME_IS_CLUSTERED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000056) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((12) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IOCTL_VOLUME_GET_GPT_ATTRIBUTES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(((0x00000056) &lt;&lt; 16) | ((0) &lt;&lt; 14) | ((14) &lt;&lt; 2) | (0))
            </code>
                </value>
            </constant>
            <constant name="IRP_EXT_TRACK_OFFSET_HEADER_VALIDATION_VALUE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x544F
            </code>
                </value>
            </constant>
            <constant name="EFS_TRACKED_OFFSET_HEADER_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="SPACES_TRACKED_OFFSET_HEADER_FLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0002
            </code>
                </value>
            </constant>
        </class>
    </namespace>
</bindings>
