<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/winioctl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="SCM_PD_FIRMWARE_SLOT_INFO" access="public" unsafe="true">
            <field name="Version" access="public">
                <type native="DWORD">uint</type>
            </field>
            <field name="Size" access="public">
                <type native="DWORD">uint</type>
            </field>
            <field name="SlotNumber" access="public">
                <type native="BYTE">byte</type>
            </field>
            <field name="_bitfield" access="public">
                <type native="">byte</type>
            </field>
            <field name="ReadOnly" access="public">
                <type native="BYTE : 1">byte</type>
                <get inlining="aggressive">
                    <code>return (<typeName>byte</typeName>)(<bitfieldName>_bitfield</bitfieldName> &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>);
        </code>
                </get>
                <set inlining="aggressive">
                    <code>
                        <bitfieldName>_bitfield</bitfieldName> = (<typeNameBacking>byte</typeNameBacking>)((_bitfield &amp; ~0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>) | (value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>));
        </code>
                </set>
            </field>
            <field name="Reserved0" access="public">
                <type native="BYTE : 7">byte</type>
                <get inlining="aggressive">
                    <code>return (<typeName>byte</typeName>)((<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>1</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>7Fu</bitwidthHexStringBacking>);
        </code>
                </get>
                <set inlining="aggressive">
                    <code>
                        <bitfieldName>_bitfield</bitfieldName> = (<typeNameBacking>byte</typeNameBacking>)((_bitfield &amp; ~(0x<bitwidthHexStringBacking>7Fu</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>1</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>7Fu</bitwidthHexString>) &lt;&lt; 1));
        </code>
                </set>
            </field>
            <field name="Reserved1" access="public">
                <type native="BYTE [6]" count="6" fixed="_Reserved1_e__FixedBuffer">byte</type>
            </field>
            <field name="Revision" access="public">
                <type native="BYTE [32]" count="32" fixed="_Revision_e__FixedBuffer">byte</type>
            </field>
        </struct>
    </namespace>
</bindings>
