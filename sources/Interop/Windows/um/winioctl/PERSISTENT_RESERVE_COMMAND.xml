<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/winioctl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="PERSISTENT_RESERVE_COMMAND" access="public">
            <field name="Version" access="public">
                <type native="DWORD">uint</type>
            </field>
            <field name="Size" access="public">
                <type native="DWORD">uint</type>
            </field>
            <field name="Anonymous" access="public">
                <type native="_PERSISTENT_RESERVE_COMMAND::(anonymous union at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/winioctl.h:5615:5)">_Anonymous_e__Union</type>
            </field>
            <field name="PR_IN" access="public">
                <type native="">ref _Anonymous_e__Union._PR_IN_e__Struct</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.PR_IN, 1));
        </code>
                </get>
            </field>
            <field name="PR_OUT" access="public">
                <type native="">ref _Anonymous_e__Union._PR_OUT_e__Struct</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.PR_OUT, 1));
        </code>
                </get>
            </field>
            <struct name="_Anonymous_e__Union" access="public" layout="Explicit">
                <field name="PR_IN" access="public" offset="0">
                    <type native="struct (anonymous struct at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/winioctl.h:5617:9)">_PR_IN_e__Struct</type>
                </field>
                <field name="PR_OUT" access="public" offset="0">
                    <type native="struct (anonymous struct at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/winioctl.h:5634:9)">_PR_OUT_e__Struct</type>
                </field>
                <struct name="_PR_IN_e__Struct" access="public">
                    <field name="_bitfield" access="public">
                        <type native="">byte</type>
                    </field>
                    <field name="ServiceAction" access="public">
                        <type native="BYTE : 5">byte</type>
                        <get inlining="aggressive">
                            <code>return (<typeName>byte</typeName>)(<bitfieldName>_bitfield</bitfieldName> &amp; 0x<bitwidthHexStringBacking>1Fu</bitwidthHexStringBacking>);
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (<typeNameBacking>byte</typeNameBacking>)((_bitfield &amp; ~0x<bitwidthHexStringBacking>1Fu</bitwidthHexStringBacking>) | (value &amp; 0x<bitwidthHexString>1Fu</bitwidthHexString>));
        </code>
                        </set>
                    </field>
                    <field name="Reserved1" access="public">
                        <type native="BYTE : 3">byte</type>
                        <get inlining="aggressive">
                            <code>return (<typeName>byte</typeName>)((<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>5</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>7u</bitwidthHexStringBacking>);
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (<typeNameBacking>byte</typeNameBacking>)((_bitfield &amp; ~(0x<bitwidthHexStringBacking>7u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>5</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>7u</bitwidthHexString>) &lt;&lt; 5));
        </code>
                        </set>
                    </field>
                    <field name="AllocationLength" access="public">
                        <type native="WORD">ushort</type>
                    </field>
                </struct>
                <struct name="_PR_OUT_e__Struct" access="public" unsafe="true">
                    <field name="_bitfield1" access="public">
                        <type native="">byte</type>
                    </field>
                    <field name="ServiceAction" access="public">
                        <type native="BYTE : 5">byte</type>
                        <get inlining="aggressive">
                            <code>return (<typeName>byte</typeName>)(<bitfieldName>_bitfield1</bitfieldName> &amp; 0x<bitwidthHexStringBacking>1Fu</bitwidthHexStringBacking>);
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield1</bitfieldName> = (<typeNameBacking>byte</typeNameBacking>)((_bitfield1 &amp; ~0x<bitwidthHexStringBacking>1Fu</bitwidthHexStringBacking>) | (value &amp; 0x<bitwidthHexString>1Fu</bitwidthHexString>));
        </code>
                        </set>
                    </field>
                    <field name="Reserved1" access="public">
                        <type native="BYTE : 3">byte</type>
                        <get inlining="aggressive">
                            <code>return (<typeName>byte</typeName>)((<bitfieldName>_bitfield1</bitfieldName> &gt;&gt; <bitfieldOffset>5</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>7u</bitwidthHexStringBacking>);
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield1</bitfieldName> = (<typeNameBacking>byte</typeNameBacking>)((_bitfield1 &amp; ~(0x<bitwidthHexStringBacking>7u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>5</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>7u</bitwidthHexString>) &lt;&lt; 5));
        </code>
                        </set>
                    </field>
                    <field name="_bitfield2" access="public">
                        <type native="">byte</type>
                    </field>
                    <field name="Type" access="public">
                        <type native="BYTE : 4">byte</type>
                        <get inlining="aggressive">
                            <code>return (<typeName>byte</typeName>)(<bitfieldName>_bitfield2</bitfieldName> &amp; 0x<bitwidthHexStringBacking>Fu</bitwidthHexStringBacking>);
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield2</bitfieldName> = (<typeNameBacking>byte</typeNameBacking>)((_bitfield2 &amp; ~0x<bitwidthHexStringBacking>Fu</bitwidthHexStringBacking>) | (value &amp; 0x<bitwidthHexString>Fu</bitwidthHexString>));
        </code>
                        </set>
                    </field>
                    <field name="Scope" access="public">
                        <type native="BYTE : 4">byte</type>
                        <get inlining="aggressive">
                            <code>return (<typeName>byte</typeName>)((<bitfieldName>_bitfield2</bitfieldName> &gt;&gt; <bitfieldOffset>4</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>Fu</bitwidthHexStringBacking>);
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield2</bitfieldName> = (<typeNameBacking>byte</typeNameBacking>)((_bitfield2 &amp; ~(0x<bitwidthHexStringBacking>Fu</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>4</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>Fu</bitwidthHexString>) &lt;&lt; 4));
        </code>
                        </set>
                    </field>
                    <field name="ParameterList" access="public">
                        <type native="BYTE [0]" count="1" fixed="_ParameterList_e__FixedBuffer">byte</type>
                    </field>
                </struct>
            </struct>
        </struct>
    </namespace>
</bindings>
