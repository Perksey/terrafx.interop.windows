<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfidl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFNetCredentialCache" access="public" native="struct IMFNetCredentialCache : IUnknown" uuid="5b87ef6c-7ed8-434f-ba0e-184fac1628d1" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFNetCredentialCache*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFNetCredentialCache*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFNetCredentialCache*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFNetCredentialCache*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFNetCredentialCache*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFNetCredentialCache*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetCredential" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pszUrl">
                    <type>ushort*</type>
                </param>
                <param name="pszRealm">
                    <type>ushort*</type>
                </param>
                <param name="dwAuthenticationFlags">
                    <type>uint</type>
                </param>
                <param name="ppCred">
                    <type>IMFNetCredential**</type>
                </param>
                <param name="pdwRequirementsFlags">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFNetCredentialCache*, ushort*, ushort*, uint, IMFNetCredential**, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFNetCredentialCache*)Unsafe.AsPointer(ref this)</param>, <param name="pszUrl">pszUrl</param>, <param name="pszRealm">pszRealm</param>, <param name="dwAuthenticationFlags">dwAuthenticationFlags</param>, <param name="ppCred">ppCred</param>, <param name="pdwRequirementsFlags">pdwRequirementsFlags</param>);
        </code>
                </body>
            </function>
            <function name="SetGood" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pCred">
                    <type>IMFNetCredential*</type>
                </param>
                <param name="fGood">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFNetCredentialCache*, IMFNetCredential*, int, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFNetCredentialCache*)Unsafe.AsPointer(ref this)</param>, <param name="pCred">pCred</param>, <param name="fGood">fGood</param>);
        </code>
                </body>
            </function>
            <function name="SetUserOptions" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pCred">
                    <type>IMFNetCredential*</type>
                </param>
                <param name="dwOptionsFlags">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFNetCredentialCache*, IMFNetCredential*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFNetCredentialCache*)Unsafe.AsPointer(ref this)</param>, <param name="pCred">pCred</param>, <param name="dwOptionsFlags">dwOptionsFlags</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
