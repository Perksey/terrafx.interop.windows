<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfidl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFSampleProtection" access="public" native="struct IMFSampleProtection : IUnknown" uuid="8e36395f-c7b9-43c4-a54d-512b4af63c95" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSampleProtection*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFSampleProtection*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSampleProtection*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFSampleProtection*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSampleProtection*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFSampleProtection*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetInputProtectionVersion" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pdwVersion">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSampleProtection*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFSampleProtection*)Unsafe.AsPointer(ref this)</param>, <param name="pdwVersion">pdwVersion</param>);
        </code>
                </body>
            </function>
            <function name="GetOutputProtectionVersion" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pdwVersion">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSampleProtection*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFSampleProtection*)Unsafe.AsPointer(ref this)</param>, <param name="pdwVersion">pdwVersion</param>);
        </code>
                </body>
            </function>
            <function name="GetProtectionCertificate" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwVersion">
                    <type>uint</type>
                </param>
                <param name="ppCert">
                    <type>byte**</type>
                </param>
                <param name="pcbCert">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSampleProtection*, uint, byte**, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFSampleProtection*)Unsafe.AsPointer(ref this)</param>, <param name="dwVersion">dwVersion</param>, <param name="ppCert">ppCert</param>, <param name="pcbCert">pcbCert</param>);
        </code>
                </body>
            </function>
            <function name="InitOutputProtection" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwVersion">
                    <type>uint</type>
                </param>
                <param name="dwOutputId">
                    <type>uint</type>
                </param>
                <param name="pbCert">
                    <type>byte*</type>
                </param>
                <param name="cbCert">
                    <type>uint</type>
                </param>
                <param name="ppbSeed">
                    <type>byte**</type>
                </param>
                <param name="pcbSeed">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSampleProtection*, uint, uint, byte*, uint, byte**, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFSampleProtection*)Unsafe.AsPointer(ref this)</param>, <param name="dwVersion">dwVersion</param>, <param name="dwOutputId">dwOutputId</param>, <param name="pbCert">pbCert</param>, <param name="cbCert">cbCert</param>, <param name="ppbSeed">ppbSeed</param>, <param name="pcbSeed">pcbSeed</param>);
        </code>
                </body>
            </function>
            <function name="InitInputProtection" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwVersion">
                    <type>uint</type>
                </param>
                <param name="dwInputId">
                    <type>uint</type>
                </param>
                <param name="pbSeed">
                    <type>byte*</type>
                </param>
                <param name="cbSeed">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSampleProtection*, uint, uint, byte*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFSampleProtection*)Unsafe.AsPointer(ref this)</param>, <param name="dwVersion">dwVersion</param>, <param name="dwInputId">dwInputId</param>, <param name="pbSeed">pbSeed</param>, <param name="cbSeed">cbSeed</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
