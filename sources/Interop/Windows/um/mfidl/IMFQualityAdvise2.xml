<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfidl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFQualityAdvise2" access="public" native="struct IMFQualityAdvise2 : IMFQualityAdvise" uuid="f3706f0d-8ea2-4886-8000-7155e9ec2eae" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFQualityAdvise2*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFQualityAdvise2*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFQualityAdvise2*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFQualityAdvise2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFQualityAdvise2*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFQualityAdvise2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetDropMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="eDropMode">
                    <type>MF_QUALITY_DROP_MODE</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFQualityAdvise2*, MF_QUALITY_DROP_MODE, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFQualityAdvise2*)Unsafe.AsPointer(ref this)</param>, <param name="eDropMode">eDropMode</param>);
        </code>
                </body>
            </function>
            <function name="SetQualityLevel" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="eQualityLevel">
                    <type>MF_QUALITY_LEVEL</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFQualityAdvise2*, MF_QUALITY_LEVEL, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFQualityAdvise2*)Unsafe.AsPointer(ref this)</param>, <param name="eQualityLevel">eQualityLevel</param>);
        </code>
                </body>
            </function>
            <function name="GetDropMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="peDropMode">
                    <type>MF_QUALITY_DROP_MODE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFQualityAdvise2*, MF_QUALITY_DROP_MODE*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFQualityAdvise2*)Unsafe.AsPointer(ref this)</param>, <param name="peDropMode">peDropMode</param>);
        </code>
                </body>
            </function>
            <function name="GetQualityLevel" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="peQualityLevel">
                    <type>MF_QUALITY_LEVEL*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFQualityAdvise2*, MF_QUALITY_LEVEL*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFQualityAdvise2*)Unsafe.AsPointer(ref this)</param>, <param name="peQualityLevel">peQualityLevel</param>);
        </code>
                </body>
            </function>
            <function name="DropTime" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="hnsAmountToDrop">
                    <type>long</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFQualityAdvise2*, long, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFQualityAdvise2*)Unsafe.AsPointer(ref this)</param>, <param name="hnsAmountToDrop">hnsAmountToDrop</param>);
        </code>
                </body>
            </function>
            <function name="NotifyQualityEvent" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pEvent">
                    <type>IMFMediaEvent*</type>
                </param>
                <param name="pdwFlags">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFQualityAdvise2*, IMFMediaEvent*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IMFQualityAdvise2*)Unsafe.AsPointer(ref this)</param>, <param name="pEvent">pEvent</param>, <param name="pdwFlags">pdwFlags</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
