<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfidl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFVideoProcessorControl" access="public" native="struct IMFVideoProcessorControl : IUnknown" uuid="a3f675d5-6119-4f7f-a100-1d8b280f0efb" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFVideoProcessorControl*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFVideoProcessorControl*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFVideoProcessorControl*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFVideoProcessorControl*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFVideoProcessorControl*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFVideoProcessorControl*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetBorderColor" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pBorderColor">
                    <type>MFARGB*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFVideoProcessorControl*, MFARGB*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFVideoProcessorControl*)Unsafe.AsPointer(ref this)</param>, <param name="pBorderColor">pBorderColor</param>);
        </code>
                </body>
            </function>
            <function name="SetSourceRectangle" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pSrcRect">
                    <type>RECT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFVideoProcessorControl*, RECT*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFVideoProcessorControl*)Unsafe.AsPointer(ref this)</param>, <param name="pSrcRect">pSrcRect</param>);
        </code>
                </body>
            </function>
            <function name="SetDestinationRectangle" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDstRect">
                    <type>RECT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFVideoProcessorControl*, RECT*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFVideoProcessorControl*)Unsafe.AsPointer(ref this)</param>, <param name="pDstRect">pDstRect</param>);
        </code>
                </body>
            </function>
            <function name="SetMirror" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="eMirror">
                    <type>MF_VIDEO_PROCESSOR_MIRROR</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFVideoProcessorControl*, MF_VIDEO_PROCESSOR_MIRROR, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFVideoProcessorControl*)Unsafe.AsPointer(ref this)</param>, <param name="eMirror">eMirror</param>);
        </code>
                </body>
            </function>
            <function name="SetRotation" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="eRotation">
                    <type>MF_VIDEO_PROCESSOR_ROTATION</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFVideoProcessorControl*, MF_VIDEO_PROCESSOR_ROTATION, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFVideoProcessorControl*)Unsafe.AsPointer(ref this)</param>, <param name="eRotation">eRotation</param>);
        </code>
                </body>
            </function>
            <function name="SetConstrictionSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pConstrictionSize">
                    <type>SIZE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFVideoProcessorControl*, SIZE*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IMFVideoProcessorControl*)Unsafe.AsPointer(ref this)</param>, <param name="pConstrictionSize">pConstrictionSize</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
