<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfidl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFSequencerSource" access="public" native="struct IMFSequencerSource : IUnknown" uuid="197cd219-19cb-4de1-a64c-acf2edcbe59e" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSequencerSource*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFSequencerSource*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSequencerSource*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFSequencerSource*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSequencerSource*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFSequencerSource*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="AppendTopology" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pTopology">
                    <type>IMFTopology*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pdwId">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSequencerSource*, IMFTopology*, uint, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFSequencerSource*)Unsafe.AsPointer(ref this)</param>, <param name="pTopology">pTopology</param>, <param name="dwFlags">dwFlags</param>, <param name="pdwId">pdwId</param>);
        </code>
                </body>
            </function>
            <function name="DeleteTopology" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwId">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSequencerSource*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFSequencerSource*)Unsafe.AsPointer(ref this)</param>, <param name="dwId">dwId</param>);
        </code>
                </body>
            </function>
            <function name="GetPresentationContext" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pPD">
                    <type>IMFPresentationDescriptor*</type>
                </param>
                <param name="pId">
                    <type>uint*</type>
                </param>
                <param name="ppTopology">
                    <type>IMFTopology**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSequencerSource*, IMFPresentationDescriptor*, uint*, IMFTopology**, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFSequencerSource*)Unsafe.AsPointer(ref this)</param>, <param name="pPD">pPD</param>, <param name="pId">pId</param>, <param name="ppTopology">ppTopology</param>);
        </code>
                </body>
            </function>
            <function name="UpdateTopology" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwId">
                    <type>uint</type>
                </param>
                <param name="pTopology">
                    <type>IMFTopology*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSequencerSource*, uint, IMFTopology*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFSequencerSource*)Unsafe.AsPointer(ref this)</param>, <param name="dwId">dwId</param>, <param name="pTopology">pTopology</param>);
        </code>
                </body>
            </function>
            <function name="UpdateTopologyFlags" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwId">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSequencerSource*, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFSequencerSource*)Unsafe.AsPointer(ref this)</param>, <param name="dwId">dwId</param>, <param name="dwFlags">dwFlags</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
