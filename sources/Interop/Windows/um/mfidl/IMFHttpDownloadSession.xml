<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfidl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFHttpDownloadSession" access="public" native="struct IMFHttpDownloadSession : IUnknown" uuid="71fa9a2c-53ce-4662-a132-1a7e8cbf62db" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFHttpDownloadSession*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFHttpDownloadSession*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFHttpDownloadSession*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFHttpDownloadSession*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFHttpDownloadSession*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFHttpDownloadSession*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetServer" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="szServerName">
                    <type>ushort*</type>
                </param>
                <param name="nPort">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFHttpDownloadSession*, ushort*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFHttpDownloadSession*)Unsafe.AsPointer(ref this)</param>, <param name="szServerName">szServerName</param>, <param name="nPort">nPort</param>);
        </code>
                </body>
            </function>
            <function name="CreateRequest" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="szObjectName">
                    <type>ushort*</type>
                </param>
                <param name="fBypassProxyCache">
                    <type>int</type>
                </param>
                <param name="fSecure">
                    <type>int</type>
                </param>
                <param name="szVerb">
                    <type>ushort*</type>
                </param>
                <param name="szReferrer">
                    <type>ushort*</type>
                </param>
                <param name="ppRequest">
                    <type>IMFHttpDownloadRequest**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFHttpDownloadSession*, ushort*, int, int, ushort*, ushort*, IMFHttpDownloadRequest**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFHttpDownloadSession*)Unsafe.AsPointer(ref this)</param>, <param name="szObjectName">szObjectName</param>, <param name="fBypassProxyCache">fBypassProxyCache</param>, <param name="fSecure">fSecure</param>, <param name="szVerb">szVerb</param>, <param name="szReferrer">szReferrer</param>, <param name="ppRequest">ppRequest</param>);
        </code>
                </body>
            </function>
            <function name="Close" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFHttpDownloadSession*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFHttpDownloadSession*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
