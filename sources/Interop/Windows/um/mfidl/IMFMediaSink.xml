<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfidl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFMediaSink" access="public" native="struct IMFMediaSink : IUnknown" uuid="6ef2a660-47c0-4666-b13d-cbb717f2fa2c" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFMediaSink*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFMediaSink*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFMediaSink*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFMediaSink*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFMediaSink*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFMediaSink*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetCharacteristics" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pdwCharacteristics">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFMediaSink*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFMediaSink*)Unsafe.AsPointer(ref this)</param>, <param name="pdwCharacteristics">pdwCharacteristics</param>);
        </code>
                </body>
            </function>
            <function name="AddStreamSink" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwStreamSinkIdentifier">
                    <type>uint</type>
                </param>
                <param name="pMediaType">
                    <type>IMFMediaType*</type>
                </param>
                <param name="ppStreamSink">
                    <type>IMFStreamSink**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFMediaSink*, uint, IMFMediaType*, IMFStreamSink**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFMediaSink*)Unsafe.AsPointer(ref this)</param>, <param name="dwStreamSinkIdentifier">dwStreamSinkIdentifier</param>, <param name="pMediaType">pMediaType</param>, <param name="ppStreamSink">ppStreamSink</param>);
        </code>
                </body>
            </function>
            <function name="RemoveStreamSink" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwStreamSinkIdentifier">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFMediaSink*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFMediaSink*)Unsafe.AsPointer(ref this)</param>, <param name="dwStreamSinkIdentifier">dwStreamSinkIdentifier</param>);
        </code>
                </body>
            </function>
            <function name="GetStreamSinkCount" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pcStreamSinkCount">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFMediaSink*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFMediaSink*)Unsafe.AsPointer(ref this)</param>, <param name="pcStreamSinkCount">pcStreamSinkCount</param>);
        </code>
                </body>
            </function>
            <function name="GetStreamSinkByIndex" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwIndex">
                    <type>uint</type>
                </param>
                <param name="ppStreamSink">
                    <type>IMFStreamSink**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFMediaSink*, uint, IMFStreamSink**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFMediaSink*)Unsafe.AsPointer(ref this)</param>, <param name="dwIndex">dwIndex</param>, <param name="ppStreamSink">ppStreamSink</param>);
        </code>
                </body>
            </function>
            <function name="GetStreamSinkById" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwStreamSinkIdentifier">
                    <type>uint</type>
                </param>
                <param name="ppStreamSink">
                    <type>IMFStreamSink**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFMediaSink*, uint, IMFStreamSink**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IMFMediaSink*)Unsafe.AsPointer(ref this)</param>, <param name="dwStreamSinkIdentifier">dwStreamSinkIdentifier</param>, <param name="ppStreamSink">ppStreamSink</param>);
        </code>
                </body>
            </function>
            <function name="SetPresentationClock" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pPresentationClock">
                    <type>IMFPresentationClock*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFMediaSink*, IMFPresentationClock*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IMFMediaSink*)Unsafe.AsPointer(ref this)</param>, <param name="pPresentationClock">pPresentationClock</param>);
        </code>
                </body>
            </function>
            <function name="GetPresentationClock" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppPresentationClock">
                    <type>IMFPresentationClock**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFMediaSink*, IMFPresentationClock**, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IMFMediaSink*)Unsafe.AsPointer(ref this)</param>, <param name="ppPresentationClock">ppPresentationClock</param>);
        </code>
                </body>
            </function>
            <function name="Shutdown" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFMediaSink*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IMFMediaSink*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
