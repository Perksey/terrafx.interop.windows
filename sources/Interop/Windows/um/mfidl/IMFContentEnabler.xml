<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfidl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFContentEnabler" access="public" native="struct IMFContentEnabler : IUnknown" uuid="d3c4ef59-49ce-4381-9071-d5bcd044c770" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFContentEnabler*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFContentEnabler*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFContentEnabler*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFContentEnabler*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFContentEnabler*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFContentEnabler*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetEnableType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pType">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFContentEnabler*, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFContentEnabler*)Unsafe.AsPointer(ref this)</param>, <param name="pType">pType</param>);
        </code>
                </body>
            </function>
            <function name="GetEnableURL" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppwszURL">
                    <type>ushort**</type>
                </param>
                <param name="pcchURL">
                    <type>uint*</type>
                </param>
                <param name="pTrustStatus">
                    <type>MF_URL_TRUST_STATUS*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFContentEnabler*, ushort**, uint*, MF_URL_TRUST_STATUS*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFContentEnabler*)Unsafe.AsPointer(ref this)</param>, <param name="ppwszURL">ppwszURL</param>, <param name="pcchURL">pcchURL</param>, <param name="pTrustStatus">pTrustStatus</param>);
        </code>
                </body>
            </function>
            <function name="GetEnableData" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppbData">
                    <type>byte**</type>
                </param>
                <param name="pcbData">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFContentEnabler*, byte**, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFContentEnabler*)Unsafe.AsPointer(ref this)</param>, <param name="ppbData">ppbData</param>, <param name="pcbData">pcbData</param>);
        </code>
                </body>
            </function>
            <function name="IsAutomaticSupported" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pfAutomatic">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFContentEnabler*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFContentEnabler*)Unsafe.AsPointer(ref this)</param>, <param name="pfAutomatic">pfAutomatic</param>);
        </code>
                </body>
            </function>
            <function name="AutomaticEnable" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFContentEnabler*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFContentEnabler*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="MonitorEnable" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFContentEnabler*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IMFContentEnabler*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Cancel" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFContentEnabler*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IMFContentEnabler*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
