<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/msctf.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ITfThreadMgrEx" access="public" native="struct ITfThreadMgrEx : ITfThreadMgr" uuid="3e90ade3-7594-4cb0-bb58-69628f5f458c" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITfThreadMgrEx*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ITfThreadMgrEx*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITfThreadMgrEx*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ITfThreadMgrEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITfThreadMgrEx*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ITfThreadMgrEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Activate" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ptid">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITfThreadMgrEx*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ITfThreadMgrEx*)Unsafe.AsPointer(ref this)</param>, <param name="ptid">ptid</param>);
        </code>
                </body>
            </function>
            <function name="Deactivate" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITfThreadMgrEx*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ITfThreadMgrEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="CreateDocumentMgr" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppdim">
                    <type>ITfDocumentMgr**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITfThreadMgrEx*, ITfDocumentMgr**, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ITfThreadMgrEx*)Unsafe.AsPointer(ref this)</param>, <param name="ppdim">ppdim</param>);
        </code>
                </body>
            </function>
            <function name="EnumDocumentMgrs" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppEnum">
                    <type>IEnumTfDocumentMgrs**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITfThreadMgrEx*, IEnumTfDocumentMgrs**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ITfThreadMgrEx*)Unsafe.AsPointer(ref this)</param>, <param name="ppEnum">ppEnum</param>);
        </code>
                </body>
            </function>
            <function name="GetFocus" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppdimFocus">
                    <type>ITfDocumentMgr**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITfThreadMgrEx*, ITfDocumentMgr**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ITfThreadMgrEx*)Unsafe.AsPointer(ref this)</param>, <param name="ppdimFocus">ppdimFocus</param>);
        </code>
                </body>
            </function>
            <function name="SetFocus" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pdimFocus">
                    <type>ITfDocumentMgr*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITfThreadMgrEx*, ITfDocumentMgr*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ITfThreadMgrEx*)Unsafe.AsPointer(ref this)</param>, <param name="pdimFocus">pdimFocus</param>);
        </code>
                </body>
            </function>
            <function name="AssociateFocus" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="hwnd">
                    <type>IntPtr</type>
                </param>
                <param name="pdimNew">
                    <type>ITfDocumentMgr*</type>
                </param>
                <param name="ppdimPrev">
                    <type>ITfDocumentMgr**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITfThreadMgrEx*, IntPtr, ITfDocumentMgr*, ITfDocumentMgr**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ITfThreadMgrEx*)Unsafe.AsPointer(ref this)</param>, <param name="hwnd">hwnd</param>, <param name="pdimNew">pdimNew</param>, <param name="ppdimPrev">ppdimPrev</param>);
        </code>
                </body>
            </function>
            <function name="IsThreadFocus" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pfThreadFocus">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITfThreadMgrEx*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ITfThreadMgrEx*)Unsafe.AsPointer(ref this)</param>, <param name="pfThreadFocus">pfThreadFocus</param>);
        </code>
                </body>
            </function>
            <function name="GetFunctionProvider" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="clsid">
                    <type>Guid*</type>
                </param>
                <param name="ppFuncProv">
                    <type>ITfFunctionProvider**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITfThreadMgrEx*, Guid*, ITfFunctionProvider**, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ITfThreadMgrEx*)Unsafe.AsPointer(ref this)</param>, <param name="clsid">clsid</param>, <param name="ppFuncProv">ppFuncProv</param>);
        </code>
                </body>
            </function>
            <function name="EnumFunctionProviders" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppEnum">
                    <type>IEnumTfFunctionProviders**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITfThreadMgrEx*, IEnumTfFunctionProviders**, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ITfThreadMgrEx*)Unsafe.AsPointer(ref this)</param>, <param name="ppEnum">ppEnum</param>);
        </code>
                </body>
            </function>
            <function name="GetGlobalCompartment" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppCompMgr">
                    <type>ITfCompartmentMgr**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITfThreadMgrEx*, ITfCompartmentMgr**, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(ITfThreadMgrEx*)Unsafe.AsPointer(ref this)</param>, <param name="ppCompMgr">ppCompMgr</param>);
        </code>
                </body>
            </function>
            <function name="ActivateEx" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ptid">
                    <type>uint*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITfThreadMgrEx*, uint*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(ITfThreadMgrEx*)Unsafe.AsPointer(ref this)</param>, <param name="ptid">ptid</param>, <param name="dwFlags">dwFlags</param>);
        </code>
                </body>
            </function>
            <function name="GetActiveFlags" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lpdwFlags">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITfThreadMgrEx*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(ITfThreadMgrEx*)Unsafe.AsPointer(ref this)</param>, <param name="lpdwFlags">lpdwFlags</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
