<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfcontentdecryptionmodule.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFContentDecryptionModuleAccess" access="public" native="struct IMFContentDecryptionModuleAccess : IUnknown" uuid="a853d1f4-e2a0-4303-9edc-f1a68ee43136" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFContentDecryptionModuleAccess*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFContentDecryptionModuleAccess*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFContentDecryptionModuleAccess*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFContentDecryptionModuleAccess*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFContentDecryptionModuleAccess*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFContentDecryptionModuleAccess*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="CreateContentDecryptionModule" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="contentDecryptionModuleProperties">
                    <type>IPropertyStore*</type>
                </param>
                <param name="contentDecryptionModule">
                    <type>IMFContentDecryptionModule**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFContentDecryptionModuleAccess*, IPropertyStore*, IMFContentDecryptionModule**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFContentDecryptionModuleAccess*)Unsafe.AsPointer(ref this)</param>, <param name="contentDecryptionModuleProperties">contentDecryptionModuleProperties</param>, <param name="contentDecryptionModule">contentDecryptionModule</param>);
        </code>
                </body>
            </function>
            <function name="GetConfiguration" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="configuration">
                    <type>IPropertyStore**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFContentDecryptionModuleAccess*, IPropertyStore**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFContentDecryptionModuleAccess*)Unsafe.AsPointer(ref this)</param>, <param name="configuration">configuration</param>);
        </code>
                </body>
            </function>
            <function name="GetKeySystem" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="keySystem">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFContentDecryptionModuleAccess*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFContentDecryptionModuleAccess*)Unsafe.AsPointer(ref this)</param>, <param name="keySystem">keySystem</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
