<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d2d1_3.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ID2D1CommandSink2" access="public" native="struct ID2D1CommandSink2 : ID2D1CommandSink1" uuid="3bab440e-417e-47df-a2e2-bc0be6a00916" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="BeginDraw" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="EndDraw" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetAntialiasMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="antialiasMode">
                    <type>D2D1_ANTIALIAS_MODE</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, D2D1_ANTIALIAS_MODE, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="antialiasMode">antialiasMode</param>);
        </code>
                </body>
            </function>
            <function name="SetTags" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="tag1">
                    <type>ulong</type>
                </param>
                <param name="tag2">
                    <type>ulong</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, ulong, ulong, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="tag1">tag1</param>, <param name="tag2">tag2</param>);
        </code>
                </body>
            </function>
            <function name="SetTextAntialiasMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="textAntialiasMode">
                    <type>D2D1_TEXT_ANTIALIAS_MODE</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, D2D1_TEXT_ANTIALIAS_MODE, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="textAntialiasMode">textAntialiasMode</param>);
        </code>
                </body>
            </function>
            <function name="SetTextRenderingParams" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="textRenderingParams">
                    <type>IDWriteRenderingParams*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, IDWriteRenderingParams*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="textRenderingParams">textRenderingParams</param>);
        </code>
                </body>
            </function>
            <function name="SetTransform" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="transform">
                    <type>D2D_MATRIX_3X2_F*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, D2D_MATRIX_3X2_F*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="transform">transform</param>);
        </code>
                </body>
            </function>
            <function name="SetPrimitiveBlend" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="primitiveBlend">
                    <type>D2D1_PRIMITIVE_BLEND</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, D2D1_PRIMITIVE_BLEND, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="primitiveBlend">primitiveBlend</param>);
        </code>
                </body>
            </function>
            <function name="SetUnitMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="unitMode">
                    <type>D2D1_UNIT_MODE</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, D2D1_UNIT_MODE, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="unitMode">unitMode</param>);
        </code>
                </body>
            </function>
            <function name="Clear" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="color">
                    <type>DXGI_RGBA*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, DXGI_RGBA*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="color">color</param>);
        </code>
                </body>
            </function>
            <function name="DrawGlyphRun" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="baselineOrigin">
                    <type>D2D_POINT_2F</type>
                </param>
                <param name="glyphRun">
                    <type>DWRITE_GLYPH_RUN*</type>
                </param>
                <param name="glyphRunDescription">
                    <type>DWRITE_GLYPH_RUN_DESCRIPTION*</type>
                </param>
                <param name="foregroundBrush">
                    <type>ID2D1Brush*</type>
                </param>
                <param name="measuringMode">
                    <type>DWRITE_MEASURING_MODE</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, D2D_POINT_2F, DWRITE_GLYPH_RUN*, DWRITE_GLYPH_RUN_DESCRIPTION*, ID2D1Brush*, DWRITE_MEASURING_MODE, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="baselineOrigin">baselineOrigin</param>, <param name="glyphRun">glyphRun</param>, <param name="glyphRunDescription">glyphRunDescription</param>, <param name="foregroundBrush">foregroundBrush</param>, <param name="measuringMode">measuringMode</param>);
        </code>
                </body>
            </function>
            <function name="DrawLine" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="point0">
                    <type>D2D_POINT_2F</type>
                </param>
                <param name="point1">
                    <type>D2D_POINT_2F</type>
                </param>
                <param name="brush">
                    <type>ID2D1Brush*</type>
                </param>
                <param name="strokeWidth">
                    <type>float</type>
                </param>
                <param name="strokeStyle">
                    <type>ID2D1StrokeStyle*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, D2D_POINT_2F, D2D_POINT_2F, ID2D1Brush*, float, ID2D1StrokeStyle*, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="point0">point0</param>, <param name="point1">point1</param>, <param name="brush">brush</param>, <param name="strokeWidth">strokeWidth</param>, <param name="strokeStyle">strokeStyle</param>);
        </code>
                </body>
            </function>
            <function name="DrawGeometry" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="geometry">
                    <type>ID2D1Geometry*</type>
                </param>
                <param name="brush">
                    <type>ID2D1Brush*</type>
                </param>
                <param name="strokeWidth">
                    <type>float</type>
                </param>
                <param name="strokeStyle">
                    <type>ID2D1StrokeStyle*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, ID2D1Geometry*, ID2D1Brush*, float, ID2D1StrokeStyle*, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="geometry">geometry</param>, <param name="brush">brush</param>, <param name="strokeWidth">strokeWidth</param>, <param name="strokeStyle">strokeStyle</param>);
        </code>
                </body>
            </function>
            <function name="DrawRectangle" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="rect">
                    <type>D2D_RECT_F*</type>
                </param>
                <param name="brush">
                    <type>ID2D1Brush*</type>
                </param>
                <param name="strokeWidth">
                    <type>float</type>
                </param>
                <param name="strokeStyle">
                    <type>ID2D1StrokeStyle*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, D2D_RECT_F*, ID2D1Brush*, float, ID2D1StrokeStyle*, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="rect">rect</param>, <param name="brush">brush</param>, <param name="strokeWidth">strokeWidth</param>, <param name="strokeStyle">strokeStyle</param>);
        </code>
                </body>
            </function>
            <function name="DrawBitmap" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="bitmap">
                    <type>ID2D1Bitmap*</type>
                </param>
                <param name="destinationRectangle">
                    <type>D2D_RECT_F*</type>
                </param>
                <param name="opacity">
                    <type>float</type>
                </param>
                <param name="interpolationMode">
                    <type>D2D1_INTERPOLATION_MODE</type>
                </param>
                <param name="sourceRectangle">
                    <type>D2D_RECT_F*</type>
                </param>
                <param name="perspectiveTransform">
                    <type>D2D_MATRIX_4X4_F*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, ID2D1Bitmap*, D2D_RECT_F*, float, D2D1_INTERPOLATION_MODE, D2D_RECT_F*, D2D_MATRIX_4X4_F*, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="bitmap">bitmap</param>, <param name="destinationRectangle">destinationRectangle</param>, <param name="opacity">opacity</param>, <param name="interpolationMode">interpolationMode</param>, <param name="sourceRectangle">sourceRectangle</param>, <param name="perspectiveTransform">perspectiveTransform</param>);
        </code>
                </body>
            </function>
            <function name="DrawImage" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="image">
                    <type>ID2D1Image*</type>
                </param>
                <param name="targetOffset">
                    <type>D2D_POINT_2F*</type>
                </param>
                <param name="imageRectangle">
                    <type>D2D_RECT_F*</type>
                </param>
                <param name="interpolationMode">
                    <type>D2D1_INTERPOLATION_MODE</type>
                </param>
                <param name="compositeMode">
                    <type>D2D1_COMPOSITE_MODE</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, ID2D1Image*, D2D_POINT_2F*, D2D_RECT_F*, D2D1_INTERPOLATION_MODE, D2D1_COMPOSITE_MODE, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="image">image</param>, <param name="targetOffset">targetOffset</param>, <param name="imageRectangle">imageRectangle</param>, <param name="interpolationMode">interpolationMode</param>, <param name="compositeMode">compositeMode</param>);
        </code>
                </body>
            </function>
            <function name="DrawGdiMetafile" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="gdiMetafile">
                    <type>ID2D1GdiMetafile*</type>
                </param>
                <param name="targetOffset">
                    <type>D2D_POINT_2F*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, ID2D1GdiMetafile*, D2D_POINT_2F*, int&gt;)(lpVtbl[<vtbl explicit="False">19</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="gdiMetafile">gdiMetafile</param>, <param name="targetOffset">targetOffset</param>);
        </code>
                </body>
            </function>
            <function name="FillMesh" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="mesh">
                    <type>ID2D1Mesh*</type>
                </param>
                <param name="brush">
                    <type>ID2D1Brush*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, ID2D1Mesh*, ID2D1Brush*, int&gt;)(lpVtbl[<vtbl explicit="False">20</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="mesh">mesh</param>, <param name="brush">brush</param>);
        </code>
                </body>
            </function>
            <function name="FillOpacityMask" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="opacityMask">
                    <type>ID2D1Bitmap*</type>
                </param>
                <param name="brush">
                    <type>ID2D1Brush*</type>
                </param>
                <param name="destinationRectangle">
                    <type>D2D_RECT_F*</type>
                </param>
                <param name="sourceRectangle">
                    <type>D2D_RECT_F*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, ID2D1Bitmap*, ID2D1Brush*, D2D_RECT_F*, D2D_RECT_F*, int&gt;)(lpVtbl[<vtbl explicit="False">21</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="opacityMask">opacityMask</param>, <param name="brush">brush</param>, <param name="destinationRectangle">destinationRectangle</param>, <param name="sourceRectangle">sourceRectangle</param>);
        </code>
                </body>
            </function>
            <function name="FillGeometry" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="geometry">
                    <type>ID2D1Geometry*</type>
                </param>
                <param name="brush">
                    <type>ID2D1Brush*</type>
                </param>
                <param name="opacityBrush">
                    <type>ID2D1Brush*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, ID2D1Geometry*, ID2D1Brush*, ID2D1Brush*, int&gt;)(lpVtbl[<vtbl explicit="False">22</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="geometry">geometry</param>, <param name="brush">brush</param>, <param name="opacityBrush">opacityBrush</param>);
        </code>
                </body>
            </function>
            <function name="FillRectangle" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="rect">
                    <type>D2D_RECT_F*</type>
                </param>
                <param name="brush">
                    <type>ID2D1Brush*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, D2D_RECT_F*, ID2D1Brush*, int&gt;)(lpVtbl[<vtbl explicit="False">23</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="rect">rect</param>, <param name="brush">brush</param>);
        </code>
                </body>
            </function>
            <function name="PushAxisAlignedClip" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="clipRect">
                    <type>D2D_RECT_F*</type>
                </param>
                <param name="antialiasMode">
                    <type>D2D1_ANTIALIAS_MODE</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, D2D_RECT_F*, D2D1_ANTIALIAS_MODE, int&gt;)(lpVtbl[<vtbl explicit="False">24</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="clipRect">clipRect</param>, <param name="antialiasMode">antialiasMode</param>);
        </code>
                </body>
            </function>
            <function name="PushLayer" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="layerParameters1">
                    <type>D2D1_LAYER_PARAMETERS1*</type>
                </param>
                <param name="layer">
                    <type>ID2D1Layer*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, D2D1_LAYER_PARAMETERS1*, ID2D1Layer*, int&gt;)(lpVtbl[<vtbl explicit="False">25</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="layerParameters1">layerParameters1</param>, <param name="layer">layer</param>);
        </code>
                </body>
            </function>
            <function name="PopAxisAlignedClip" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, int&gt;)(lpVtbl[<vtbl explicit="False">26</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="PopLayer" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, int&gt;)(lpVtbl[<vtbl explicit="False">27</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetPrimitiveBlend1" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="primitiveBlend">
                    <type>D2D1_PRIMITIVE_BLEND</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, D2D1_PRIMITIVE_BLEND, int&gt;)(lpVtbl[<vtbl explicit="False">28</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="primitiveBlend">primitiveBlend</param>);
        </code>
                </body>
            </function>
            <function name="DrawInk" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ink">
                    <type>ID2D1Ink*</type>
                </param>
                <param name="brush">
                    <type>ID2D1Brush*</type>
                </param>
                <param name="inkStyle">
                    <type>ID2D1InkStyle*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, ID2D1Ink*, ID2D1Brush*, ID2D1InkStyle*, int&gt;)(lpVtbl[<vtbl explicit="False">29</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="ink">ink</param>, <param name="brush">brush</param>, <param name="inkStyle">inkStyle</param>);
        </code>
                </body>
            </function>
            <function name="DrawGradientMesh" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="gradientMesh">
                    <type>ID2D1GradientMesh*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, ID2D1GradientMesh*, int&gt;)(lpVtbl[<vtbl explicit="False">30</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="gradientMesh">gradientMesh</param>);
        </code>
                </body>
            </function>
            <function name="DrawGdiMetafile" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="gdiMetafile">
                    <type>ID2D1GdiMetafile*</type>
                </param>
                <param name="destinationRectangle">
                    <type>D2D_RECT_F*</type>
                </param>
                <param name="sourceRectangle">
                    <type>D2D_RECT_F*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1CommandSink2*, ID2D1GdiMetafile*, D2D_RECT_F*, D2D_RECT_F*, int&gt;)(lpVtbl[<vtbl explicit="False">31</vtbl>]))(<param special="thisPtr">(ID2D1CommandSink2*)Unsafe.AsPointer(ref this)</param>, <param name="gdiMetafile">gdiMetafile</param>, <param name="destinationRectangle">destinationRectangle</param>, <param name="sourceRectangle">sourceRectangle</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
