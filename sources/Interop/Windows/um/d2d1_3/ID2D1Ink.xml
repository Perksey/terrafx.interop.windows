<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d2d1_3.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ID2D1Ink" access="public" native="struct ID2D1Ink : ID2D1Resource" uuid="b499923b-7029-478f-a8b3-432c7c5f5312" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="StreamAsGeometry" access="public">
                <type native="HRESULT">int</type>
                <param name="inkStyle">
                    <type>ID2D1InkStyle*</type>
                </param>
                <param name="worldTransform">
                    <type>D2D_MATRIX_3X2_F*</type>
                </param>
                <param name="geometrySink">
                    <type>ID2D1SimplifiedGeometrySink*</type>
                </param>
                <code>return StreamAsGeometry(inkStyle, worldTransform, (0.25f), geometrySink);
        </code>
            </function>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Ink*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ID2D1Ink*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Ink*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ID2D1Ink*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Ink*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ID2D1Ink*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetFactory" access="public" unsafe="true">
                <type>void</type>
                <param name="factory">
                    <type>ID2D1Factory**</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1Ink*, ID2D1Factory**, void&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ID2D1Ink*)Unsafe.AsPointer(ref this)</param>, <param name="factory">factory</param>);
        </code>
                </body>
            </function>
            <function name="SetStartPoint" access="public" unsafe="true">
                <type>void</type>
                <param name="startPoint">
                    <type>D2D1_INK_POINT*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1Ink*, D2D1_INK_POINT*, void&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ID2D1Ink*)Unsafe.AsPointer(ref this)</param>, <param name="startPoint">startPoint</param>);
        </code>
                </body>
            </function>
            <function name="GetStartPoint" access="public" unsafe="true">
                <type>D2D1_INK_POINT</type>
                <body>
                    <code>
                        <fixup type="*result">D2D1_INK_POINT</fixup> result;
        return *((delegate* unmanaged&lt;ID2D1Ink*, D2D1_INK_POINT*, D2D1_INK_POINT*&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ID2D1Ink*)Unsafe.AsPointer(ref this)</param><param special="retFixup">, &amp;result</param>);
        </code>
                </body>
            </function>
            <function name="AddSegments" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="segments">
                    <type>D2D1_INK_BEZIER_SEGMENT*</type>
                </param>
                <param name="segmentsCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Ink*, D2D1_INK_BEZIER_SEGMENT*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ID2D1Ink*)Unsafe.AsPointer(ref this)</param>, <param name="segments">segments</param>, <param name="segmentsCount">segmentsCount</param>);
        </code>
                </body>
            </function>
            <function name="RemoveSegmentsAtEnd" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="segmentsCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Ink*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ID2D1Ink*)Unsafe.AsPointer(ref this)</param>, <param name="segmentsCount">segmentsCount</param>);
        </code>
                </body>
            </function>
            <function name="SetSegments" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="startSegment">
                    <type>uint</type>
                </param>
                <param name="segments">
                    <type>D2D1_INK_BEZIER_SEGMENT*</type>
                </param>
                <param name="segmentsCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Ink*, uint, D2D1_INK_BEZIER_SEGMENT*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ID2D1Ink*)Unsafe.AsPointer(ref this)</param>, <param name="startSegment">startSegment</param>, <param name="segments">segments</param>, <param name="segmentsCount">segmentsCount</param>);
        </code>
                </body>
            </function>
            <function name="SetSegmentAtEnd" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="segment">
                    <type>D2D1_INK_BEZIER_SEGMENT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Ink*, D2D1_INK_BEZIER_SEGMENT*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ID2D1Ink*)Unsafe.AsPointer(ref this)</param>, <param name="segment">segment</param>);
        </code>
                </body>
            </function>
            <function name="GetSegmentCount" access="public" unsafe="true">
                <type native="UINT32">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Ink*, uint&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ID2D1Ink*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetSegments" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="startSegment">
                    <type>uint</type>
                </param>
                <param name="segments">
                    <type>D2D1_INK_BEZIER_SEGMENT*</type>
                </param>
                <param name="segmentsCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Ink*, uint, D2D1_INK_BEZIER_SEGMENT*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ID2D1Ink*)Unsafe.AsPointer(ref this)</param>, <param name="startSegment">startSegment</param>, <param name="segments">segments</param>, <param name="segmentsCount">segmentsCount</param>);
        </code>
                </body>
            </function>
            <function name="StreamAsGeometry" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="inkStyle">
                    <type>ID2D1InkStyle*</type>
                </param>
                <param name="worldTransform">
                    <type>D2D_MATRIX_3X2_F*</type>
                </param>
                <param name="flatteningTolerance">
                    <type>float</type>
                </param>
                <param name="geometrySink">
                    <type>ID2D1SimplifiedGeometrySink*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Ink*, ID2D1InkStyle*, D2D_MATRIX_3X2_F*, float, ID2D1SimplifiedGeometrySink*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ID2D1Ink*)Unsafe.AsPointer(ref this)</param>, <param name="inkStyle">inkStyle</param>, <param name="worldTransform">worldTransform</param>, <param name="flatteningTolerance">flatteningTolerance</param>, <param name="geometrySink">geometrySink</param>);
        </code>
                </body>
            </function>
            <function name="GetBounds" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="inkStyle">
                    <type>ID2D1InkStyle*</type>
                </param>
                <param name="worldTransform">
                    <type>D2D_MATRIX_3X2_F*</type>
                </param>
                <param name="bounds">
                    <type>D2D_RECT_F*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Ink*, ID2D1InkStyle*, D2D_MATRIX_3X2_F*, D2D_RECT_F*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(ID2D1Ink*)Unsafe.AsPointer(ref this)</param>, <param name="inkStyle">inkStyle</param>, <param name="worldTransform">worldTransform</param>, <param name="bounds">bounds</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
