<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dcomp.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDCompositionLinearTransferEffect" access="public" native="struct IDCompositionLinearTransferEffect : IDCompositionFilterEffect" uuid="4305ee5b-c4a0-4c88-9385-67124e017683" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetInput" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="index">
                    <type>uint</type>
                </param>
                <param name="input">
                    <type>IUnknown*</type>
                </param>
                <param name="flags">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, uint, IUnknown*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>, <param name="input">input</param>, <param name="flags">flags</param>);
        </code>
                </body>
            </function>
            <function name="SetRedYIntercept" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="redYIntercept">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, float, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="redYIntercept">redYIntercept</param>);
        </code>
                </body>
            </function>
            <function name="SetRedYIntercept" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="animation">
                    <type>IDCompositionAnimation*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, IDCompositionAnimation*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="animation">animation</param>);
        </code>
                </body>
            </function>
            <function name="SetRedSlope" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="redSlope">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, float, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="redSlope">redSlope</param>);
        </code>
                </body>
            </function>
            <function name="SetRedSlope" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="animation">
                    <type>IDCompositionAnimation*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, IDCompositionAnimation*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="animation">animation</param>);
        </code>
                </body>
            </function>
            <function name="SetRedDisable" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="redDisable">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, int, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="redDisable">redDisable</param>);
        </code>
                </body>
            </function>
            <function name="SetGreenYIntercept" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="greenYIntercept">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, float, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="greenYIntercept">greenYIntercept</param>);
        </code>
                </body>
            </function>
            <function name="SetGreenYIntercept" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="animation">
                    <type>IDCompositionAnimation*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, IDCompositionAnimation*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="animation">animation</param>);
        </code>
                </body>
            </function>
            <function name="SetGreenSlope" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="greenSlope">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, float, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="greenSlope">greenSlope</param>);
        </code>
                </body>
            </function>
            <function name="SetGreenSlope" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="animation">
                    <type>IDCompositionAnimation*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, IDCompositionAnimation*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="animation">animation</param>);
        </code>
                </body>
            </function>
            <function name="SetGreenDisable" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="greenDisable">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, int, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="greenDisable">greenDisable</param>);
        </code>
                </body>
            </function>
            <function name="SetBlueYIntercept" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="blueYIntercept">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, float, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="blueYIntercept">blueYIntercept</param>);
        </code>
                </body>
            </function>
            <function name="SetBlueYIntercept" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="animation">
                    <type>IDCompositionAnimation*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, IDCompositionAnimation*, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="animation">animation</param>);
        </code>
                </body>
            </function>
            <function name="SetBlueSlope" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="blueSlope">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, float, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="blueSlope">blueSlope</param>);
        </code>
                </body>
            </function>
            <function name="SetBlueSlope" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="animation">
                    <type>IDCompositionAnimation*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, IDCompositionAnimation*, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="animation">animation</param>);
        </code>
                </body>
            </function>
            <function name="SetBlueDisable" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="blueDisable">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, int, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="blueDisable">blueDisable</param>);
        </code>
                </body>
            </function>
            <function name="SetAlphaYIntercept" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="alphaYIntercept">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, float, int&gt;)(lpVtbl[<vtbl explicit="False">19</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="alphaYIntercept">alphaYIntercept</param>);
        </code>
                </body>
            </function>
            <function name="SetAlphaYIntercept" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="animation">
                    <type>IDCompositionAnimation*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, IDCompositionAnimation*, int&gt;)(lpVtbl[<vtbl explicit="False">20</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="animation">animation</param>);
        </code>
                </body>
            </function>
            <function name="SetAlphaSlope" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="alphaSlope">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, float, int&gt;)(lpVtbl[<vtbl explicit="False">21</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="alphaSlope">alphaSlope</param>);
        </code>
                </body>
            </function>
            <function name="SetAlphaSlope" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="animation">
                    <type>IDCompositionAnimation*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, IDCompositionAnimation*, int&gt;)(lpVtbl[<vtbl explicit="False">22</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="animation">animation</param>);
        </code>
                </body>
            </function>
            <function name="SetAlphaDisable" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="alphaDisable">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, int, int&gt;)(lpVtbl[<vtbl explicit="False">23</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="alphaDisable">alphaDisable</param>);
        </code>
                </body>
            </function>
            <function name="SetClampOutput" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="clampOutput">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionLinearTransferEffect*, int, int&gt;)(lpVtbl[<vtbl explicit="False">24</vtbl>]))(<param special="thisPtr">(IDCompositionLinearTransferEffect*)Unsafe.AsPointer(ref this)</param>, <param name="clampOutput">clampOutput</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
