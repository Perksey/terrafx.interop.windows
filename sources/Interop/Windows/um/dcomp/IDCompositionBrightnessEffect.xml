<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dcomp.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDCompositionBrightnessEffect" access="public" native="struct IDCompositionBrightnessEffect : IDCompositionFilterEffect" uuid="6027496e-cb3a-49ab-934f-d798da4f7da6" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionBrightnessEffect*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDCompositionBrightnessEffect*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionBrightnessEffect*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDCompositionBrightnessEffect*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionBrightnessEffect*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDCompositionBrightnessEffect*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetInput" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="index">
                    <type>uint</type>
                </param>
                <param name="input">
                    <type>IUnknown*</type>
                </param>
                <param name="flags">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionBrightnessEffect*, uint, IUnknown*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDCompositionBrightnessEffect*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>, <param name="input">input</param>, <param name="flags">flags</param>);
        </code>
                </body>
            </function>
            <function name="SetWhitePoint" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="whitePoint">
                    <type>D2D_VECTOR_2F*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionBrightnessEffect*, D2D_VECTOR_2F*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDCompositionBrightnessEffect*)Unsafe.AsPointer(ref this)</param>, <param name="whitePoint">whitePoint</param>);
        </code>
                </body>
            </function>
            <function name="SetBlackPoint" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="blackPoint">
                    <type>D2D_VECTOR_2F*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionBrightnessEffect*, D2D_VECTOR_2F*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDCompositionBrightnessEffect*)Unsafe.AsPointer(ref this)</param>, <param name="blackPoint">blackPoint</param>);
        </code>
                </body>
            </function>
            <function name="SetWhitePointX" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="whitePointX">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionBrightnessEffect*, float, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDCompositionBrightnessEffect*)Unsafe.AsPointer(ref this)</param>, <param name="whitePointX">whitePointX</param>);
        </code>
                </body>
            </function>
            <function name="SetWhitePointX" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="animation">
                    <type>IDCompositionAnimation*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionBrightnessEffect*, IDCompositionAnimation*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDCompositionBrightnessEffect*)Unsafe.AsPointer(ref this)</param>, <param name="animation">animation</param>);
        </code>
                </body>
            </function>
            <function name="SetWhitePointY" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="whitePointY">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionBrightnessEffect*, float, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDCompositionBrightnessEffect*)Unsafe.AsPointer(ref this)</param>, <param name="whitePointY">whitePointY</param>);
        </code>
                </body>
            </function>
            <function name="SetWhitePointY" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="animation">
                    <type>IDCompositionAnimation*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionBrightnessEffect*, IDCompositionAnimation*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IDCompositionBrightnessEffect*)Unsafe.AsPointer(ref this)</param>, <param name="animation">animation</param>);
        </code>
                </body>
            </function>
            <function name="SetBlackPointX" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="blackPointX">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionBrightnessEffect*, float, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IDCompositionBrightnessEffect*)Unsafe.AsPointer(ref this)</param>, <param name="blackPointX">blackPointX</param>);
        </code>
                </body>
            </function>
            <function name="SetBlackPointX" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="animation">
                    <type>IDCompositionAnimation*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionBrightnessEffect*, IDCompositionAnimation*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IDCompositionBrightnessEffect*)Unsafe.AsPointer(ref this)</param>, <param name="animation">animation</param>);
        </code>
                </body>
            </function>
            <function name="SetBlackPointY" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="blackPointY">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionBrightnessEffect*, float, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IDCompositionBrightnessEffect*)Unsafe.AsPointer(ref this)</param>, <param name="blackPointY">blackPointY</param>);
        </code>
                </body>
            </function>
            <function name="SetBlackPointY" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="animation">
                    <type>IDCompositionAnimation*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionBrightnessEffect*, IDCompositionAnimation*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IDCompositionBrightnessEffect*)Unsafe.AsPointer(ref this)</param>, <param name="animation">animation</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
