<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dcomp.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDCompositionTurbulenceEffect" access="public" native="struct IDCompositionTurbulenceEffect : IDCompositionFilterEffect" uuid="a6a55bda-c09c-49f3-9193-a41922c89715" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionTurbulenceEffect*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDCompositionTurbulenceEffect*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionTurbulenceEffect*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDCompositionTurbulenceEffect*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionTurbulenceEffect*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDCompositionTurbulenceEffect*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetInput" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="index">
                    <type>uint</type>
                </param>
                <param name="input">
                    <type>IUnknown*</type>
                </param>
                <param name="flags">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionTurbulenceEffect*, uint, IUnknown*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDCompositionTurbulenceEffect*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>, <param name="input">input</param>, <param name="flags">flags</param>);
        </code>
                </body>
            </function>
            <function name="SetOffset" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="offset">
                    <type>D2D_VECTOR_2F*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionTurbulenceEffect*, D2D_VECTOR_2F*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDCompositionTurbulenceEffect*)Unsafe.AsPointer(ref this)</param>, <param name="offset">offset</param>);
        </code>
                </body>
            </function>
            <function name="SetBaseFrequency" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="frequency">
                    <type>D2D_VECTOR_2F*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionTurbulenceEffect*, D2D_VECTOR_2F*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDCompositionTurbulenceEffect*)Unsafe.AsPointer(ref this)</param>, <param name="frequency">frequency</param>);
        </code>
                </body>
            </function>
            <function name="SetSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="size">
                    <type>D2D_VECTOR_2F*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionTurbulenceEffect*, D2D_VECTOR_2F*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDCompositionTurbulenceEffect*)Unsafe.AsPointer(ref this)</param>, <param name="size">size</param>);
        </code>
                </body>
            </function>
            <function name="SetNumOctaves" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="numOctaves">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionTurbulenceEffect*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDCompositionTurbulenceEffect*)Unsafe.AsPointer(ref this)</param>, <param name="numOctaves">numOctaves</param>);
        </code>
                </body>
            </function>
            <function name="SetSeed" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="seed">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionTurbulenceEffect*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDCompositionTurbulenceEffect*)Unsafe.AsPointer(ref this)</param>, <param name="seed">seed</param>);
        </code>
                </body>
            </function>
            <function name="SetNoise" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="noise">
                    <type>D2D1_TURBULENCE_NOISE</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionTurbulenceEffect*, D2D1_TURBULENCE_NOISE, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IDCompositionTurbulenceEffect*)Unsafe.AsPointer(ref this)</param>, <param name="noise">noise</param>);
        </code>
                </body>
            </function>
            <function name="SetStitchable" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="stitchable">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionTurbulenceEffect*, int, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IDCompositionTurbulenceEffect*)Unsafe.AsPointer(ref this)</param>, <param name="stitchable">stitchable</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
