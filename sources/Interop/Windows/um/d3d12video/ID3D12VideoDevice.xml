<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d3d12video.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ID3D12VideoDevice" access="public" native="struct ID3D12VideoDevice : IUnknown" uuid="1f052807-0b46-4acc-8a89-364f793718a4" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12VideoDevice*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ID3D12VideoDevice*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12VideoDevice*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ID3D12VideoDevice*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12VideoDevice*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ID3D12VideoDevice*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="CheckFeatureSupport" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="FeatureVideo">
                    <type>D3D12_FEATURE_VIDEO</type>
                </param>
                <param name="pFeatureSupportData">
                    <type>void*</type>
                </param>
                <param name="FeatureSupportDataSize">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12VideoDevice*, D3D12_FEATURE_VIDEO, void*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ID3D12VideoDevice*)Unsafe.AsPointer(ref this)</param>, <param name="FeatureVideo">FeatureVideo</param>, <param name="pFeatureSupportData">pFeatureSupportData</param>, <param name="FeatureSupportDataSize">FeatureSupportDataSize</param>);
        </code>
                </body>
            </function>
            <function name="CreateVideoDecoder" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDesc">
                    <type>D3D12_VIDEO_DECODER_DESC*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppVideoDecoder">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12VideoDevice*, D3D12_VIDEO_DECODER_DESC*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ID3D12VideoDevice*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>, <param name="riid">riid</param>, <param name="ppVideoDecoder">ppVideoDecoder</param>);
        </code>
                </body>
            </function>
            <function name="CreateVideoDecoderHeap" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pVideoDecoderHeapDesc">
                    <type>D3D12_VIDEO_DECODER_HEAP_DESC*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppVideoDecoderHeap">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12VideoDevice*, D3D12_VIDEO_DECODER_HEAP_DESC*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ID3D12VideoDevice*)Unsafe.AsPointer(ref this)</param>, <param name="pVideoDecoderHeapDesc">pVideoDecoderHeapDesc</param>, <param name="riid">riid</param>, <param name="ppVideoDecoderHeap">ppVideoDecoderHeap</param>);
        </code>
                </body>
            </function>
            <function name="CreateVideoProcessor" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="NodeMask">
                    <type>uint</type>
                </param>
                <param name="pOutputStreamDesc">
                    <type>D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*</type>
                </param>
                <param name="NumInputStreamDescs">
                    <type>uint</type>
                </param>
                <param name="pInputStreamDescs">
                    <type>D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppVideoProcessor">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12VideoDevice*, uint, D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC*, uint, D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ID3D12VideoDevice*)Unsafe.AsPointer(ref this)</param>, <param name="NodeMask">NodeMask</param>, <param name="pOutputStreamDesc">pOutputStreamDesc</param>, <param name="NumInputStreamDescs">NumInputStreamDescs</param>, <param name="pInputStreamDescs">pInputStreamDescs</param>, <param name="riid">riid</param>, <param name="ppVideoProcessor">ppVideoProcessor</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
