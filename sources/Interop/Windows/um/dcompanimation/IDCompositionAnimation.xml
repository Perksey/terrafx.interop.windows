<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dcompanimation.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDCompositionAnimation" access="public" native="struct IDCompositionAnimation : IUnknown" uuid="cbfd91d9-51b2-45e4-b3de-d19ccfb863c5" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionAnimation*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDCompositionAnimation*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionAnimation*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDCompositionAnimation*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionAnimation*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDCompositionAnimation*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Reset" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionAnimation*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDCompositionAnimation*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetAbsoluteBeginTime" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="beginTime">
                    <type>LARGE_INTEGER</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionAnimation*, LARGE_INTEGER, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDCompositionAnimation*)Unsafe.AsPointer(ref this)</param>, <param name="beginTime">beginTime</param>);
        </code>
                </body>
            </function>
            <function name="AddCubic" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="beginOffset">
                    <type>double</type>
                </param>
                <param name="constantCoefficient">
                    <type>float</type>
                </param>
                <param name="linearCoefficient">
                    <type>float</type>
                </param>
                <param name="quadraticCoefficient">
                    <type>float</type>
                </param>
                <param name="cubicCoefficient">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionAnimation*, double, float, float, float, float, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDCompositionAnimation*)Unsafe.AsPointer(ref this)</param>, <param name="beginOffset">beginOffset</param>, <param name="constantCoefficient">constantCoefficient</param>, <param name="linearCoefficient">linearCoefficient</param>, <param name="quadraticCoefficient">quadraticCoefficient</param>, <param name="cubicCoefficient">cubicCoefficient</param>);
        </code>
                </body>
            </function>
            <function name="AddSinusoidal" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="beginOffset">
                    <type>double</type>
                </param>
                <param name="bias">
                    <type>float</type>
                </param>
                <param name="amplitude">
                    <type>float</type>
                </param>
                <param name="frequency">
                    <type>float</type>
                </param>
                <param name="phase">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionAnimation*, double, float, float, float, float, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDCompositionAnimation*)Unsafe.AsPointer(ref this)</param>, <param name="beginOffset">beginOffset</param>, <param name="bias">bias</param>, <param name="amplitude">amplitude</param>, <param name="frequency">frequency</param>, <param name="phase">phase</param>);
        </code>
                </body>
            </function>
            <function name="AddRepeat" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="beginOffset">
                    <type>double</type>
                </param>
                <param name="durationToRepeat">
                    <type>double</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionAnimation*, double, double, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDCompositionAnimation*)Unsafe.AsPointer(ref this)</param>, <param name="beginOffset">beginOffset</param>, <param name="durationToRepeat">durationToRepeat</param>);
        </code>
                </body>
            </function>
            <function name="End" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="endOffset">
                    <type>double</type>
                </param>
                <param name="endValue">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDCompositionAnimation*, double, float, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDCompositionAnimation*)Unsafe.AsPointer(ref this)</param>, <param name="endOffset">endOffset</param>, <param name="endValue">endValue</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
