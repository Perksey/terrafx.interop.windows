<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/xamlOM.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IXamlDiagnostics" access="public" native="struct IXamlDiagnostics : IUnknown" uuid="18c9e2b6-3f43-4116-9f2b-ff935d7770d2" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IXamlDiagnostics*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IXamlDiagnostics*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IXamlDiagnostics*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IXamlDiagnostics*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IXamlDiagnostics*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IXamlDiagnostics*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetDispatcher" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppDispatcher">
                    <type>IInspectable**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IXamlDiagnostics*, IInspectable**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IXamlDiagnostics*)Unsafe.AsPointer(ref this)</param>, <param name="ppDispatcher">ppDispatcher</param>);
        </code>
                </body>
            </function>
            <function name="GetUiLayer" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppLayer">
                    <type>IInspectable**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IXamlDiagnostics*, IInspectable**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IXamlDiagnostics*)Unsafe.AsPointer(ref this)</param>, <param name="ppLayer">ppLayer</param>);
        </code>
                </body>
            </function>
            <function name="GetApplication" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppApplication">
                    <type>IInspectable**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IXamlDiagnostics*, IInspectable**, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IXamlDiagnostics*)Unsafe.AsPointer(ref this)</param>, <param name="ppApplication">ppApplication</param>);
        </code>
                </body>
            </function>
            <function name="GetIInspectableFromHandle" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="instanceHandle">
                    <type>ulong</type>
                </param>
                <param name="ppInstance">
                    <type>IInspectable**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IXamlDiagnostics*, ulong, IInspectable**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IXamlDiagnostics*)Unsafe.AsPointer(ref this)</param>, <param name="instanceHandle">instanceHandle</param>, <param name="ppInstance">ppInstance</param>);
        </code>
                </body>
            </function>
            <function name="GetHandleFromIInspectable" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pInstance">
                    <type>IInspectable*</type>
                </param>
                <param name="pHandle">
                    <type>ulong*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IXamlDiagnostics*, IInspectable*, ulong*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IXamlDiagnostics*)Unsafe.AsPointer(ref this)</param>, <param name="pInstance">pInstance</param>, <param name="pHandle">pHandle</param>);
        </code>
                </body>
            </function>
            <function name="HitTest" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="rect">
                    <type>RECT</type>
                </param>
                <param name="pCount">
                    <type>uint*</type>
                </param>
                <param name="ppInstanceHandles">
                    <type>ulong**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IXamlDiagnostics*, RECT, uint*, ulong**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IXamlDiagnostics*)Unsafe.AsPointer(ref this)</param>, <param name="rect">rect</param>, <param name="pCount">pCount</param>, <param name="ppInstanceHandles">ppInstanceHandles</param>);
        </code>
                </body>
            </function>
            <function name="RegisterInstance" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pInstance">
                    <type>IInspectable*</type>
                </param>
                <param name="pInstanceHandle">
                    <type>ulong*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IXamlDiagnostics*, IInspectable*, ulong*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IXamlDiagnostics*)Unsafe.AsPointer(ref this)</param>, <param name="pInstance">pInstance</param>, <param name="pInstanceHandle">pInstanceHandle</param>);
        </code>
                </body>
            </function>
            <function name="GetInitializationData" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pInitializationData">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IXamlDiagnostics*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IXamlDiagnostics*)Unsafe.AsPointer(ref this)</param>, <param name="pInitializationData">pInitializationData</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
