<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfreadwrite.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFSinkWriterEx" access="public" native="struct IMFSinkWriterEx : IMFSinkWriter" uuid="588d72ab-5bc1-496a-8714-b70617141b25" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSinkWriterEx*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFSinkWriterEx*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSinkWriterEx*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFSinkWriterEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSinkWriterEx*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFSinkWriterEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="AddStream" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pTargetMediaType">
                    <type>IMFMediaType*</type>
                </param>
                <param name="pdwStreamIndex">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSinkWriterEx*, IMFMediaType*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFSinkWriterEx*)Unsafe.AsPointer(ref this)</param>, <param name="pTargetMediaType">pTargetMediaType</param>, <param name="pdwStreamIndex">pdwStreamIndex</param>);
        </code>
                </body>
            </function>
            <function name="SetInputMediaType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwStreamIndex">
                    <type>uint</type>
                </param>
                <param name="pInputMediaType">
                    <type>IMFMediaType*</type>
                </param>
                <param name="pEncodingParameters">
                    <type>IMFAttributes*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSinkWriterEx*, uint, IMFMediaType*, IMFAttributes*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFSinkWriterEx*)Unsafe.AsPointer(ref this)</param>, <param name="dwStreamIndex">dwStreamIndex</param>, <param name="pInputMediaType">pInputMediaType</param>, <param name="pEncodingParameters">pEncodingParameters</param>);
        </code>
                </body>
            </function>
            <function name="BeginWriting" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSinkWriterEx*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFSinkWriterEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="WriteSample" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwStreamIndex">
                    <type>uint</type>
                </param>
                <param name="pSample">
                    <type>IMFSample*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSinkWriterEx*, uint, IMFSample*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFSinkWriterEx*)Unsafe.AsPointer(ref this)</param>, <param name="dwStreamIndex">dwStreamIndex</param>, <param name="pSample">pSample</param>);
        </code>
                </body>
            </function>
            <function name="SendStreamTick" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwStreamIndex">
                    <type>uint</type>
                </param>
                <param name="llTimestamp">
                    <type>long</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSinkWriterEx*, uint, long, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFSinkWriterEx*)Unsafe.AsPointer(ref this)</param>, <param name="dwStreamIndex">dwStreamIndex</param>, <param name="llTimestamp">llTimestamp</param>);
        </code>
                </body>
            </function>
            <function name="PlaceMarker" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwStreamIndex">
                    <type>uint</type>
                </param>
                <param name="pvContext">
                    <type>void*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSinkWriterEx*, uint, void*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IMFSinkWriterEx*)Unsafe.AsPointer(ref this)</param>, <param name="dwStreamIndex">dwStreamIndex</param>, <param name="pvContext">pvContext</param>);
        </code>
                </body>
            </function>
            <function name="NotifyEndOfSegment" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwStreamIndex">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSinkWriterEx*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IMFSinkWriterEx*)Unsafe.AsPointer(ref this)</param>, <param name="dwStreamIndex">dwStreamIndex</param>);
        </code>
                </body>
            </function>
            <function name="Flush" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwStreamIndex">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSinkWriterEx*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IMFSinkWriterEx*)Unsafe.AsPointer(ref this)</param>, <param name="dwStreamIndex">dwStreamIndex</param>);
        </code>
                </body>
            </function>
            <function name="Finalize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSinkWriterEx*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IMFSinkWriterEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetServiceForStream" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwStreamIndex">
                    <type>uint</type>
                </param>
                <param name="guidService">
                    <type>Guid*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSinkWriterEx*, uint, Guid*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IMFSinkWriterEx*)Unsafe.AsPointer(ref this)</param>, <param name="dwStreamIndex">dwStreamIndex</param>, <param name="guidService">guidService</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="GetStatistics" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwStreamIndex">
                    <type>uint</type>
                </param>
                <param name="pStats">
                    <type>MF_SINK_WRITER_STATISTICS*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSinkWriterEx*, uint, MF_SINK_WRITER_STATISTICS*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IMFSinkWriterEx*)Unsafe.AsPointer(ref this)</param>, <param name="dwStreamIndex">dwStreamIndex</param>, <param name="pStats">pStats</param>);
        </code>
                </body>
            </function>
            <function name="GetTransformForStream" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwStreamIndex">
                    <type>uint</type>
                </param>
                <param name="dwTransformIndex">
                    <type>uint</type>
                </param>
                <param name="pGuidCategory">
                    <type>Guid*</type>
                </param>
                <param name="ppTransform">
                    <type>IMFTransform**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFSinkWriterEx*, uint, uint, Guid*, IMFTransform**, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IMFSinkWriterEx*)Unsafe.AsPointer(ref this)</param>, <param name="dwStreamIndex">dwStreamIndex</param>, <param name="dwTransformIndex">dwTransformIndex</param>, <param name="pGuidCategory">pGuidCategory</param>, <param name="ppTransform">ppTransform</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
