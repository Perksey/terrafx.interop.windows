<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/wincodec.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IWICColorContext" access="public" native="struct IWICColorContext : IUnknown" uuid="3c613a02-34b2-44ea-9a7c-45aea9c6fd6d" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IWICColorContext*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IWICColorContext*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IWICColorContext*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IWICColorContext*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IWICColorContext*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IWICColorContext*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="InitializeFromFilename" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="wzFilename">
                    <type>ushort*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IWICColorContext*, ushort*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IWICColorContext*)Unsafe.AsPointer(ref this)</param>, <param name="wzFilename">wzFilename</param>);
        </code>
                </body>
            </function>
            <function name="InitializeFromMemory" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pbBuffer">
                    <type>byte*</type>
                </param>
                <param name="cbBufferSize">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IWICColorContext*, byte*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IWICColorContext*)Unsafe.AsPointer(ref this)</param>, <param name="pbBuffer">pbBuffer</param>, <param name="cbBufferSize">cbBufferSize</param>);
        </code>
                </body>
            </function>
            <function name="InitializeFromExifColorSpace" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="value">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IWICColorContext*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IWICColorContext*)Unsafe.AsPointer(ref this)</param>, <param name="value">value</param>);
        </code>
                </body>
            </function>
            <function name="GetType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pType">
                    <type>WICColorContextType*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IWICColorContext*, WICColorContextType*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IWICColorContext*)Unsafe.AsPointer(ref this)</param>, <param name="pType">pType</param>);
        </code>
                </body>
            </function>
            <function name="GetProfileBytes" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="cbBuffer">
                    <type>uint</type>
                </param>
                <param name="pbBuffer">
                    <type>byte*</type>
                </param>
                <param name="pcbActual">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IWICColorContext*, uint, byte*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IWICColorContext*)Unsafe.AsPointer(ref this)</param>, <param name="cbBuffer">cbBuffer</param>, <param name="pbBuffer">pbBuffer</param>, <param name="pcbActual">pcbActual</param>);
        </code>
                </body>
            </function>
            <function name="GetExifColorSpace" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pValue">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IWICColorContext*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IWICColorContext*)Unsafe.AsPointer(ref this)</param>, <param name="pValue">pValue</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
