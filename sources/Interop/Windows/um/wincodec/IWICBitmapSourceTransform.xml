<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/wincodec.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IWICBitmapSourceTransform" access="public" native="struct IWICBitmapSourceTransform : IUnknown" uuid="3b16811b-6a43-4ec9-b713-3d5a0c13b940" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IWICBitmapSourceTransform*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IWICBitmapSourceTransform*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IWICBitmapSourceTransform*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IWICBitmapSourceTransform*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IWICBitmapSourceTransform*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IWICBitmapSourceTransform*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="CopyPixels" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="prc">
                    <type>WICRect*</type>
                </param>
                <param name="uiWidth">
                    <type>uint</type>
                </param>
                <param name="uiHeight">
                    <type>uint</type>
                </param>
                <param name="pguidDstFormat">
                    <type>Guid*</type>
                </param>
                <param name="dstTransform">
                    <type>WICBitmapTransformOptions</type>
                </param>
                <param name="nStride">
                    <type>uint</type>
                </param>
                <param name="cbBufferSize">
                    <type>uint</type>
                </param>
                <param name="pbBuffer">
                    <type>byte*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IWICBitmapSourceTransform*, WICRect*, uint, uint, Guid*, WICBitmapTransformOptions, uint, uint, byte*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IWICBitmapSourceTransform*)Unsafe.AsPointer(ref this)</param>, <param name="prc">prc</param>, <param name="uiWidth">uiWidth</param>, <param name="uiHeight">uiHeight</param>, <param name="pguidDstFormat">pguidDstFormat</param>, <param name="dstTransform">dstTransform</param>, <param name="nStride">nStride</param>, <param name="cbBufferSize">cbBufferSize</param>, <param name="pbBuffer">pbBuffer</param>);
        </code>
                </body>
            </function>
            <function name="GetClosestSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="puiWidth">
                    <type>uint*</type>
                </param>
                <param name="puiHeight">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IWICBitmapSourceTransform*, uint*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IWICBitmapSourceTransform*)Unsafe.AsPointer(ref this)</param>, <param name="puiWidth">puiWidth</param>, <param name="puiHeight">puiHeight</param>);
        </code>
                </body>
            </function>
            <function name="GetClosestPixelFormat" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pguidDstFormat">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IWICBitmapSourceTransform*, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IWICBitmapSourceTransform*)Unsafe.AsPointer(ref this)</param>, <param name="pguidDstFormat">pguidDstFormat</param>);
        </code>
                </body>
            </function>
            <function name="DoesSupportTransform" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dstTransform">
                    <type>WICBitmapTransformOptions</type>
                </param>
                <param name="pfIsSupported">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IWICBitmapSourceTransform*, WICBitmapTransformOptions, int*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IWICBitmapSourceTransform*)Unsafe.AsPointer(ref this)</param>, <param name="dstTransform">dstTransform</param>, <param name="pfIsSupported">pfIsSupported</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
