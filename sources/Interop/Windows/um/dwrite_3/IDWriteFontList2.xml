<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dwrite_3.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDWriteFontList2" access="public" native="struct IDWriteFontList2 : IDWriteFontList1" uuid="c0763a34-77af-445a-b735-08c37b0a5bf5" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontList2*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDWriteFontList2*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontList2*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDWriteFontList2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontList2*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDWriteFontList2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetFontCollection" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontCollection">
                    <type>IDWriteFontCollection**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontList2*, IDWriteFontCollection**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDWriteFontList2*)Unsafe.AsPointer(ref this)</param>, <param name="fontCollection">fontCollection</param>);
        </code>
                </body>
            </function>
            <function name="GetFontCount" access="public" unsafe="true">
                <type native="UINT32">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontList2*, uint&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDWriteFontList2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetFont" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="index">
                    <type>uint</type>
                </param>
                <param name="font">
                    <type>IDWriteFont**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontList2*, uint, IDWriteFont**, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDWriteFontList2*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>, <param name="font">font</param>);
        </code>
                </body>
            </function>
            <function name="GetFontLocality" access="public" unsafe="true">
                <type>DWRITE_LOCALITY</type>
                <param name="listIndex">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontList2*, uint, DWRITE_LOCALITY&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDWriteFontList2*)Unsafe.AsPointer(ref this)</param>, <param name="listIndex">listIndex</param>);
        </code>
                </body>
            </function>
            <function name="GetFont" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="listIndex">
                    <type>uint</type>
                </param>
                <param name="font">
                    <type>IDWriteFont3**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontList2*, uint, IDWriteFont3**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDWriteFontList2*)Unsafe.AsPointer(ref this)</param>, <param name="listIndex">listIndex</param>, <param name="font">font</param>);
        </code>
                </body>
            </function>
            <function name="GetFontFaceReference" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="listIndex">
                    <type>uint</type>
                </param>
                <param name="fontFaceReference">
                    <type>IDWriteFontFaceReference**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontList2*, uint, IDWriteFontFaceReference**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDWriteFontList2*)Unsafe.AsPointer(ref this)</param>, <param name="listIndex">listIndex</param>, <param name="fontFaceReference">fontFaceReference</param>);
        </code>
                </body>
            </function>
            <function name="GetFontSet" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontSet">
                    <type>IDWriteFontSet1**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontList2*, IDWriteFontSet1**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IDWriteFontList2*)Unsafe.AsPointer(ref this)</param>, <param name="fontSet">fontSet</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
