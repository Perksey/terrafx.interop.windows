<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dwrite_3.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDWriteFontCollection1" access="public" native="struct IDWriteFontCollection1 : IDWriteFontCollection" uuid="53585141-d9f8-4095-8321-d73cf6bd116c" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontCollection1*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDWriteFontCollection1*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontCollection1*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDWriteFontCollection1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontCollection1*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDWriteFontCollection1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetFontFamilyCount" access="public" unsafe="true">
                <type native="UINT32">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontCollection1*, uint&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDWriteFontCollection1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetFontFamily" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="index">
                    <type>uint</type>
                </param>
                <param name="fontFamily">
                    <type>IDWriteFontFamily**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontCollection1*, uint, IDWriteFontFamily**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDWriteFontCollection1*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>, <param name="fontFamily">fontFamily</param>);
        </code>
                </body>
            </function>
            <function name="FindFamilyName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="familyName">
                    <type>ushort*</type>
                </param>
                <param name="index">
                    <type>uint*</type>
                </param>
                <param name="exists">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontCollection1*, ushort*, uint*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDWriteFontCollection1*)Unsafe.AsPointer(ref this)</param>, <param name="familyName">familyName</param>, <param name="index">index</param>, <param name="exists">exists</param>);
        </code>
                </body>
            </function>
            <function name="GetFontFromFontFace" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontFace">
                    <type>IDWriteFontFace*</type>
                </param>
                <param name="font">
                    <type>IDWriteFont**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontCollection1*, IDWriteFontFace*, IDWriteFont**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDWriteFontCollection1*)Unsafe.AsPointer(ref this)</param>, <param name="fontFace">fontFace</param>, <param name="font">font</param>);
        </code>
                </body>
            </function>
            <function name="GetFontSet" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontSet">
                    <type>IDWriteFontSet**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontCollection1*, IDWriteFontSet**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDWriteFontCollection1*)Unsafe.AsPointer(ref this)</param>, <param name="fontSet">fontSet</param>);
        </code>
                </body>
            </function>
            <function name="GetFontFamily" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="index">
                    <type>uint</type>
                </param>
                <param name="fontFamily">
                    <type>IDWriteFontFamily1**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteFontCollection1*, uint, IDWriteFontFamily1**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDWriteFontCollection1*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>, <param name="fontFamily">fontFamily</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
