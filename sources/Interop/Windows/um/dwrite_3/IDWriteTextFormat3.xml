<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dwrite_3.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDWriteTextFormat3" access="public" native="struct IDWriteTextFormat3 : IDWriteTextFormat2" uuid="6d3b5641-e550-430d-a85b-b7bf48a93427" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetTextAlignment" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="textAlignment">
                    <type>DWRITE_TEXT_ALIGNMENT</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_TEXT_ALIGNMENT, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="textAlignment">textAlignment</param>);
        </code>
                </body>
            </function>
            <function name="SetParagraphAlignment" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="paragraphAlignment">
                    <type>DWRITE_PARAGRAPH_ALIGNMENT</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_PARAGRAPH_ALIGNMENT, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="paragraphAlignment">paragraphAlignment</param>);
        </code>
                </body>
            </function>
            <function name="SetWordWrapping" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="wordWrapping">
                    <type>DWRITE_WORD_WRAPPING</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_WORD_WRAPPING, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="wordWrapping">wordWrapping</param>);
        </code>
                </body>
            </function>
            <function name="SetReadingDirection" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="readingDirection">
                    <type>DWRITE_READING_DIRECTION</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_READING_DIRECTION, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="readingDirection">readingDirection</param>);
        </code>
                </body>
            </function>
            <function name="SetFlowDirection" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="flowDirection">
                    <type>DWRITE_FLOW_DIRECTION</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_FLOW_DIRECTION, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="flowDirection">flowDirection</param>);
        </code>
                </body>
            </function>
            <function name="SetIncrementalTabStop" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="incrementalTabStop">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, float, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="incrementalTabStop">incrementalTabStop</param>);
        </code>
                </body>
            </function>
            <function name="SetTrimming" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="trimmingOptions">
                    <type>DWRITE_TRIMMING*</type>
                </param>
                <param name="trimmingSign">
                    <type>IDWriteInlineObject*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_TRIMMING*, IDWriteInlineObject*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="trimmingOptions">trimmingOptions</param>, <param name="trimmingSign">trimmingSign</param>);
        </code>
                </body>
            </function>
            <function name="SetLineSpacing" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lineSpacingMethod">
                    <type>DWRITE_LINE_SPACING_METHOD</type>
                </param>
                <param name="lineSpacing">
                    <type>float</type>
                </param>
                <param name="baseline">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_LINE_SPACING_METHOD, float, float, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="lineSpacingMethod">lineSpacingMethod</param>, <param name="lineSpacing">lineSpacing</param>, <param name="baseline">baseline</param>);
        </code>
                </body>
            </function>
            <function name="GetTextAlignment" access="public" unsafe="true">
                <type>DWRITE_TEXT_ALIGNMENT</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_TEXT_ALIGNMENT&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetParagraphAlignment" access="public" unsafe="true">
                <type>DWRITE_PARAGRAPH_ALIGNMENT</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_PARAGRAPH_ALIGNMENT&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetWordWrapping" access="public" unsafe="true">
                <type>DWRITE_WORD_WRAPPING</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_WORD_WRAPPING&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetReadingDirection" access="public" unsafe="true">
                <type>DWRITE_READING_DIRECTION</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_READING_DIRECTION&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetFlowDirection" access="public" unsafe="true">
                <type>DWRITE_FLOW_DIRECTION</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_FLOW_DIRECTION&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetIncrementalTabStop" access="public" unsafe="true">
                <type native="FLOAT">float</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, float&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetTrimming" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="trimmingOptions">
                    <type>DWRITE_TRIMMING*</type>
                </param>
                <param name="trimmingSign">
                    <type>IDWriteInlineObject**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_TRIMMING*, IDWriteInlineObject**, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="trimmingOptions">trimmingOptions</param>, <param name="trimmingSign">trimmingSign</param>);
        </code>
                </body>
            </function>
            <function name="GetLineSpacing" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lineSpacingMethod">
                    <type>DWRITE_LINE_SPACING_METHOD*</type>
                </param>
                <param name="lineSpacing">
                    <type>float*</type>
                </param>
                <param name="baseline">
                    <type>float*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_LINE_SPACING_METHOD*, float*, float*, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="lineSpacingMethod">lineSpacingMethod</param>, <param name="lineSpacing">lineSpacing</param>, <param name="baseline">baseline</param>);
        </code>
                </body>
            </function>
            <function name="GetFontCollection" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontCollection">
                    <type>IDWriteFontCollection**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, IDWriteFontCollection**, int&gt;)(lpVtbl[<vtbl explicit="False">19</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="fontCollection">fontCollection</param>);
        </code>
                </body>
            </function>
            <function name="GetFontFamilyNameLength" access="public" unsafe="true">
                <type native="UINT32">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, uint&gt;)(lpVtbl[<vtbl explicit="False">20</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetFontFamilyName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontFamilyName">
                    <type>ushort*</type>
                </param>
                <param name="nameSize">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, ushort*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">21</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="fontFamilyName">fontFamilyName</param>, <param name="nameSize">nameSize</param>);
        </code>
                </body>
            </function>
            <function name="GetFontWeight" access="public" unsafe="true">
                <type>DWRITE_FONT_WEIGHT</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_FONT_WEIGHT&gt;)(lpVtbl[<vtbl explicit="False">22</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetFontStyle" access="public" unsafe="true">
                <type>DWRITE_FONT_STYLE</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_FONT_STYLE&gt;)(lpVtbl[<vtbl explicit="False">23</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetFontStretch" access="public" unsafe="true">
                <type>DWRITE_FONT_STRETCH</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_FONT_STRETCH&gt;)(lpVtbl[<vtbl explicit="False">24</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetFontSize" access="public" unsafe="true">
                <type native="FLOAT">float</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, float&gt;)(lpVtbl[<vtbl explicit="False">25</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetLocaleNameLength" access="public" unsafe="true">
                <type native="UINT32">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, uint&gt;)(lpVtbl[<vtbl explicit="False">26</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetLocaleName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="localeName">
                    <type>ushort*</type>
                </param>
                <param name="nameSize">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, ushort*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">27</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="localeName">localeName</param>, <param name="nameSize">nameSize</param>);
        </code>
                </body>
            </function>
            <function name="SetVerticalGlyphOrientation" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="glyphOrientation">
                    <type>DWRITE_VERTICAL_GLYPH_ORIENTATION</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_VERTICAL_GLYPH_ORIENTATION, int&gt;)(lpVtbl[<vtbl explicit="False">28</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="glyphOrientation">glyphOrientation</param>);
        </code>
                </body>
            </function>
            <function name="GetVerticalGlyphOrientation" access="public" unsafe="true">
                <type>DWRITE_VERTICAL_GLYPH_ORIENTATION</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_VERTICAL_GLYPH_ORIENTATION&gt;)(lpVtbl[<vtbl explicit="False">29</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetLastLineWrapping" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="isLastLineWrappingEnabled">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, int, int&gt;)(lpVtbl[<vtbl explicit="False">30</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="isLastLineWrappingEnabled">isLastLineWrappingEnabled</param>);
        </code>
                </body>
            </function>
            <function name="GetLastLineWrapping" access="public" unsafe="true">
                <type native="BOOL">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, int&gt;)(lpVtbl[<vtbl explicit="False">31</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetOpticalAlignment" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="opticalAlignment">
                    <type>DWRITE_OPTICAL_ALIGNMENT</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_OPTICAL_ALIGNMENT, int&gt;)(lpVtbl[<vtbl explicit="False">32</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="opticalAlignment">opticalAlignment</param>);
        </code>
                </body>
            </function>
            <function name="GetOpticalAlignment" access="public" unsafe="true">
                <type>DWRITE_OPTICAL_ALIGNMENT</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_OPTICAL_ALIGNMENT&gt;)(lpVtbl[<vtbl explicit="False">33</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetFontFallback" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontFallback">
                    <type>IDWriteFontFallback*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, IDWriteFontFallback*, int&gt;)(lpVtbl[<vtbl explicit="False">34</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="fontFallback">fontFallback</param>);
        </code>
                </body>
            </function>
            <function name="GetFontFallback" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontFallback">
                    <type>IDWriteFontFallback**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, IDWriteFontFallback**, int&gt;)(lpVtbl[<vtbl explicit="False">35</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="fontFallback">fontFallback</param>);
        </code>
                </body>
            </function>
            <function name="SetLineSpacing" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lineSpacingOptions">
                    <type>DWRITE_LINE_SPACING*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_LINE_SPACING*, int&gt;)(lpVtbl[<vtbl explicit="False">36</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="lineSpacingOptions">lineSpacingOptions</param>);
        </code>
                </body>
            </function>
            <function name="GetLineSpacing" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lineSpacingOptions">
                    <type>DWRITE_LINE_SPACING*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_LINE_SPACING*, int&gt;)(lpVtbl[<vtbl explicit="False">37</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="lineSpacingOptions">lineSpacingOptions</param>);
        </code>
                </body>
            </function>
            <function name="SetFontAxisValues" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontAxisValues">
                    <type>DWRITE_FONT_AXIS_VALUE*</type>
                </param>
                <param name="fontAxisValueCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_FONT_AXIS_VALUE*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">38</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="fontAxisValues">fontAxisValues</param>, <param name="fontAxisValueCount">fontAxisValueCount</param>);
        </code>
                </body>
            </function>
            <function name="GetFontAxisValueCount" access="public" unsafe="true">
                <type native="UINT32">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, uint&gt;)(lpVtbl[<vtbl explicit="False">39</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetFontAxisValues" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fontAxisValues">
                    <type>DWRITE_FONT_AXIS_VALUE*</type>
                </param>
                <param name="fontAxisValueCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_FONT_AXIS_VALUE*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">40</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="fontAxisValues">fontAxisValues</param>, <param name="fontAxisValueCount">fontAxisValueCount</param>);
        </code>
                </body>
            </function>
            <function name="GetAutomaticFontAxes" access="public" unsafe="true">
                <type>DWRITE_AUTOMATIC_FONT_AXES</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_AUTOMATIC_FONT_AXES&gt;)(lpVtbl[<vtbl explicit="False">41</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetAutomaticFontAxes" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="automaticFontAxes">
                    <type>DWRITE_AUTOMATIC_FONT_AXES</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDWriteTextFormat3*, DWRITE_AUTOMATIC_FONT_AXES, int&gt;)(lpVtbl[<vtbl explicit="False">42</vtbl>]))(<param special="thisPtr">(IDWriteTextFormat3*)Unsafe.AsPointer(ref this)</param>, <param name="automaticFontAxes">automaticFontAxes</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
