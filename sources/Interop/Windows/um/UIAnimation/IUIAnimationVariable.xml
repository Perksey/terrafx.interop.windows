<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/UIAnimation.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IUIAnimationVariable" access="public" native="struct IUIAnimationVariable : IUnknown" uuid="8ceeb155-2849-4ce5-9448-91ff70e1e4d9" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IUIAnimationVariable*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IUIAnimationVariable*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IUIAnimationVariable*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IUIAnimationVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IUIAnimationVariable*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IUIAnimationVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetValue" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="value">
                    <type>double*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IUIAnimationVariable*, double*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IUIAnimationVariable*)Unsafe.AsPointer(ref this)</param>, <param name="value">value</param>);
        </code>
                </body>
            </function>
            <function name="GetFinalValue" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="finalValue">
                    <type>double*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IUIAnimationVariable*, double*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IUIAnimationVariable*)Unsafe.AsPointer(ref this)</param>, <param name="finalValue">finalValue</param>);
        </code>
                </body>
            </function>
            <function name="GetPreviousValue" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="previousValue">
                    <type>double*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IUIAnimationVariable*, double*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IUIAnimationVariable*)Unsafe.AsPointer(ref this)</param>, <param name="previousValue">previousValue</param>);
        </code>
                </body>
            </function>
            <function name="GetIntegerValue" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="value">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IUIAnimationVariable*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IUIAnimationVariable*)Unsafe.AsPointer(ref this)</param>, <param name="value">value</param>);
        </code>
                </body>
            </function>
            <function name="GetFinalIntegerValue" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="finalValue">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IUIAnimationVariable*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IUIAnimationVariable*)Unsafe.AsPointer(ref this)</param>, <param name="finalValue">finalValue</param>);
        </code>
                </body>
            </function>
            <function name="GetPreviousIntegerValue" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="previousValue">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IUIAnimationVariable*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IUIAnimationVariable*)Unsafe.AsPointer(ref this)</param>, <param name="previousValue">previousValue</param>);
        </code>
                </body>
            </function>
            <function name="GetCurrentStoryboard" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="storyboard">
                    <type>IUIAnimationStoryboard**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IUIAnimationVariable*, IUIAnimationStoryboard**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IUIAnimationVariable*)Unsafe.AsPointer(ref this)</param>, <param name="storyboard">storyboard</param>);
        </code>
                </body>
            </function>
            <function name="SetLowerBound" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="bound">
                    <type>double</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IUIAnimationVariable*, double, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IUIAnimationVariable*)Unsafe.AsPointer(ref this)</param>, <param name="bound">bound</param>);
        </code>
                </body>
            </function>
            <function name="SetUpperBound" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="bound">
                    <type>double</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IUIAnimationVariable*, double, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IUIAnimationVariable*)Unsafe.AsPointer(ref this)</param>, <param name="bound">bound</param>);
        </code>
                </body>
            </function>
            <function name="SetRoundingMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="mode">
                    <type>UI_ANIMATION_ROUNDING_MODE</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IUIAnimationVariable*, UI_ANIMATION_ROUNDING_MODE, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IUIAnimationVariable*)Unsafe.AsPointer(ref this)</param>, <param name="mode">mode</param>);
        </code>
                </body>
            </function>
            <function name="SetTag" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="@object">
                    <type>IUnknown*</type>
                </param>
                <param name="id">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IUIAnimationVariable*, IUnknown*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IUIAnimationVariable*)Unsafe.AsPointer(ref this)</param>, <param name="@object">@object</param>, <param name="id">id</param>);
        </code>
                </body>
            </function>
            <function name="GetTag" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="@object">
                    <type>IUnknown**</type>
                </param>
                <param name="id">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IUIAnimationVariable*, IUnknown**, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IUIAnimationVariable*)Unsafe.AsPointer(ref this)</param>, <param name="@object">@object</param>, <param name="id">id</param>);
        </code>
                </body>
            </function>
            <function name="SetVariableChangeHandler" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="handler">
                    <type>IUIAnimationVariableChangeHandler*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IUIAnimationVariable*, IUIAnimationVariableChangeHandler*, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IUIAnimationVariable*)Unsafe.AsPointer(ref this)</param>, <param name="handler">handler</param>);
        </code>
                </body>
            </function>
            <function name="SetVariableIntegerChangeHandler" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="handler">
                    <type>IUIAnimationVariableIntegerChangeHandler*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IUIAnimationVariable*, IUIAnimationVariableIntegerChangeHandler*, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(IUIAnimationVariable*)Unsafe.AsPointer(ref this)</param>, <param name="handler">handler</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
