<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/WinUser.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="INPUT_TRANSFORM" access="public" unsafe="true">
            <field name="Anonymous" access="public">
                <type native="tagINPUT_TRANSFORM::(anonymous union at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/WinUser.h:6795:5)">_Anonymous_e__Union</type>
            </field>
            <field name="_11" access="public">
                <type native="">ref float</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Anonymous._11, 1));
        </code>
                </get>
            </field>
            <field name="_12" access="public">
                <type native="">ref float</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Anonymous._12, 1));
        </code>
                </get>
            </field>
            <field name="_13" access="public">
                <type native="">ref float</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Anonymous._13, 1));
        </code>
                </get>
            </field>
            <field name="_14" access="public">
                <type native="">ref float</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Anonymous._14, 1));
        </code>
                </get>
            </field>
            <field name="_21" access="public">
                <type native="">ref float</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Anonymous._21, 1));
        </code>
                </get>
            </field>
            <field name="_22" access="public">
                <type native="">ref float</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Anonymous._22, 1));
        </code>
                </get>
            </field>
            <field name="_23" access="public">
                <type native="">ref float</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Anonymous._23, 1));
        </code>
                </get>
            </field>
            <field name="_24" access="public">
                <type native="">ref float</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Anonymous._24, 1));
        </code>
                </get>
            </field>
            <field name="_31" access="public">
                <type native="">ref float</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Anonymous._31, 1));
        </code>
                </get>
            </field>
            <field name="_32" access="public">
                <type native="">ref float</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Anonymous._32, 1));
        </code>
                </get>
            </field>
            <field name="_33" access="public">
                <type native="">ref float</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Anonymous._33, 1));
        </code>
                </get>
            </field>
            <field name="_34" access="public">
                <type native="">ref float</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Anonymous._34, 1));
        </code>
                </get>
            </field>
            <field name="_41" access="public">
                <type native="">ref float</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Anonymous._41, 1));
        </code>
                </get>
            </field>
            <field name="_42" access="public">
                <type native="">ref float</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Anonymous._42, 1));
        </code>
                </get>
            </field>
            <field name="_43" access="public">
                <type native="">ref float</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Anonymous._43, 1));
        </code>
                </get>
            </field>
            <field name="_44" access="public">
                <type native="">ref float</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Anonymous._44, 1));
        </code>
                </get>
            </field>
            <field name="m" access="public">
                <type native="">Span&lt;float&gt;</type>
                <get inlining="aggressive">
                    <code>return MemoryMarshal.CreateSpan(ref Anonymous.m[0], 4);
        </code>
                </get>
            </field>
            <struct name="_Anonymous_e__Union" access="public" unsafe="true" layout="Explicit">
                <field name="Anonymous" access="public" offset="0">
                    <type native="tagINPUT_TRANSFORM::(anonymous struct at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/WinUser.h:6796:9)">_Anonymous_e__Struct</type>
                </field>
                <field name="m" access="public" offset="0">
                    <type native="float [4][4]" count="4 * 4" fixed="_m_e__FixedBuffer">float</type>
                </field>
                <struct name="_Anonymous_e__Struct" access="public">
                    <field name="_11" access="public">
                        <type native="">float</type>
                    </field>
                    <field name="_12" access="public">
                        <type native="">float</type>
                    </field>
                    <field name="_13" access="public">
                        <type native="">float</type>
                    </field>
                    <field name="_14" access="public">
                        <type native="">float</type>
                    </field>
                    <field name="_21" access="public">
                        <type native="">float</type>
                    </field>
                    <field name="_22" access="public">
                        <type native="">float</type>
                    </field>
                    <field name="_23" access="public">
                        <type native="">float</type>
                    </field>
                    <field name="_24" access="public">
                        <type native="">float</type>
                    </field>
                    <field name="_31" access="public">
                        <type native="">float</type>
                    </field>
                    <field name="_32" access="public">
                        <type native="">float</type>
                    </field>
                    <field name="_33" access="public">
                        <type native="">float</type>
                    </field>
                    <field name="_34" access="public">
                        <type native="">float</type>
                    </field>
                    <field name="_41" access="public">
                        <type native="">float</type>
                    </field>
                    <field name="_42" access="public">
                        <type native="">float</type>
                    </field>
                    <field name="_43" access="public">
                        <type native="">float</type>
                    </field>
                    <field name="_44" access="public">
                        <type native="">float</type>
                    </field>
                </struct>
            </struct>
        </struct>
    </namespace>
</bindings>
