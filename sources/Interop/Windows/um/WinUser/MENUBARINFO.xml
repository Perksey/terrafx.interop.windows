<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/WinUser.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="MENUBARINFO" access="public">
            <field name="cbSize" access="public">
                <type native="DWORD">uint</type>
            </field>
            <field name="rcBar" access="public">
                <type native="">RECT</type>
            </field>
            <field name="hMenu" access="public">
                <type native="HMENU">IntPtr</type>
            </field>
            <field name="hwndMenu" access="public">
                <type native="HWND">IntPtr</type>
            </field>
            <field name="_bitfield" access="public">
                <type native="">int</type>
            </field>
            <field name="fBarFocused" access="public">
                <type native="BOOL : 1">int</type>
                <get inlining="aggressive">
                    <code>return <bitfieldName>_bitfield</bitfieldName> &amp; 0x<bitwidthHexStringBacking>1</bitwidthHexStringBacking>;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>
                        <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~0x<bitwidthHexStringBacking>1</bitwidthHexStringBacking>) | (value &amp; 0x<bitwidthHexString>1</bitwidthHexString>);
        </code>
                </set>
            </field>
            <field name="fFocused" access="public">
                <type native="BOOL : 1">int</type>
                <get inlining="aggressive">
                    <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>1</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>1</bitwidthHexStringBacking>;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>
                        <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>1</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>1</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>1</bitwidthHexString>) &lt;&lt; 1);
        </code>
                </set>
            </field>
            <field name="fUnused" access="public">
                <type native="BOOL : 30">int</type>
                <get inlining="aggressive">
                    <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>2</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>3FFFFFFF</bitwidthHexStringBacking>;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>
                        <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>3FFFFFFF</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>2</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>3FFFFFFF</bitwidthHexString>) &lt;&lt; 2);
        </code>
                </set>
            </field>
        </struct>
    </namespace>
</bindings>
