<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/winnt.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMPORT_OBJECT_HEADER" access="public">
            <field name="Sig1" access="public">
                <type native="WORD">ushort</type>
            </field>
            <field name="Sig2" access="public">
                <type native="WORD">ushort</type>
            </field>
            <field name="Version" access="public">
                <type native="WORD">ushort</type>
            </field>
            <field name="Machine" access="public">
                <type native="WORD">ushort</type>
            </field>
            <field name="TimeDateStamp" access="public">
                <type native="DWORD">uint</type>
            </field>
            <field name="SizeOfData" access="public">
                <type native="DWORD">uint</type>
            </field>
            <field name="Anonymous" access="public">
                <type native="IMPORT_OBJECT_HEADER::(anonymous union at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/winnt.h:19177:5)">_Anonymous_e__Union</type>
            </field>
            <field name="Ordinal" access="public">
                <type native="">ref ushort</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Ordinal, 1));
        </code>
                </get>
            </field>
            <field name="Hint" access="public">
                <type native="">ref ushort</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Hint, 1));
        </code>
                </get>
            </field>
            <field name="_bitfield" access="public">
                <type native="">ushort</type>
            </field>
            <field name="Type" access="public">
                <type native="WORD : 2">ushort</type>
                <get inlining="aggressive">
                    <code>return (<typeName>ushort</typeName>)(<bitfieldName>_bitfield</bitfieldName> &amp; 0x<bitwidthHexStringBacking>3u</bitwidthHexStringBacking>);
        </code>
                </get>
                <set inlining="aggressive">
                    <code>
                        <bitfieldName>_bitfield</bitfieldName> = (<typeNameBacking>ushort</typeNameBacking>)((_bitfield &amp; ~0x<bitwidthHexStringBacking>3u</bitwidthHexStringBacking>) | (value &amp; 0x<bitwidthHexString>3u</bitwidthHexString>));
        </code>
                </set>
            </field>
            <field name="NameType" access="public">
                <type native="WORD : 3">ushort</type>
                <get inlining="aggressive">
                    <code>return (<typeName>ushort</typeName>)((<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>2</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>7u</bitwidthHexStringBacking>);
        </code>
                </get>
                <set inlining="aggressive">
                    <code>
                        <bitfieldName>_bitfield</bitfieldName> = (<typeNameBacking>ushort</typeNameBacking>)((_bitfield &amp; ~(0x<bitwidthHexStringBacking>7u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>2</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>7u</bitwidthHexString>) &lt;&lt; 2));
        </code>
                </set>
            </field>
            <field name="Reserved" access="public">
                <type native="WORD : 11">ushort</type>
                <get inlining="aggressive">
                    <code>return (<typeName>ushort</typeName>)((<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>5</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>7FFu</bitwidthHexStringBacking>);
        </code>
                </get>
                <set inlining="aggressive">
                    <code>
                        <bitfieldName>_bitfield</bitfieldName> = (<typeNameBacking>ushort</typeNameBacking>)((_bitfield &amp; ~(0x<bitwidthHexStringBacking>7FFu</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>5</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>7FFu</bitwidthHexString>) &lt;&lt; 5));
        </code>
                </set>
            </field>
            <struct name="_Anonymous_e__Union" access="public" layout="Explicit">
                <field name="Ordinal" access="public" offset="0">
                    <type native="WORD">ushort</type>
                </field>
                <field name="Hint" access="public" offset="0">
                    <type native="WORD">ushort</type>
                </field>
            </struct>
        </struct>
    </namespace>
</bindings>
