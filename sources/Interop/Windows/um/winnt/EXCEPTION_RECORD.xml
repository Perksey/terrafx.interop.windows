<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/winnt.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="EXCEPTION_RECORD" access="public" unsafe="true">
            <field name="ExceptionCode" access="public">
                <type native="DWORD">uint</type>
            </field>
            <field name="ExceptionFlags" access="public">
                <type native="DWORD">uint</type>
            </field>
            <field name="ExceptionRecord" access="public">
                <type native="struct _EXCEPTION_RECORD *">EXCEPTION_RECORD*</type>
            </field>
            <field name="ExceptionAddress" access="public">
                <type native="PVOID">void*</type>
            </field>
            <field name="NumberParameters" access="public">
                <type native="DWORD">uint</type>
            </field>
            <field name="ExceptionInformation" access="public">
                <type native="ULONG_PTR [15]" count="15" fixed="_ExceptionInformation_e__FixedBuffer">nuint</type>
            </field>
            <struct name="_ExceptionInformation_e__FixedBuffer" access="public">
                <field name="e0" access="public">
                    <type native="">nuint</type>
                </field>
                <field name="e1" access="public">
                    <type native="">nuint</type>
                </field>
                <field name="e2" access="public">
                    <type native="">nuint</type>
                </field>
                <field name="e3" access="public">
                    <type native="">nuint</type>
                </field>
                <field name="e4" access="public">
                    <type native="">nuint</type>
                </field>
                <field name="e5" access="public">
                    <type native="">nuint</type>
                </field>
                <field name="e6" access="public">
                    <type native="">nuint</type>
                </field>
                <field name="e7" access="public">
                    <type native="">nuint</type>
                </field>
                <field name="e8" access="public">
                    <type native="">nuint</type>
                </field>
                <field name="e9" access="public">
                    <type native="">nuint</type>
                </field>
                <field name="e10" access="public">
                    <type native="">nuint</type>
                </field>
                <field name="e11" access="public">
                    <type native="">nuint</type>
                </field>
                <field name="e12" access="public">
                    <type native="">nuint</type>
                </field>
                <field name="e13" access="public">
                    <type native="">nuint</type>
                </field>
                <field name="e14" access="public">
                    <type native="">nuint</type>
                </field>
                <indexer access="public">
                    <type>ref nuint</type>
                    <param name="index">
                        <type>int</type>
                    </param>
                    <get inlining="aggressive">
                        <code>return ref AsSpan()[index];
        </code>
                    </get>
                </indexer>
                <function name="AsSpan" access="public" unsafe="true">
                    <type>Span&lt;nuint&gt;</type>
                    <code>MemoryMarshal.CreateSpan(ref e0, 15);
        </code>
                </function>
            </struct>
        </struct>
    </namespace>
</bindings>
