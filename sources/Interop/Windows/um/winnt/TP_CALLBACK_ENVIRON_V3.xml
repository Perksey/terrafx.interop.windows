<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/winnt.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="TP_CALLBACK_ENVIRON_V3" access="public" unsafe="true">
            <field name="Version" access="public">
                <type native="TP_VERSION">uint</type>
            </field>
            <field name="Pool" access="public">
                <type native="PTP_POOL">IntPtr</type>
            </field>
            <field name="CleanupGroup" access="public">
                <type native="PTP_CLEANUP_GROUP">IntPtr</type>
            </field>
            <field name="CleanupGroupCancelCallback" access="public">
                <type native="PTP_CLEANUP_GROUP_CANCEL_CALLBACK">delegate* unmanaged&lt;void*, void*, void&gt;</type>
            </field>
            <field name="RaceDll" access="public">
                <type native="PVOID">void*</type>
            </field>
            <field name="ActivationContext" access="public">
                <type native="struct _ACTIVATION_CONTEXT *">IntPtr</type>
            </field>
            <field name="FinalizationCallback" access="public">
                <type native="PTP_SIMPLE_CALLBACK">delegate* unmanaged&lt;IntPtr, void*, void&gt;</type>
            </field>
            <field name="u" access="public">
                <type native="union (anonymous union at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/winnt.h:22686:5)">_u_e__Union</type>
            </field>
            <field name="CallbackPriority" access="public">
                <type native="">TP_CALLBACK_PRIORITY</type>
            </field>
            <field name="Size" access="public">
                <type native="DWORD">uint</type>
            </field>
            <struct name="_u_e__Union" access="public" layout="Explicit">
                <field name="Flags" access="public" offset="0">
                    <type native="DWORD">uint</type>
                </field>
                <field name="s" access="public" offset="0">
                    <type native="struct (anonymous struct at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/winnt.h:22688:9)">_s_e__Struct</type>
                </field>
                <struct name="_s_e__Struct" access="public">
                    <field name="_bitfield" access="public">
                        <type native="">uint</type>
                    </field>
                    <field name="LongFunction" access="public">
                        <type native="DWORD : 1">uint</type>
                        <get inlining="aggressive">
                            <code>return <bitfieldName>_bitfield</bitfieldName> &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>) | (value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>);
        </code>
                        </set>
                    </field>
                    <field name="Persistent" access="public">
                        <type native="DWORD : 1">uint</type>
                        <get inlining="aggressive">
                            <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>1</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>1</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>) &lt;&lt; 1);
        </code>
                        </set>
                    </field>
                    <field name="Private" access="public">
                        <type native="DWORD : 30">uint</type>
                        <get inlining="aggressive">
                            <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>2</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>3FFFFFFFu</bitwidthHexStringBacking>;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>3FFFFFFFu</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>2</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>3FFFFFFFu</bitwidthHexString>) &lt;&lt; 2);
        </code>
                        </set>
                    </field>
                </struct>
            </struct>
        </struct>
    </namespace>
</bindings>
