<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/winnt.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="MEM_EXTENDED_PARAMETER" access="public" unsafe="true">
            <field name="Anonymous1" access="public">
                <type native="MEM_EXTENDED_PARAMETER::(anonymous struct at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/winnt.h:13083:5)">_Anonymous1_e__Struct</type>
            </field>
            <field name="Type" access="public">
                <type native="">ulong</type>
                <get inlining="aggressive">
                    <code>return Anonymous1.Type;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous1.Type = value;
        </code>
                </set>
            </field>
            <field name="Reserved" access="public">
                <type native="">ulong</type>
                <get inlining="aggressive">
                    <code>return Anonymous1.Reserved;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous1.Reserved = value;
        </code>
                </set>
            </field>
            <field name="Anonymous2" access="public">
                <type native="MEM_EXTENDED_PARAMETER::(anonymous union at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/winnt.h:13088:5)">_Anonymous2_e__Union</type>
            </field>
            <field name="ULong64" access="public">
                <type native="">ref ulong</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous2.ULong64, 1));
        </code>
                </get>
            </field>
            <field name="Pointer" access="public">
                <type native="">ref void*</type>
                <get inlining="aggressive">
                    <code>fixed (_Anonymous2_e__Union* pField = &amp;Anonymous2)
        {
            return ref pField-&gt;Pointer;
        }
        </code>
                </get>
            </field>
            <field name="Size" access="public">
                <type native="">ref nuint</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous2.Size, 1));
        </code>
                </get>
            </field>
            <field name="Handle" access="public">
                <type native="">ref IntPtr</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous2.Handle, 1));
        </code>
                </get>
            </field>
            <field name="ULong" access="public">
                <type native="">ref uint</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous2.ULong, 1));
        </code>
                </get>
            </field>
            <struct name="_Anonymous1_e__Struct" access="public">
                <field name="_bitfield" access="public">
                    <type native="">ulong</type>
                </field>
                <field name="Type" access="public">
                    <type native="DWORD64 : 8">ulong</type>
                    <get inlining="aggressive">
                        <code>return <bitfieldName>_bitfield</bitfieldName> &amp; 0x<bitwidthHexStringBacking>FFUL</bitwidthHexStringBacking>;
        </code>
                    </get>
                    <set inlining="aggressive">
                        <code>
                            <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~0x<bitwidthHexStringBacking>FFUL</bitwidthHexStringBacking>) | (value &amp; 0x<bitwidthHexString>FFUL</bitwidthHexString>);
        </code>
                    </set>
                </field>
                <field name="Reserved" access="public">
                    <type native="DWORD64 : 56">ulong</type>
                    <get inlining="aggressive">
                        <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>8</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>FFFFFFUL</bitwidthHexStringBacking>;
        </code>
                    </get>
                    <set inlining="aggressive">
                        <code>
                            <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>FFFFFFUL</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>8</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>FFFFFFUL</bitwidthHexString>) &lt;&lt; 8);
        </code>
                    </set>
                </field>
            </struct>
            <struct name="_Anonymous2_e__Union" access="public" unsafe="true" layout="Explicit">
                <field name="ULong64" access="public" offset="0">
                    <type native="DWORD64">ulong</type>
                </field>
                <field name="Pointer" access="public" offset="0">
                    <type native="PVOID">void*</type>
                </field>
                <field name="Size" access="public" offset="0">
                    <type native="SIZE_T">nuint</type>
                </field>
                <field name="Handle" access="public" offset="0">
                    <type native="HANDLE">IntPtr</type>
                </field>
                <field name="ULong" access="public" offset="0">
                    <type native="DWORD">uint</type>
                </field>
            </struct>
        </struct>
    </namespace>
</bindings>
