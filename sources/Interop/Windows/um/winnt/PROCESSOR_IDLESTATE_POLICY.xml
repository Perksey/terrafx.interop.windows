<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/winnt.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="PROCESSOR_IDLESTATE_POLICY" access="public">
            <field name="Revision" access="public">
                <type native="WORD">ushort</type>
            </field>
            <field name="Flags" access="public">
                <type native="union (anonymous union at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/winnt.h:16637:5)">_Flags_e__Union</type>
            </field>
            <field name="PolicyCount" access="public">
                <type native="DWORD">uint</type>
            </field>
            <field name="Policy" access="public">
                <type native="PROCESSOR_IDLESTATE_INFO [3]" count="3" fixed="_Policy_e__FixedBuffer">PROCESSOR_IDLESTATE_INFO</type>
            </field>
            <struct name="_Flags_e__Union" access="public" layout="Explicit">
                <field name="AsWORD" access="public" offset="0">
                    <type native="WORD">ushort</type>
                </field>
                <field name="Anonymous" access="public" offset="0">
                    <type native="PROCESSOR_IDLESTATE_POLICY::(anonymous struct at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/winnt.h:16639:9)">_Anonymous_e__Struct</type>
                </field>
                <field name="AllowScaling" access="public">
                    <type native="">ushort</type>
                    <get inlining="aggressive">
                        <code>return Anonymous.AllowScaling;
        </code>
                    </get>
                    <set inlining="aggressive">
                        <code>Anonymous.AllowScaling = value;
        </code>
                    </set>
                </field>
                <field name="Disabled" access="public">
                    <type native="">ushort</type>
                    <get inlining="aggressive">
                        <code>return Anonymous.Disabled;
        </code>
                    </get>
                    <set inlining="aggressive">
                        <code>Anonymous.Disabled = value;
        </code>
                    </set>
                </field>
                <field name="Reserved" access="public">
                    <type native="">ushort</type>
                    <get inlining="aggressive">
                        <code>return Anonymous.Reserved;
        </code>
                    </get>
                    <set inlining="aggressive">
                        <code>Anonymous.Reserved = value;
        </code>
                    </set>
                </field>
                <struct name="_Anonymous_e__Struct" access="public">
                    <field name="_bitfield" access="public">
                        <type native="">ushort</type>
                    </field>
                    <field name="AllowScaling" access="public">
                        <type native="WORD : 1">ushort</type>
                        <get inlining="aggressive">
                            <code>return (<typeName>ushort</typeName>)(<bitfieldName>_bitfield</bitfieldName> &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>);
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (<typeNameBacking>ushort</typeNameBacking>)((_bitfield &amp; ~0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>) | (value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>));
        </code>
                        </set>
                    </field>
                    <field name="Disabled" access="public">
                        <type native="WORD : 1">ushort</type>
                        <get inlining="aggressive">
                            <code>return (<typeName>ushort</typeName>)((<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>1</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>);
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (<typeNameBacking>ushort</typeNameBacking>)((_bitfield &amp; ~(0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>1</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>) &lt;&lt; 1));
        </code>
                        </set>
                    </field>
                    <field name="Reserved" access="public">
                        <type native="WORD : 14">ushort</type>
                        <get inlining="aggressive">
                            <code>return (<typeName>ushort</typeName>)((<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>2</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>3FFFu</bitwidthHexStringBacking>);
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>
                                <bitfieldName>_bitfield</bitfieldName> = (<typeNameBacking>ushort</typeNameBacking>)((_bitfield &amp; ~(0x<bitwidthHexStringBacking>3FFFu</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>2</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>3FFFu</bitwidthHexString>) &lt;&lt; 2));
        </code>
                        </set>
                    </field>
                </struct>
            </struct>
            <struct name="_Policy_e__FixedBuffer" access="public">
                <field name="e0" access="public">
                    <type native="">PROCESSOR_IDLESTATE_INFO</type>
                </field>
                <field name="e1" access="public">
                    <type native="">PROCESSOR_IDLESTATE_INFO</type>
                </field>
                <field name="e2" access="public">
                    <type native="">PROCESSOR_IDLESTATE_INFO</type>
                </field>
                <indexer access="public">
                    <type>ref PROCESSOR_IDLESTATE_INFO</type>
                    <param name="index">
                        <type>int</type>
                    </param>
                    <get inlining="aggressive">
                        <code>return ref AsSpan()[index];
        </code>
                    </get>
                </indexer>
                <function name="AsSpan" access="public" unsafe="true">
                    <type>Span&lt;PROCESSOR_IDLESTATE_INFO&gt;</type>
                    <code>MemoryMarshal.CreateSpan(ref e0, 3);
        </code>
                </function>
            </struct>
        </struct>
    </namespace>
</bindings>
