<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/winnt.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="SYSTEM_LOGICAL_PROCESSOR_INFORMATION" access="public" unsafe="true">
            <field name="ProcessorMask" access="public">
                <type native="ULONG_PTR">nuint</type>
            </field>
            <field name="Relationship" access="public">
                <type native="">LOGICAL_PROCESSOR_RELATIONSHIP</type>
            </field>
            <field name="Anonymous" access="public">
                <type native="_SYSTEM_LOGICAL_PROCESSOR_INFORMATION::(anonymous union at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/winnt.h:12558:5)">_Anonymous_e__Union</type>
            </field>
            <field name="ProcessorCore" access="public">
                <type native="">ref _Anonymous_e__Union._ProcessorCore_e__Struct</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.ProcessorCore, 1));
        </code>
                </get>
            </field>
            <field name="NumaNode" access="public">
                <type native="">ref _Anonymous_e__Union._NumaNode_e__Struct</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.NumaNode, 1));
        </code>
                </get>
            </field>
            <field name="Cache" access="public">
                <type native="">ref CACHE_DESCRIPTOR</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Cache, 1));
        </code>
                </get>
            </field>
            <field name="Reserved" access="public">
                <type native="">Span&lt;ulong&gt;</type>
                <get inlining="aggressive">
                    <code>return MemoryMarshal.CreateSpan(ref Anonymous.Reserved[0], 2);
        </code>
                </get>
            </field>
            <struct name="_Anonymous_e__Union" access="public" unsafe="true" layout="Explicit">
                <field name="ProcessorCore" access="public" offset="0">
                    <type native="struct (anonymous struct at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/winnt.h:12559:9)">_ProcessorCore_e__Struct</type>
                </field>
                <field name="NumaNode" access="public" offset="0">
                    <type native="struct (anonymous struct at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/winnt.h:12562:9)">_NumaNode_e__Struct</type>
                </field>
                <field name="Cache" access="public" offset="0">
                    <type native="">CACHE_DESCRIPTOR</type>
                </field>
                <field name="Reserved" access="public" offset="0">
                    <type native="ULONGLONG [2]" count="2" fixed="_Reserved_e__FixedBuffer">ulong</type>
                </field>
                <struct name="_ProcessorCore_e__Struct" access="public">
                    <field name="Flags" access="public">
                        <type native="BYTE">byte</type>
                    </field>
                </struct>
                <struct name="_NumaNode_e__Struct" access="public">
                    <field name="NodeNumber" access="public">
                        <type native="DWORD">uint</type>
                    </field>
                </struct>
            </struct>
        </struct>
    </namespace>
</bindings>
