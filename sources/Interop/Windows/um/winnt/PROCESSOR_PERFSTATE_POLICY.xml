<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/winnt.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="PROCESSOR_PERFSTATE_POLICY" access="public">
            <field name="Revision" access="public">
                <type native="DWORD">uint</type>
            </field>
            <field name="MaxThrottle" access="public">
                <type native="BYTE">byte</type>
            </field>
            <field name="MinThrottle" access="public">
                <type native="BYTE">byte</type>
            </field>
            <field name="BusyAdjThreshold" access="public">
                <type native="BYTE">byte</type>
            </field>
            <field name="Anonymous" access="public">
                <type native="PROCESSOR_PERFSTATE_POLICY::(anonymous union at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/winnt.h:16711:5)">_Anonymous_e__Union</type>
            </field>
            <field name="Spare" access="public">
                <type native="">ref byte</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Spare, 1));
        </code>
                </get>
            </field>
            <field name="Flags" access="public">
                <type native="">ref _Anonymous_e__Union._Flags_e__Union</type>
                <get inlining="aggressive">
                    <code>return ref MemoryMarshal.GetReference(MemoryMarshal.CreateSpan(ref Anonymous.Flags, 1));
        </code>
                </get>
            </field>
            <field name="TimeCheck" access="public">
                <type native="DWORD">uint</type>
            </field>
            <field name="IncreaseTime" access="public">
                <type native="DWORD">uint</type>
            </field>
            <field name="DecreaseTime" access="public">
                <type native="DWORD">uint</type>
            </field>
            <field name="IncreasePercent" access="public">
                <type native="DWORD">uint</type>
            </field>
            <field name="DecreasePercent" access="public">
                <type native="DWORD">uint</type>
            </field>
            <struct name="_Anonymous_e__Union" access="public" layout="Explicit">
                <field name="Spare" access="public" offset="0">
                    <type native="BYTE">byte</type>
                </field>
                <field name="Flags" access="public" offset="0">
                    <type native="union (anonymous union at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/winnt.h:16713:9)">_Flags_e__Union</type>
                </field>
                <struct name="_Flags_e__Union" access="public" layout="Explicit">
                    <field name="AsBYTE" access="public" offset="0">
                        <type native="BYTE">byte</type>
                    </field>
                    <field name="Anonymous" access="public" offset="0">
                        <type native="PROCESSOR_PERFSTATE_POLICY::(anonymous struct at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/winnt.h:16715:13)">_Anonymous_e__Struct</type>
                    </field>
                    <field name="NoDomainAccounting" access="public">
                        <type native="">byte</type>
                        <get inlining="aggressive">
                            <code>return Anonymous.NoDomainAccounting;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>Anonymous.NoDomainAccounting = value;
        </code>
                        </set>
                    </field>
                    <field name="IncreasePolicy" access="public">
                        <type native="">byte</type>
                        <get inlining="aggressive">
                            <code>return Anonymous.IncreasePolicy;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>Anonymous.IncreasePolicy = value;
        </code>
                        </set>
                    </field>
                    <field name="DecreasePolicy" access="public">
                        <type native="">byte</type>
                        <get inlining="aggressive">
                            <code>return Anonymous.DecreasePolicy;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>Anonymous.DecreasePolicy = value;
        </code>
                        </set>
                    </field>
                    <field name="Reserved" access="public">
                        <type native="">byte</type>
                        <get inlining="aggressive">
                            <code>return Anonymous.Reserved;
        </code>
                        </get>
                        <set inlining="aggressive">
                            <code>Anonymous.Reserved = value;
        </code>
                        </set>
                    </field>
                    <struct name="_Anonymous_e__Struct" access="public">
                        <field name="_bitfield" access="public">
                            <type native="">byte</type>
                        </field>
                        <field name="NoDomainAccounting" access="public">
                            <type native="BYTE : 1">byte</type>
                            <get inlining="aggressive">
                                <code>return (<typeName>byte</typeName>)(<bitfieldName>_bitfield</bitfieldName> &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>);
        </code>
                            </get>
                            <set inlining="aggressive">
                                <code>
                                    <bitfieldName>_bitfield</bitfieldName> = (<typeNameBacking>byte</typeNameBacking>)((_bitfield &amp; ~0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>) | (value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>));
        </code>
                            </set>
                        </field>
                        <field name="IncreasePolicy" access="public">
                            <type native="BYTE : 2">byte</type>
                            <get inlining="aggressive">
                                <code>return (<typeName>byte</typeName>)((<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>1</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>3u</bitwidthHexStringBacking>);
        </code>
                            </get>
                            <set inlining="aggressive">
                                <code>
                                    <bitfieldName>_bitfield</bitfieldName> = (<typeNameBacking>byte</typeNameBacking>)((_bitfield &amp; ~(0x<bitwidthHexStringBacking>3u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>1</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>3u</bitwidthHexString>) &lt;&lt; 1));
        </code>
                            </set>
                        </field>
                        <field name="DecreasePolicy" access="public">
                            <type native="BYTE : 2">byte</type>
                            <get inlining="aggressive">
                                <code>return (<typeName>byte</typeName>)((<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>3</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>3u</bitwidthHexStringBacking>);
        </code>
                            </get>
                            <set inlining="aggressive">
                                <code>
                                    <bitfieldName>_bitfield</bitfieldName> = (<typeNameBacking>byte</typeNameBacking>)((_bitfield &amp; ~(0x<bitwidthHexStringBacking>3u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>3</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>3u</bitwidthHexString>) &lt;&lt; 3));
        </code>
                            </set>
                        </field>
                        <field name="Reserved" access="public">
                            <type native="BYTE : 3">byte</type>
                            <get inlining="aggressive">
                                <code>return (<typeName>byte</typeName>)((<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>5</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>7u</bitwidthHexStringBacking>);
        </code>
                            </get>
                            <set inlining="aggressive">
                                <code>
                                    <bitfieldName>_bitfield</bitfieldName> = (<typeNameBacking>byte</typeNameBacking>)((_bitfield &amp; ~(0x<bitwidthHexStringBacking>7u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>5</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>7u</bitwidthHexString>) &lt;&lt; 5));
        </code>
                            </set>
                        </field>
                    </struct>
                </struct>
            </struct>
        </struct>
    </namespace>
</bindings>
