<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/winnt.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA" access="public" layout="Explicit">
            <field name="HeaderData" access="public" offset="0">
                <type native="DWORD">uint</type>
            </field>
            <field name="Anonymous" access="public" offset="0">
                <type native="IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA::(anonymous struct at C:/Program Files (x86)/Windows Kits/10/Include/10.0.19041.0/um/winnt.h:18830:5)">_Anonymous_e__Struct</type>
            </field>
            <field name="FunctionLength" access="public">
                <type native="">uint</type>
                <get inlining="aggressive">
                    <code>return Anonymous.FunctionLength;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous.FunctionLength = value;
        </code>
                </set>
            </field>
            <field name="Version" access="public">
                <type native="">uint</type>
                <get inlining="aggressive">
                    <code>return Anonymous.Version;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous.Version = value;
        </code>
                </set>
            </field>
            <field name="ExceptionDataPresent" access="public">
                <type native="">uint</type>
                <get inlining="aggressive">
                    <code>return Anonymous.ExceptionDataPresent;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous.ExceptionDataPresent = value;
        </code>
                </set>
            </field>
            <field name="EpilogInHeader" access="public">
                <type native="">uint</type>
                <get inlining="aggressive">
                    <code>return Anonymous.EpilogInHeader;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous.EpilogInHeader = value;
        </code>
                </set>
            </field>
            <field name="EpilogCount" access="public">
                <type native="">uint</type>
                <get inlining="aggressive">
                    <code>return Anonymous.EpilogCount;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous.EpilogCount = value;
        </code>
                </set>
            </field>
            <field name="CodeWords" access="public">
                <type native="">uint</type>
                <get inlining="aggressive">
                    <code>return Anonymous.CodeWords;
        </code>
                </get>
                <set inlining="aggressive">
                    <code>Anonymous.CodeWords = value;
        </code>
                </set>
            </field>
            <struct name="_Anonymous_e__Struct" access="public">
                <field name="_bitfield" access="public">
                    <type native="">uint</type>
                </field>
                <field name="FunctionLength" access="public">
                    <type native="DWORD : 18">uint</type>
                    <get inlining="aggressive">
                        <code>return <bitfieldName>_bitfield</bitfieldName> &amp; 0x<bitwidthHexStringBacking>3FFFFu</bitwidthHexStringBacking>;
        </code>
                    </get>
                    <set inlining="aggressive">
                        <code>
                            <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~0x<bitwidthHexStringBacking>3FFFFu</bitwidthHexStringBacking>) | (value &amp; 0x<bitwidthHexString>3FFFFu</bitwidthHexString>);
        </code>
                    </set>
                </field>
                <field name="Version" access="public">
                    <type native="DWORD : 2">uint</type>
                    <get inlining="aggressive">
                        <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>18</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>3u</bitwidthHexStringBacking>;
        </code>
                    </get>
                    <set inlining="aggressive">
                        <code>
                            <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>3u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>18</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>3u</bitwidthHexString>) &lt;&lt; 18);
        </code>
                    </set>
                </field>
                <field name="ExceptionDataPresent" access="public">
                    <type native="DWORD : 1">uint</type>
                    <get inlining="aggressive">
                        <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>20</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>;
        </code>
                    </get>
                    <set inlining="aggressive">
                        <code>
                            <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>20</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>) &lt;&lt; 20);
        </code>
                    </set>
                </field>
                <field name="EpilogInHeader" access="public">
                    <type native="DWORD : 1">uint</type>
                    <get inlining="aggressive">
                        <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>21</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking>;
        </code>
                    </get>
                    <set inlining="aggressive">
                        <code>
                            <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>1u</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>21</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>1u</bitwidthHexString>) &lt;&lt; 21);
        </code>
                    </set>
                </field>
                <field name="EpilogCount" access="public">
                    <type native="DWORD : 5">uint</type>
                    <get inlining="aggressive">
                        <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>22</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>1Fu</bitwidthHexStringBacking>;
        </code>
                    </get>
                    <set inlining="aggressive">
                        <code>
                            <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>1Fu</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>22</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>1Fu</bitwidthHexString>) &lt;&lt; 22);
        </code>
                    </set>
                </field>
                <field name="CodeWords" access="public">
                    <type native="DWORD : 5">uint</type>
                    <get inlining="aggressive">
                        <code>return (<bitfieldName>_bitfield</bitfieldName> &gt;&gt; <bitfieldOffset>27</bitfieldOffset>) &amp; 0x<bitwidthHexStringBacking>1Fu</bitwidthHexStringBacking>;
        </code>
                    </get>
                    <set inlining="aggressive">
                        <code>
                            <bitfieldName>_bitfield</bitfieldName> = (_bitfield &amp; ~(0x<bitwidthHexStringBacking>1Fu</bitwidthHexStringBacking> &lt;&lt; <bitfieldOffset>27</bitfieldOffset>)) | ((value &amp; 0x<bitwidthHexString>1Fu</bitwidthHexString>) &lt;&lt; 27);
        </code>
                    </set>
                </field>
            </struct>
        </struct>
    </namespace>
</bindings>
