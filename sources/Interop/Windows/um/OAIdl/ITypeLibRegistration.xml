<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/OAIdl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ITypeLibRegistration" access="public" native="struct ITypeLibRegistration : IUnknown" uuid="76a3e735-02df-4a12-98eb-043ad3600af3" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLibRegistration*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ITypeLibRegistration*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLibRegistration*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ITypeLibRegistration*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLibRegistration*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ITypeLibRegistration*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetGuid" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pGuid">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLibRegistration*, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ITypeLibRegistration*)Unsafe.AsPointer(ref this)</param>, <param name="pGuid">pGuid</param>);
        </code>
                </body>
            </function>
            <function name="GetVersion" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pVersion">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLibRegistration*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ITypeLibRegistration*)Unsafe.AsPointer(ref this)</param>, <param name="pVersion">pVersion</param>);
        </code>
                </body>
            </function>
            <function name="GetLcid" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pLcid">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLibRegistration*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ITypeLibRegistration*)Unsafe.AsPointer(ref this)</param>, <param name="pLcid">pLcid</param>);
        </code>
                </body>
            </function>
            <function name="GetWin32Path" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pWin32Path">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLibRegistration*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ITypeLibRegistration*)Unsafe.AsPointer(ref this)</param>, <param name="pWin32Path">pWin32Path</param>);
        </code>
                </body>
            </function>
            <function name="GetWin64Path" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pWin64Path">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLibRegistration*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ITypeLibRegistration*)Unsafe.AsPointer(ref this)</param>, <param name="pWin64Path">pWin64Path</param>);
        </code>
                </body>
            </function>
            <function name="GetDisplayName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDisplayName">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLibRegistration*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ITypeLibRegistration*)Unsafe.AsPointer(ref this)</param>, <param name="pDisplayName">pDisplayName</param>);
        </code>
                </body>
            </function>
            <function name="GetFlags" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pFlags">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLibRegistration*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ITypeLibRegistration*)Unsafe.AsPointer(ref this)</param>, <param name="pFlags">pFlags</param>);
        </code>
                </body>
            </function>
            <function name="GetHelpDir" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pHelpDir">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLibRegistration*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ITypeLibRegistration*)Unsafe.AsPointer(ref this)</param>, <param name="pHelpDir">pHelpDir</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
