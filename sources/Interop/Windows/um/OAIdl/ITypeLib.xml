<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/OAIdl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ITypeLib" access="public" native="struct ITypeLib : IUnknown" uuid="00020402-0000-0000-c000-000000000046" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLib*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ITypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLib*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ITypeLib*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLib*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ITypeLib*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetTypeInfoCount" access="public" unsafe="true">
                <type native="UINT">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLib*, uint&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ITypeLib*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetTypeInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="index">
                    <type>uint</type>
                </param>
                <param name="ppTInfo">
                    <type>ITypeInfo**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLib*, uint, ITypeInfo**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ITypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>, <param name="ppTInfo">ppTInfo</param>);
        </code>
                </body>
            </function>
            <function name="GetTypeInfoType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="index">
                    <type>uint</type>
                </param>
                <param name="pTKind">
                    <type>TYPEKIND*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLib*, uint, TYPEKIND*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ITypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>, <param name="pTKind">pTKind</param>);
        </code>
                </body>
            </function>
            <function name="GetTypeInfoOfGuid" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="guid">
                    <type>Guid*</type>
                </param>
                <param name="ppTinfo">
                    <type>ITypeInfo**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLib*, Guid*, ITypeInfo**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ITypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="guid">guid</param>, <param name="ppTinfo">ppTinfo</param>);
        </code>
                </body>
            </function>
            <function name="GetLibAttr" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppTLibAttr">
                    <type>TLIBATTR**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLib*, TLIBATTR**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ITypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="ppTLibAttr">ppTLibAttr</param>);
        </code>
                </body>
            </function>
            <function name="GetTypeComp" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppTComp">
                    <type>ITypeComp**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLib*, ITypeComp**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ITypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="ppTComp">ppTComp</param>);
        </code>
                </body>
            </function>
            <function name="GetDocumentation" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="index">
                    <type>int</type>
                </param>
                <param name="pBstrName">
                    <type>ushort**</type>
                </param>
                <param name="pBstrDocString">
                    <type>ushort**</type>
                </param>
                <param name="pdwHelpContext">
                    <type>uint*</type>
                </param>
                <param name="pBstrHelpFile">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLib*, int, ushort**, ushort**, uint*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ITypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>, <param name="pBstrName">pBstrName</param>, <param name="pBstrDocString">pBstrDocString</param>, <param name="pdwHelpContext">pdwHelpContext</param>, <param name="pBstrHelpFile">pBstrHelpFile</param>);
        </code>
                </body>
            </function>
            <function name="IsName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="szNameBuf">
                    <type>ushort*</type>
                </param>
                <param name="lHashVal">
                    <type>uint</type>
                </param>
                <param name="pfName">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLib*, ushort*, uint, int*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ITypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="szNameBuf">szNameBuf</param>, <param name="lHashVal">lHashVal</param>, <param name="pfName">pfName</param>);
        </code>
                </body>
            </function>
            <function name="FindName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="szNameBuf">
                    <type>ushort*</type>
                </param>
                <param name="lHashVal">
                    <type>uint</type>
                </param>
                <param name="ppTInfo">
                    <type>ITypeInfo**</type>
                </param>
                <param name="rgMemId">
                    <type>int*</type>
                </param>
                <param name="pcFound">
                    <type>ushort*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeLib*, ushort*, uint, ITypeInfo**, int*, ushort*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ITypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="szNameBuf">szNameBuf</param>, <param name="lHashVal">lHashVal</param>, <param name="ppTInfo">ppTInfo</param>, <param name="rgMemId">rgMemId</param>, <param name="pcFound">pcFound</param>);
        </code>
                </body>
            </function>
            <function name="ReleaseTLibAttr" access="public" unsafe="true">
                <type>void</type>
                <param name="pTLibAttr">
                    <type>TLIBATTR*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ITypeLib*, TLIBATTR*, void&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ITypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="pTLibAttr">pTLibAttr</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
