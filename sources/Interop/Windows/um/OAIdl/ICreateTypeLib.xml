<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/OAIdl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ICreateTypeLib" access="public" native="struct ICreateTypeLib : IUnknown" uuid="00020406-0000-0000-c000-000000000046" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICreateTypeLib*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ICreateTypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICreateTypeLib*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ICreateTypeLib*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICreateTypeLib*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ICreateTypeLib*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="CreateTypeInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="szName">
                    <type>ushort*</type>
                </param>
                <param name="tkind">
                    <type>TYPEKIND</type>
                </param>
                <param name="ppCTInfo">
                    <type>ICreateTypeInfo**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICreateTypeLib*, ushort*, TYPEKIND, ICreateTypeInfo**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ICreateTypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="szName">szName</param>, <param name="tkind">tkind</param>, <param name="ppCTInfo">ppCTInfo</param>);
        </code>
                </body>
            </function>
            <function name="SetName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="szName">
                    <type>ushort*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICreateTypeLib*, ushort*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ICreateTypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="szName">szName</param>);
        </code>
                </body>
            </function>
            <function name="SetVersion" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="wMajorVerNum">
                    <type>ushort</type>
                </param>
                <param name="wMinorVerNum">
                    <type>ushort</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICreateTypeLib*, ushort, ushort, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ICreateTypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="wMajorVerNum">wMajorVerNum</param>, <param name="wMinorVerNum">wMinorVerNum</param>);
        </code>
                </body>
            </function>
            <function name="SetGuid" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="guid">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICreateTypeLib*, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ICreateTypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="guid">guid</param>);
        </code>
                </body>
            </function>
            <function name="SetDocString" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="szDoc">
                    <type>ushort*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICreateTypeLib*, ushort*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ICreateTypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="szDoc">szDoc</param>);
        </code>
                </body>
            </function>
            <function name="SetHelpFileName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="szHelpFileName">
                    <type>ushort*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICreateTypeLib*, ushort*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ICreateTypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="szHelpFileName">szHelpFileName</param>);
        </code>
                </body>
            </function>
            <function name="SetHelpContext" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwHelpContext">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICreateTypeLib*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ICreateTypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="dwHelpContext">dwHelpContext</param>);
        </code>
                </body>
            </function>
            <function name="SetLcid" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="lcid">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICreateTypeLib*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ICreateTypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="lcid">lcid</param>);
        </code>
                </body>
            </function>
            <function name="SetLibFlags" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="uLibFlags">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICreateTypeLib*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ICreateTypeLib*)Unsafe.AsPointer(ref this)</param>, <param name="uLibFlags">uLibFlags</param>);
        </code>
                </body>
            </function>
            <function name="SaveAllChanges" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICreateTypeLib*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ICreateTypeLib*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
