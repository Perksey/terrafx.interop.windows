<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/OAIdl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IRecordInfo" access="public" native="struct IRecordInfo : IUnknown" uuid="0000002f-0000-0000-c000-000000000046" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="RecordInit" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pvNew">
                    <type>void*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, void*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>, <param name="pvNew">pvNew</param>);
        </code>
                </body>
            </function>
            <function name="RecordClear" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pvExisting">
                    <type>void*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, void*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>, <param name="pvExisting">pvExisting</param>);
        </code>
                </body>
            </function>
            <function name="RecordCopy" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pvExisting">
                    <type>void*</type>
                </param>
                <param name="pvNew">
                    <type>void*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, void*, void*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>, <param name="pvExisting">pvExisting</param>, <param name="pvNew">pvNew</param>);
        </code>
                </body>
            </function>
            <function name="GetGuid" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pguid">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>, <param name="pguid">pguid</param>);
        </code>
                </body>
            </function>
            <function name="GetName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pbstrName">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>, <param name="pbstrName">pbstrName</param>);
        </code>
                </body>
            </function>
            <function name="GetSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pcbSize">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>, <param name="pcbSize">pcbSize</param>);
        </code>
                </body>
            </function>
            <function name="GetTypeInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppTypeInfo">
                    <type>ITypeInfo**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, ITypeInfo**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>, <param name="ppTypeInfo">ppTypeInfo</param>);
        </code>
                </body>
            </function>
            <function name="GetField" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pvData">
                    <type>void*</type>
                </param>
                <param name="szFieldName">
                    <type>ushort*</type>
                </param>
                <param name="pvarField">
                    <type>VARIANT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, void*, ushort*, VARIANT*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>, <param name="pvData">pvData</param>, <param name="szFieldName">szFieldName</param>, <param name="pvarField">pvarField</param>);
        </code>
                </body>
            </function>
            <function name="GetFieldNoCopy" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pvData">
                    <type>void*</type>
                </param>
                <param name="szFieldName">
                    <type>ushort*</type>
                </param>
                <param name="pvarField">
                    <type>VARIANT*</type>
                </param>
                <param name="ppvDataCArray">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, void*, ushort*, VARIANT*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>, <param name="pvData">pvData</param>, <param name="szFieldName">szFieldName</param>, <param name="pvarField">pvarField</param>, <param name="ppvDataCArray">ppvDataCArray</param>);
        </code>
                </body>
            </function>
            <function name="PutField" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="wFlags">
                    <type>uint</type>
                </param>
                <param name="pvData">
                    <type>void*</type>
                </param>
                <param name="szFieldName">
                    <type>ushort*</type>
                </param>
                <param name="pvarField">
                    <type>VARIANT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, uint, void*, ushort*, VARIANT*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>, <param name="wFlags">wFlags</param>, <param name="pvData">pvData</param>, <param name="szFieldName">szFieldName</param>, <param name="pvarField">pvarField</param>);
        </code>
                </body>
            </function>
            <function name="PutFieldNoCopy" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="wFlags">
                    <type>uint</type>
                </param>
                <param name="pvData">
                    <type>void*</type>
                </param>
                <param name="szFieldName">
                    <type>ushort*</type>
                </param>
                <param name="pvarField">
                    <type>VARIANT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, uint, void*, ushort*, VARIANT*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>, <param name="wFlags">wFlags</param>, <param name="pvData">pvData</param>, <param name="szFieldName">szFieldName</param>, <param name="pvarField">pvarField</param>);
        </code>
                </body>
            </function>
            <function name="GetFieldNames" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pcNames">
                    <type>uint*</type>
                </param>
                <param name="rgBstrNames">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, uint*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>, <param name="pcNames">pcNames</param>, <param name="rgBstrNames">rgBstrNames</param>);
        </code>
                </body>
            </function>
            <function name="IsMatchingType" access="public" unsafe="true">
                <type native="BOOL">int</type>
                <param name="pRecordInfo">
                    <type>IRecordInfo*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, IRecordInfo*, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>, <param name="pRecordInfo">pRecordInfo</param>);
        </code>
                </body>
            </function>
            <function name="RecordCreate" access="public" unsafe="true">
                <type native="PVOID">void*</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, void*&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="RecordCreateCopy" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pvSource">
                    <type>void*</type>
                </param>
                <param name="ppvDest">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, void*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>, <param name="pvSource">pvSource</param>, <param name="ppvDest">ppvDest</param>);
        </code>
                </body>
            </function>
            <function name="RecordDestroy" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pvRecord">
                    <type>void*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRecordInfo*, void*, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(IRecordInfo*)Unsafe.AsPointer(ref this)</param>, <param name="pvRecord">pvRecord</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
