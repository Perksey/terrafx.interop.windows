<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/OAIdl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ITypeInfo" access="public" native="struct ITypeInfo : IUnknown" uuid="00020401-0000-0000-c000-000000000046" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetTypeAttr" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppTypeAttr">
                    <type>TYPEATTR**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, TYPEATTR**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="ppTypeAttr">ppTypeAttr</param>);
        </code>
                </body>
            </function>
            <function name="GetTypeComp" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppTComp">
                    <type>ITypeComp**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, ITypeComp**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="ppTComp">ppTComp</param>);
        </code>
                </body>
            </function>
            <function name="GetFuncDesc" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="index">
                    <type>uint</type>
                </param>
                <param name="ppFuncDesc">
                    <type>FUNCDESC**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, uint, FUNCDESC**, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>, <param name="ppFuncDesc">ppFuncDesc</param>);
        </code>
                </body>
            </function>
            <function name="GetVarDesc" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="index">
                    <type>uint</type>
                </param>
                <param name="ppVarDesc">
                    <type>VARDESC**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, uint, VARDESC**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>, <param name="ppVarDesc">ppVarDesc</param>);
        </code>
                </body>
            </function>
            <function name="GetNames" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="memid">
                    <type>int</type>
                </param>
                <param name="rgBstrNames">
                    <type>ushort**</type>
                </param>
                <param name="cMaxNames">
                    <type>uint</type>
                </param>
                <param name="pcNames">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, int, ushort**, uint, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="memid">memid</param>, <param name="rgBstrNames">rgBstrNames</param>, <param name="cMaxNames">cMaxNames</param>, <param name="pcNames">pcNames</param>);
        </code>
                </body>
            </function>
            <function name="GetRefTypeOfImplType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="index">
                    <type>uint</type>
                </param>
                <param name="pRefType">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, uint, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>, <param name="pRefType">pRefType</param>);
        </code>
                </body>
            </function>
            <function name="GetImplTypeFlags" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="index">
                    <type>uint</type>
                </param>
                <param name="pImplTypeFlags">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, uint, int*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>, <param name="pImplTypeFlags">pImplTypeFlags</param>);
        </code>
                </body>
            </function>
            <function name="GetIDsOfNames" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="rgszNames">
                    <type>ushort**</type>
                </param>
                <param name="cNames">
                    <type>uint</type>
                </param>
                <param name="pMemId">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, ushort**, uint, int*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="rgszNames">rgszNames</param>, <param name="cNames">cNames</param>, <param name="pMemId">pMemId</param>);
        </code>
                </body>
            </function>
            <function name="Invoke" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pvInstance">
                    <type>void*</type>
                </param>
                <param name="memid">
                    <type>int</type>
                </param>
                <param name="wFlags">
                    <type>ushort</type>
                </param>
                <param name="pDispParams">
                    <type>DISPPARAMS*</type>
                </param>
                <param name="pVarResult">
                    <type>VARIANT*</type>
                </param>
                <param name="pExcepInfo">
                    <type>EXCEPINFO*</type>
                </param>
                <param name="puArgErr">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, void*, int, ushort, DISPPARAMS*, VARIANT*, EXCEPINFO*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="pvInstance">pvInstance</param>, <param name="memid">memid</param>, <param name="wFlags">wFlags</param>, <param name="pDispParams">pDispParams</param>, <param name="pVarResult">pVarResult</param>, <param name="pExcepInfo">pExcepInfo</param>, <param name="puArgErr">puArgErr</param>);
        </code>
                </body>
            </function>
            <function name="GetDocumentation" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="memid">
                    <type>int</type>
                </param>
                <param name="pBstrName">
                    <type>ushort**</type>
                </param>
                <param name="pBstrDocString">
                    <type>ushort**</type>
                </param>
                <param name="pdwHelpContext">
                    <type>uint*</type>
                </param>
                <param name="pBstrHelpFile">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, int, ushort**, ushort**, uint*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="memid">memid</param>, <param name="pBstrName">pBstrName</param>, <param name="pBstrDocString">pBstrDocString</param>, <param name="pdwHelpContext">pdwHelpContext</param>, <param name="pBstrHelpFile">pBstrHelpFile</param>);
        </code>
                </body>
            </function>
            <function name="GetDllEntry" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="memid">
                    <type>int</type>
                </param>
                <param name="invKind">
                    <type>INVOKEKIND</type>
                </param>
                <param name="pBstrDllName">
                    <type>ushort**</type>
                </param>
                <param name="pBstrName">
                    <type>ushort**</type>
                </param>
                <param name="pwOrdinal">
                    <type>ushort*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, int, INVOKEKIND, ushort**, ushort**, ushort*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="memid">memid</param>, <param name="invKind">invKind</param>, <param name="pBstrDllName">pBstrDllName</param>, <param name="pBstrName">pBstrName</param>, <param name="pwOrdinal">pwOrdinal</param>);
        </code>
                </body>
            </function>
            <function name="GetRefTypeInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="hRefType">
                    <type>uint</type>
                </param>
                <param name="ppTInfo">
                    <type>ITypeInfo**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, uint, ITypeInfo**, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="hRefType">hRefType</param>, <param name="ppTInfo">ppTInfo</param>);
        </code>
                </body>
            </function>
            <function name="AddressOfMember" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="memid">
                    <type>int</type>
                </param>
                <param name="invKind">
                    <type>INVOKEKIND</type>
                </param>
                <param name="ppv">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, int, INVOKEKIND, void**, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="memid">memid</param>, <param name="invKind">invKind</param>, <param name="ppv">ppv</param>);
        </code>
                </body>
            </function>
            <function name="CreateInstance" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pUnkOuter">
                    <type>IUnknown*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObj">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, IUnknown*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="pUnkOuter">pUnkOuter</param>, <param name="riid">riid</param>, <param name="ppvObj">ppvObj</param>);
        </code>
                </body>
            </function>
            <function name="GetMops" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="memid">
                    <type>int</type>
                </param>
                <param name="pBstrMops">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, int, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="memid">memid</param>, <param name="pBstrMops">pBstrMops</param>);
        </code>
                </body>
            </function>
            <function name="GetContainingTypeLib" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppTLib">
                    <type>ITypeLib**</type>
                </param>
                <param name="pIndex">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ITypeInfo*, ITypeLib**, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="ppTLib">ppTLib</param>, <param name="pIndex">pIndex</param>);
        </code>
                </body>
            </function>
            <function name="ReleaseTypeAttr" access="public" unsafe="true">
                <type>void</type>
                <param name="pTypeAttr">
                    <type>TYPEATTR*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ITypeInfo*, TYPEATTR*, void&gt;)(lpVtbl[<vtbl explicit="False">19</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="pTypeAttr">pTypeAttr</param>);
        </code>
                </body>
            </function>
            <function name="ReleaseFuncDesc" access="public" unsafe="true">
                <type>void</type>
                <param name="pFuncDesc">
                    <type>FUNCDESC*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ITypeInfo*, FUNCDESC*, void&gt;)(lpVtbl[<vtbl explicit="False">20</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="pFuncDesc">pFuncDesc</param>);
        </code>
                </body>
            </function>
            <function name="ReleaseVarDesc" access="public" unsafe="true">
                <type>void</type>
                <param name="pVarDesc">
                    <type>VARDESC*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ITypeInfo*, VARDESC*, void&gt;)(lpVtbl[<vtbl explicit="False">21</vtbl>]))(<param special="thisPtr">(ITypeInfo*)Unsafe.AsPointer(ref this)</param>, <param name="pVarDesc">pVarDesc</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
