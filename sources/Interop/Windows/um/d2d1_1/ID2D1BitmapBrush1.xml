<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d2d1_1.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ID2D1BitmapBrush1" access="public" native="struct ID2D1BitmapBrush1 : ID2D1BitmapBrush" uuid="41343a53-e41a-49a2-91cd-21793bbb62e5" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1BitmapBrush1*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ID2D1BitmapBrush1*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1BitmapBrush1*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ID2D1BitmapBrush1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1BitmapBrush1*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ID2D1BitmapBrush1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetFactory" access="public" unsafe="true">
                <type>void</type>
                <param name="factory">
                    <type>ID2D1Factory**</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1BitmapBrush1*, ID2D1Factory**, void&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ID2D1BitmapBrush1*)Unsafe.AsPointer(ref this)</param>, <param name="factory">factory</param>);
        </code>
                </body>
            </function>
            <function name="SetOpacity" access="public" unsafe="true">
                <type>void</type>
                <param name="opacity">
                    <type>float</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1BitmapBrush1*, float, void&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ID2D1BitmapBrush1*)Unsafe.AsPointer(ref this)</param>, <param name="opacity">opacity</param>);
        </code>
                </body>
            </function>
            <function name="SetTransform" access="public" unsafe="true">
                <type>void</type>
                <param name="transform">
                    <type>D2D_MATRIX_3X2_F*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1BitmapBrush1*, D2D_MATRIX_3X2_F*, void&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ID2D1BitmapBrush1*)Unsafe.AsPointer(ref this)</param>, <param name="transform">transform</param>);
        </code>
                </body>
            </function>
            <function name="GetOpacity" access="public" unsafe="true">
                <type native="FLOAT">float</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1BitmapBrush1*, float&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ID2D1BitmapBrush1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetTransform" access="public" unsafe="true">
                <type>void</type>
                <param name="transform">
                    <type>D2D_MATRIX_3X2_F*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1BitmapBrush1*, D2D_MATRIX_3X2_F*, void&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ID2D1BitmapBrush1*)Unsafe.AsPointer(ref this)</param>, <param name="transform">transform</param>);
        </code>
                </body>
            </function>
            <function name="SetExtendModeX" access="public" unsafe="true">
                <type>void</type>
                <param name="extendModeX">
                    <type>D2D1_EXTEND_MODE</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1BitmapBrush1*, D2D1_EXTEND_MODE, void&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ID2D1BitmapBrush1*)Unsafe.AsPointer(ref this)</param>, <param name="extendModeX">extendModeX</param>);
        </code>
                </body>
            </function>
            <function name="SetExtendModeY" access="public" unsafe="true">
                <type>void</type>
                <param name="extendModeY">
                    <type>D2D1_EXTEND_MODE</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1BitmapBrush1*, D2D1_EXTEND_MODE, void&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ID2D1BitmapBrush1*)Unsafe.AsPointer(ref this)</param>, <param name="extendModeY">extendModeY</param>);
        </code>
                </body>
            </function>
            <function name="SetInterpolationMode" access="public" unsafe="true">
                <type>void</type>
                <param name="interpolationMode">
                    <type>D2D1_BITMAP_INTERPOLATION_MODE</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1BitmapBrush1*, D2D1_BITMAP_INTERPOLATION_MODE, void&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ID2D1BitmapBrush1*)Unsafe.AsPointer(ref this)</param>, <param name="interpolationMode">interpolationMode</param>);
        </code>
                </body>
            </function>
            <function name="SetBitmap" access="public" unsafe="true">
                <type>void</type>
                <param name="bitmap">
                    <type>ID2D1Bitmap*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1BitmapBrush1*, ID2D1Bitmap*, void&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ID2D1BitmapBrush1*)Unsafe.AsPointer(ref this)</param>, <param name="bitmap">bitmap</param>);
        </code>
                </body>
            </function>
            <function name="GetExtendModeX" access="public" unsafe="true">
                <type>D2D1_EXTEND_MODE</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1BitmapBrush1*, D2D1_EXTEND_MODE&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ID2D1BitmapBrush1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetExtendModeY" access="public" unsafe="true">
                <type>D2D1_EXTEND_MODE</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1BitmapBrush1*, D2D1_EXTEND_MODE&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(ID2D1BitmapBrush1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetInterpolationMode" access="public" unsafe="true">
                <type>D2D1_BITMAP_INTERPOLATION_MODE</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1BitmapBrush1*, D2D1_BITMAP_INTERPOLATION_MODE&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(ID2D1BitmapBrush1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetBitmap" access="public" unsafe="true">
                <type>void</type>
                <param name="bitmap">
                    <type>ID2D1Bitmap**</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1BitmapBrush1*, ID2D1Bitmap**, void&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(ID2D1BitmapBrush1*)Unsafe.AsPointer(ref this)</param>, <param name="bitmap">bitmap</param>);
        </code>
                </body>
            </function>
            <function name="SetInterpolationMode1" access="public" unsafe="true">
                <type>void</type>
                <param name="interpolationMode">
                    <type>D2D1_INTERPOLATION_MODE</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1BitmapBrush1*, D2D1_INTERPOLATION_MODE, void&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(ID2D1BitmapBrush1*)Unsafe.AsPointer(ref this)</param>, <param name="interpolationMode">interpolationMode</param>);
        </code>
                </body>
            </function>
            <function name="GetInterpolationMode1" access="public" unsafe="true">
                <type>D2D1_INTERPOLATION_MODE</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1BitmapBrush1*, D2D1_INTERPOLATION_MODE&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(ID2D1BitmapBrush1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
