<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d2d1_1.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ID2D1Bitmap1" access="public" native="struct ID2D1Bitmap1 : ID2D1Bitmap" uuid="a898a84c-3873-4588-b08b-ebbf978df041" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Bitmap1*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ID2D1Bitmap1*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Bitmap1*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ID2D1Bitmap1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Bitmap1*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ID2D1Bitmap1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetFactory" access="public" unsafe="true">
                <type>void</type>
                <param name="factory">
                    <type>ID2D1Factory**</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1Bitmap1*, ID2D1Factory**, void&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ID2D1Bitmap1*)Unsafe.AsPointer(ref this)</param>, <param name="factory">factory</param>);
        </code>
                </body>
            </function>
            <function name="GetSize" access="public" unsafe="true">
                <type native="D2D1_SIZE_F">D2D_SIZE_F</type>
                <body>
                    <code>
                        <fixup type="*result">D2D_SIZE_F</fixup> result;
        return *((delegate* unmanaged&lt;ID2D1Bitmap1*, D2D_SIZE_F*, D2D_SIZE_F*&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ID2D1Bitmap1*)Unsafe.AsPointer(ref this)</param><param special="retFixup">, &amp;result</param>);
        </code>
                </body>
            </function>
            <function name="GetPixelSize" access="public" unsafe="true">
                <type native="D2D1_SIZE_U">D2D_SIZE_U</type>
                <body>
                    <code>
                        <fixup type="*result">D2D_SIZE_U</fixup> result;
        return *((delegate* unmanaged&lt;ID2D1Bitmap1*, D2D_SIZE_U*, D2D_SIZE_U*&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ID2D1Bitmap1*)Unsafe.AsPointer(ref this)</param><param special="retFixup">, &amp;result</param>);
        </code>
                </body>
            </function>
            <function name="GetPixelFormat" access="public" unsafe="true">
                <type>D2D1_PIXEL_FORMAT</type>
                <body>
                    <code>
                        <fixup type="*result">D2D1_PIXEL_FORMAT</fixup> result;
        return *((delegate* unmanaged&lt;ID2D1Bitmap1*, D2D1_PIXEL_FORMAT*, D2D1_PIXEL_FORMAT*&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ID2D1Bitmap1*)Unsafe.AsPointer(ref this)</param><param special="retFixup">, &amp;result</param>);
        </code>
                </body>
            </function>
            <function name="GetDpi" access="public" unsafe="true">
                <type>void</type>
                <param name="dpiX">
                    <type>float*</type>
                </param>
                <param name="dpiY">
                    <type>float*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1Bitmap1*, float*, float*, void&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ID2D1Bitmap1*)Unsafe.AsPointer(ref this)</param>, <param name="dpiX">dpiX</param>, <param name="dpiY">dpiY</param>);
        </code>
                </body>
            </function>
            <function name="CopyFromBitmap" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="destPoint">
                    <type>D2D_POINT_2U*</type>
                </param>
                <param name="bitmap">
                    <type>ID2D1Bitmap*</type>
                </param>
                <param name="srcRect">
                    <type>D2D_RECT_U*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Bitmap1*, D2D_POINT_2U*, ID2D1Bitmap*, D2D_RECT_U*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ID2D1Bitmap1*)Unsafe.AsPointer(ref this)</param>, <param name="destPoint">destPoint</param>, <param name="bitmap">bitmap</param>, <param name="srcRect">srcRect</param>);
        </code>
                </body>
            </function>
            <function name="CopyFromRenderTarget" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="destPoint">
                    <type>D2D_POINT_2U*</type>
                </param>
                <param name="renderTarget">
                    <type>ID2D1RenderTarget*</type>
                </param>
                <param name="srcRect">
                    <type>D2D_RECT_U*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Bitmap1*, D2D_POINT_2U*, ID2D1RenderTarget*, D2D_RECT_U*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ID2D1Bitmap1*)Unsafe.AsPointer(ref this)</param>, <param name="destPoint">destPoint</param>, <param name="renderTarget">renderTarget</param>, <param name="srcRect">srcRect</param>);
        </code>
                </body>
            </function>
            <function name="CopyFromMemory" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dstRect">
                    <type>D2D_RECT_U*</type>
                </param>
                <param name="srcData">
                    <type>void*</type>
                </param>
                <param name="pitch">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Bitmap1*, D2D_RECT_U*, void*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ID2D1Bitmap1*)Unsafe.AsPointer(ref this)</param>, <param name="dstRect">dstRect</param>, <param name="srcData">srcData</param>, <param name="pitch">pitch</param>);
        </code>
                </body>
            </function>
            <function name="GetColorContext" access="public" unsafe="true">
                <type>void</type>
                <param name="colorContext">
                    <type>ID2D1ColorContext**</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1Bitmap1*, ID2D1ColorContext**, void&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ID2D1Bitmap1*)Unsafe.AsPointer(ref this)</param>, <param name="colorContext">colorContext</param>);
        </code>
                </body>
            </function>
            <function name="GetOptions" access="public" unsafe="true">
                <type>D2D1_BITMAP_OPTIONS</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Bitmap1*, D2D1_BITMAP_OPTIONS&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ID2D1Bitmap1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetSurface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dxgiSurface">
                    <type>IDXGISurface**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Bitmap1*, IDXGISurface**, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(ID2D1Bitmap1*)Unsafe.AsPointer(ref this)</param>, <param name="dxgiSurface">dxgiSurface</param>);
        </code>
                </body>
            </function>
            <function name="Map" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="options">
                    <type>D2D1_MAP_OPTIONS</type>
                </param>
                <param name="mappedRect">
                    <type>D2D1_MAPPED_RECT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Bitmap1*, D2D1_MAP_OPTIONS, D2D1_MAPPED_RECT*, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(ID2D1Bitmap1*)Unsafe.AsPointer(ref this)</param>, <param name="options">options</param>, <param name="mappedRect">mappedRect</param>);
        </code>
                </body>
            </function>
            <function name="Unmap" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1Bitmap1*, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(ID2D1Bitmap1*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
