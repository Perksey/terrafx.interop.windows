<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/urlmon.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IHttpNegotiate3" access="public" native="struct IHttpNegotiate3 : IHttpNegotiate2" uuid="57b6c80a-34c2-4602-bc26-66a02fc57153" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IHttpNegotiate3*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IHttpNegotiate3*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IHttpNegotiate3*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IHttpNegotiate3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IHttpNegotiate3*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IHttpNegotiate3*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="BeginningTransaction" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="szURL">
                    <type>ushort*</type>
                </param>
                <param name="szHeaders">
                    <type>ushort*</type>
                </param>
                <param name="dwReserved">
                    <type>uint</type>
                </param>
                <param name="pszAdditionalHeaders">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IHttpNegotiate3*, ushort*, ushort*, uint, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IHttpNegotiate3*)Unsafe.AsPointer(ref this)</param>, <param name="szURL">szURL</param>, <param name="szHeaders">szHeaders</param>, <param name="dwReserved">dwReserved</param>, <param name="pszAdditionalHeaders">pszAdditionalHeaders</param>);
        </code>
                </body>
            </function>
            <function name="OnResponse" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwResponseCode">
                    <type>uint</type>
                </param>
                <param name="szResponseHeaders">
                    <type>ushort*</type>
                </param>
                <param name="szRequestHeaders">
                    <type>ushort*</type>
                </param>
                <param name="pszAdditionalRequestHeaders">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IHttpNegotiate3*, uint, ushort*, ushort*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IHttpNegotiate3*)Unsafe.AsPointer(ref this)</param>, <param name="dwResponseCode">dwResponseCode</param>, <param name="szResponseHeaders">szResponseHeaders</param>, <param name="szRequestHeaders">szRequestHeaders</param>, <param name="pszAdditionalRequestHeaders">pszAdditionalRequestHeaders</param>);
        </code>
                </body>
            </function>
            <function name="GetRootSecurityId" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pbSecurityId">
                    <type>byte*</type>
                </param>
                <param name="pcbSecurityId">
                    <type>uint*</type>
                </param>
                <param name="dwReserved">
                    <type>nuint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IHttpNegotiate3*, byte*, uint*, nuint, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IHttpNegotiate3*)Unsafe.AsPointer(ref this)</param>, <param name="pbSecurityId">pbSecurityId</param>, <param name="pcbSecurityId">pcbSecurityId</param>, <param name="dwReserved">dwReserved</param>);
        </code>
                </body>
            </function>
            <function name="GetSerializedClientCertContext" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppbCert">
                    <type>byte**</type>
                </param>
                <param name="pcbCert">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IHttpNegotiate3*, byte**, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IHttpNegotiate3*)Unsafe.AsPointer(ref this)</param>, <param name="ppbCert">ppbCert</param>, <param name="pcbCert">pcbCert</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
