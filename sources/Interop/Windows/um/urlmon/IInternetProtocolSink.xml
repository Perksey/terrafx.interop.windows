<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/urlmon.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IInternetProtocolSink" access="public" native="struct IInternetProtocolSink : IUnknown" uuid="79eac9e5-baf9-11ce-8c82-00aa004ba90b" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IInternetProtocolSink*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IInternetProtocolSink*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IInternetProtocolSink*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IInternetProtocolSink*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IInternetProtocolSink*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IInternetProtocolSink*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Switch" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pProtocolData">
                    <type>PROTOCOLDATA*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IInternetProtocolSink*, PROTOCOLDATA*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IInternetProtocolSink*)Unsafe.AsPointer(ref this)</param>, <param name="pProtocolData">pProtocolData</param>);
        </code>
                </body>
            </function>
            <function name="ReportProgress" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ulStatusCode">
                    <type>uint</type>
                </param>
                <param name="szStatusText">
                    <type>ushort*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IInternetProtocolSink*, uint, ushort*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IInternetProtocolSink*)Unsafe.AsPointer(ref this)</param>, <param name="ulStatusCode">ulStatusCode</param>, <param name="szStatusText">szStatusText</param>);
        </code>
                </body>
            </function>
            <function name="ReportData" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="grfBSCF">
                    <type>uint</type>
                </param>
                <param name="ulProgress">
                    <type>uint</type>
                </param>
                <param name="ulProgressMax">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IInternetProtocolSink*, uint, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IInternetProtocolSink*)Unsafe.AsPointer(ref this)</param>, <param name="grfBSCF">grfBSCF</param>, <param name="ulProgress">ulProgress</param>, <param name="ulProgressMax">ulProgressMax</param>);
        </code>
                </body>
            </function>
            <function name="ReportResult" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="hrResult">
                    <type>int</type>
                </param>
                <param name="dwError">
                    <type>uint</type>
                </param>
                <param name="szResult">
                    <type>ushort*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IInternetProtocolSink*, int, uint, ushort*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IInternetProtocolSink*)Unsafe.AsPointer(ref this)</param>, <param name="hrResult">hrResult</param>, <param name="dwError">dwError</param>, <param name="szResult">szResult</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
