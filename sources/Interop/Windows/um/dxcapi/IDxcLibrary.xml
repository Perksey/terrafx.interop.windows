<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dxcapi.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved. Licensed under the University of Illinois Open Source License.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDxcLibrary" access="public" native="struct IDxcLibrary : IUnknown" uuid="e5204dc7-d18c-4c3c-bdfb-851673980fe7" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcLibrary*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDxcLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcLibrary*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDxcLibrary*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcLibrary*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDxcLibrary*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetMalloc" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pMalloc">
                    <type>IMalloc*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcLibrary*, IMalloc*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDxcLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="pMalloc">pMalloc</param>);
        </code>
                </body>
            </function>
            <function name="CreateBlobFromBlob" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pBlob">
                    <type>IDxcBlob*</type>
                </param>
                <param name="offset">
                    <type>uint</type>
                </param>
                <param name="length">
                    <type>uint</type>
                </param>
                <param name="ppResult">
                    <type>IDxcBlob**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcLibrary*, IDxcBlob*, uint, uint, IDxcBlob**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDxcLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="pBlob">pBlob</param>, <param name="offset">offset</param>, <param name="length">length</param>, <param name="ppResult">ppResult</param>);
        </code>
                </body>
            </function>
            <function name="CreateBlobFromFile" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pFileName">
                    <type>ushort*</type>
                </param>
                <param name="codePage">
                    <type>uint*</type>
                </param>
                <param name="pBlobEncoding">
                    <type>IDxcBlobEncoding**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcLibrary*, ushort*, uint*, IDxcBlobEncoding**, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDxcLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="pFileName">pFileName</param>, <param name="codePage">codePage</param>, <param name="pBlobEncoding">pBlobEncoding</param>);
        </code>
                </body>
            </function>
            <function name="CreateBlobWithEncodingFromPinned" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pText">
                    <type>void*</type>
                </param>
                <param name="size">
                    <type>uint</type>
                </param>
                <param name="codePage">
                    <type>uint</type>
                </param>
                <param name="pBlobEncoding">
                    <type>IDxcBlobEncoding**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcLibrary*, void*, uint, uint, IDxcBlobEncoding**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDxcLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="pText">pText</param>, <param name="size">size</param>, <param name="codePage">codePage</param>, <param name="pBlobEncoding">pBlobEncoding</param>);
        </code>
                </body>
            </function>
            <function name="CreateBlobWithEncodingOnHeapCopy" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pText">
                    <type>void*</type>
                </param>
                <param name="size">
                    <type>uint</type>
                </param>
                <param name="codePage">
                    <type>uint</type>
                </param>
                <param name="pBlobEncoding">
                    <type>IDxcBlobEncoding**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcLibrary*, void*, uint, uint, IDxcBlobEncoding**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDxcLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="pText">pText</param>, <param name="size">size</param>, <param name="codePage">codePage</param>, <param name="pBlobEncoding">pBlobEncoding</param>);
        </code>
                </body>
            </function>
            <function name="CreateBlobWithEncodingOnMalloc" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pText">
                    <type>void*</type>
                </param>
                <param name="pIMalloc">
                    <type>IMalloc*</type>
                </param>
                <param name="size">
                    <type>uint</type>
                </param>
                <param name="codePage">
                    <type>uint</type>
                </param>
                <param name="pBlobEncoding">
                    <type>IDxcBlobEncoding**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcLibrary*, void*, IMalloc*, uint, uint, IDxcBlobEncoding**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDxcLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="pText">pText</param>, <param name="pIMalloc">pIMalloc</param>, <param name="size">size</param>, <param name="codePage">codePage</param>, <param name="pBlobEncoding">pBlobEncoding</param>);
        </code>
                </body>
            </function>
            <function name="CreateIncludeHandler" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppResult">
                    <type>IDxcIncludeHandler**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcLibrary*, IDxcIncludeHandler**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IDxcLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="ppResult">ppResult</param>);
        </code>
                </body>
            </function>
            <function name="CreateStreamFromBlobReadOnly" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pBlob">
                    <type>IDxcBlob*</type>
                </param>
                <param name="ppStream">
                    <type>IStream**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcLibrary*, IDxcBlob*, IStream**, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IDxcLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="pBlob">pBlob</param>, <param name="ppStream">ppStream</param>);
        </code>
                </body>
            </function>
            <function name="GetBlobAsUtf8" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pBlob">
                    <type>IDxcBlob*</type>
                </param>
                <param name="pBlobEncoding">
                    <type>IDxcBlobEncoding**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IDxcLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="pBlob">pBlob</param>, <param name="pBlobEncoding">pBlobEncoding</param>);
        </code>
                </body>
            </function>
            <function name="GetBlobAsUtf16" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pBlob">
                    <type>IDxcBlob*</type>
                </param>
                <param name="pBlobEncoding">
                    <type>IDxcBlobEncoding**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcLibrary*, IDxcBlob*, IDxcBlobEncoding**, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IDxcLibrary*)Unsafe.AsPointer(ref this)</param>, <param name="pBlob">pBlob</param>, <param name="pBlobEncoding">pBlobEncoding</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
