<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/dxcapi.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved. Licensed under the University of Illinois Open Source License.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDxcOptimizer" access="public" native="struct IDxcOptimizer : IUnknown" uuid="25740e2e-9cba-401b-9119-4fb42f39f270" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcOptimizer*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDxcOptimizer*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcOptimizer*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDxcOptimizer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcOptimizer*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDxcOptimizer*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetAvailablePassCount" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pCount">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcOptimizer*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDxcOptimizer*)Unsafe.AsPointer(ref this)</param>, <param name="pCount">pCount</param>);
        </code>
                </body>
            </function>
            <function name="GetAvailablePass" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="index">
                    <type>uint</type>
                </param>
                <param name="ppResult">
                    <type>IDxcOptimizerPass**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcOptimizer*, uint, IDxcOptimizerPass**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDxcOptimizer*)Unsafe.AsPointer(ref this)</param>, <param name="index">index</param>, <param name="ppResult">ppResult</param>);
        </code>
                </body>
            </function>
            <function name="RunOptimizer" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pBlob">
                    <type>IDxcBlob*</type>
                </param>
                <param name="ppOptions">
                    <type>ushort**</type>
                </param>
                <param name="optionCount">
                    <type>uint</type>
                </param>
                <param name="pOutputModule">
                    <type>IDxcBlob**</type>
                </param>
                <param name="ppOutputText">
                    <type>IDxcBlobEncoding**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDxcOptimizer*, IDxcBlob*, ushort**, uint, IDxcBlob**, IDxcBlobEncoding**, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDxcOptimizer*)Unsafe.AsPointer(ref this)</param>, <param name="pBlob">pBlob</param>, <param name="ppOptions">ppOptions</param>, <param name="optionCount">optionCount</param>, <param name="pOutputModule">pOutputModule</param>, <param name="ppOutputText">ppOutputText</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
