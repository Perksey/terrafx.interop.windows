<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/StructuredQueryCondition.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ICondition2" access="public" native="struct ICondition2 : ICondition" uuid="0db8851d-2e5b-47eb-9208-d28c325a01d7" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICondition2*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ICondition2*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICondition2*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ICondition2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICondition2*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ICondition2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetClassID" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pClassID">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICondition2*, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ICondition2*)Unsafe.AsPointer(ref this)</param>, <param name="pClassID">pClassID</param>);
        </code>
                </body>
            </function>
            <function name="IsDirty" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICondition2*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ICondition2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Load" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pStm">
                    <type>IStream*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICondition2*, IStream*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ICondition2*)Unsafe.AsPointer(ref this)</param>, <param name="pStm">pStm</param>);
        </code>
                </body>
            </function>
            <function name="Save" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pStm">
                    <type>IStream*</type>
                </param>
                <param name="fClearDirty">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICondition2*, IStream*, int, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ICondition2*)Unsafe.AsPointer(ref this)</param>, <param name="pStm">pStm</param>, <param name="fClearDirty">fClearDirty</param>);
        </code>
                </body>
            </function>
            <function name="GetSizeMax" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pcbSize">
                    <type>ULARGE_INTEGER*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICondition2*, ULARGE_INTEGER*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ICondition2*)Unsafe.AsPointer(ref this)</param>, <param name="pcbSize">pcbSize</param>);
        </code>
                </body>
            </function>
            <function name="GetConditionType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pNodeType">
                    <type>CONDITION_TYPE*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICondition2*, CONDITION_TYPE*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ICondition2*)Unsafe.AsPointer(ref this)</param>, <param name="pNodeType">pNodeType</param>);
        </code>
                </body>
            </function>
            <function name="GetSubConditions" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppv">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICondition2*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ICondition2*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppv">ppv</param>);
        </code>
                </body>
            </function>
            <function name="GetComparisonInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppszPropertyName">
                    <type>ushort**</type>
                </param>
                <param name="pcop">
                    <type>CONDITION_OPERATION*</type>
                </param>
                <param name="ppropvar">
                    <type>PROPVARIANT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICondition2*, ushort**, CONDITION_OPERATION*, PROPVARIANT*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ICondition2*)Unsafe.AsPointer(ref this)</param>, <param name="ppszPropertyName">ppszPropertyName</param>, <param name="pcop">pcop</param>, <param name="ppropvar">ppropvar</param>);
        </code>
                </body>
            </function>
            <function name="GetValueType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppszValueTypeName">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICondition2*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ICondition2*)Unsafe.AsPointer(ref this)</param>, <param name="ppszValueTypeName">ppszValueTypeName</param>);
        </code>
                </body>
            </function>
            <function name="GetValueNormalization" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppszNormalization">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICondition2*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ICondition2*)Unsafe.AsPointer(ref this)</param>, <param name="ppszNormalization">ppszNormalization</param>);
        </code>
                </body>
            </function>
            <function name="GetInputTerms" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppPropertyTerm">
                    <type>IRichChunk**</type>
                </param>
                <param name="ppOperationTerm">
                    <type>IRichChunk**</type>
                </param>
                <param name="ppValueTerm">
                    <type>IRichChunk**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICondition2*, IRichChunk**, IRichChunk**, IRichChunk**, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(ICondition2*)Unsafe.AsPointer(ref this)</param>, <param name="ppPropertyTerm">ppPropertyTerm</param>, <param name="ppOperationTerm">ppOperationTerm</param>, <param name="ppValueTerm">ppValueTerm</param>);
        </code>
                </body>
            </function>
            <function name="Clone" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppc">
                    <type>ICondition**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICondition2*, ICondition**, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(ICondition2*)Unsafe.AsPointer(ref this)</param>, <param name="ppc">ppc</param>);
        </code>
                </body>
            </function>
            <function name="GetLocale" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppszLocaleName">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICondition2*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(ICondition2*)Unsafe.AsPointer(ref this)</param>, <param name="ppszLocaleName">ppszLocaleName</param>);
        </code>
                </body>
            </function>
            <function name="GetLeafConditionInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppropkey">
                    <type>PROPERTYKEY*</type>
                </param>
                <param name="pcop">
                    <type>CONDITION_OPERATION*</type>
                </param>
                <param name="ppropvar">
                    <type>PROPVARIANT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ICondition2*, PROPERTYKEY*, CONDITION_OPERATION*, PROPVARIANT*, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(ICondition2*)Unsafe.AsPointer(ref this)</param>, <param name="ppropkey">ppropkey</param>, <param name="pcop">pcop</param>, <param name="ppropvar">ppropvar</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
