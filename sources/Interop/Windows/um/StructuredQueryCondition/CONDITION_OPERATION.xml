<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/StructuredQueryCondition.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <enumeration name="CONDITION_OPERATION" access="public">
            <type>int</type>
            <enumerator name="COP_IMPLICIT" access="">
                <type primitive="False">int</type>
                <value>
                    <code>0
        </code>
                </value>
            </enumerator>
            <enumerator name="COP_EQUAL" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(COP_IMPLICIT + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="COP_NOTEQUAL" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(COP_EQUAL + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="COP_LESSTHAN" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(COP_NOTEQUAL + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="COP_GREATERTHAN" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(COP_LESSTHAN + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="COP_LESSTHANOREQUAL" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(COP_GREATERTHAN + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="COP_GREATERTHANOREQUAL" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(COP_LESSTHANOREQUAL + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="COP_VALUE_STARTSWITH" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(COP_GREATERTHANOREQUAL + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="COP_VALUE_ENDSWITH" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(COP_VALUE_STARTSWITH + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="COP_VALUE_CONTAINS" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(COP_VALUE_ENDSWITH + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="COP_VALUE_NOTCONTAINS" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(COP_VALUE_CONTAINS + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="COP_DOSWILDCARDS" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(COP_VALUE_NOTCONTAINS + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="COP_WORD_EQUAL" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(COP_DOSWILDCARDS + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="COP_WORD_STARTSWITH" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(COP_WORD_EQUAL + 1)
        </code>
                </value>
            </enumerator>
            <enumerator name="COP_APPLICATION_SPECIFIC" access="">
                <type primitive="False">int</type>
                <value>
                    <code>(COP_WORD_STARTSWITH + 1)
        </code>
                </value>
            </enumerator>
        </enumeration>
    </namespace>
</bindings>
