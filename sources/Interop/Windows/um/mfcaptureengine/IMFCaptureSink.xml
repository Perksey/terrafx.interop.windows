<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfcaptureengine.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFCaptureSink" access="public" native="struct IMFCaptureSink : IUnknown" uuid="72d6135b-35e9-412c-b926-fd5265f2a885" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSink*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFCaptureSink*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSink*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFCaptureSink*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSink*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFCaptureSink*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetOutputMediaType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwSinkStreamIndex">
                    <type>uint</type>
                </param>
                <param name="ppMediaType">
                    <type>IMFMediaType**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSink*, uint, IMFMediaType**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFCaptureSink*)Unsafe.AsPointer(ref this)</param>, <param name="dwSinkStreamIndex">dwSinkStreamIndex</param>, <param name="ppMediaType">ppMediaType</param>);
        </code>
                </body>
            </function>
            <function name="GetService" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwSinkStreamIndex">
                    <type>uint</type>
                </param>
                <param name="rguidService">
                    <type>Guid*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppUnknown">
                    <type>IUnknown**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSink*, uint, Guid*, Guid*, IUnknown**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFCaptureSink*)Unsafe.AsPointer(ref this)</param>, <param name="dwSinkStreamIndex">dwSinkStreamIndex</param>, <param name="rguidService">rguidService</param>, <param name="riid">riid</param>, <param name="ppUnknown">ppUnknown</param>);
        </code>
                </body>
            </function>
            <function name="AddStream" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwSourceStreamIndex">
                    <type>uint</type>
                </param>
                <param name="pMediaType">
                    <type>IMFMediaType*</type>
                </param>
                <param name="pAttributes">
                    <type>IMFAttributes*</type>
                </param>
                <param name="pdwSinkStreamIndex">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSink*, uint, IMFMediaType*, IMFAttributes*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFCaptureSink*)Unsafe.AsPointer(ref this)</param>, <param name="dwSourceStreamIndex">dwSourceStreamIndex</param>, <param name="pMediaType">pMediaType</param>, <param name="pAttributes">pAttributes</param>, <param name="pdwSinkStreamIndex">pdwSinkStreamIndex</param>);
        </code>
                </body>
            </function>
            <function name="Prepare" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSink*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFCaptureSink*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="RemoveAllStreams" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSink*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFCaptureSink*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
