<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfcaptureengine.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFCaptureSource" access="public" native="struct IMFCaptureSource : IUnknown" uuid="439a42a8-0d2c-4505-be83-f79b2a05d5c4" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSource*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFCaptureSource*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSource*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFCaptureSource*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSource*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFCaptureSource*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetCaptureDeviceSource" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="mfCaptureEngineDeviceType">
                    <type>MF_CAPTURE_ENGINE_DEVICE_TYPE</type>
                </param>
                <param name="ppMediaSource">
                    <type>IMFMediaSource**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSource*, MF_CAPTURE_ENGINE_DEVICE_TYPE, IMFMediaSource**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFCaptureSource*)Unsafe.AsPointer(ref this)</param>, <param name="mfCaptureEngineDeviceType">mfCaptureEngineDeviceType</param>, <param name="ppMediaSource">ppMediaSource</param>);
        </code>
                </body>
            </function>
            <function name="GetCaptureDeviceActivate" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="mfCaptureEngineDeviceType">
                    <type>MF_CAPTURE_ENGINE_DEVICE_TYPE</type>
                </param>
                <param name="ppActivate">
                    <type>IMFActivate**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSource*, MF_CAPTURE_ENGINE_DEVICE_TYPE, IMFActivate**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFCaptureSource*)Unsafe.AsPointer(ref this)</param>, <param name="mfCaptureEngineDeviceType">mfCaptureEngineDeviceType</param>, <param name="ppActivate">ppActivate</param>);
        </code>
                </body>
            </function>
            <function name="GetService" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="rguidService">
                    <type>Guid*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppUnknown">
                    <type>IUnknown**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSource*, Guid*, Guid*, IUnknown**, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFCaptureSource*)Unsafe.AsPointer(ref this)</param>, <param name="rguidService">rguidService</param>, <param name="riid">riid</param>, <param name="ppUnknown">ppUnknown</param>);
        </code>
                </body>
            </function>
            <function name="AddEffect" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwSourceStreamIndex">
                    <type>uint</type>
                </param>
                <param name="pUnknown">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSource*, uint, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFCaptureSource*)Unsafe.AsPointer(ref this)</param>, <param name="dwSourceStreamIndex">dwSourceStreamIndex</param>, <param name="pUnknown">pUnknown</param>);
        </code>
                </body>
            </function>
            <function name="RemoveEffect" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwSourceStreamIndex">
                    <type>uint</type>
                </param>
                <param name="pUnknown">
                    <type>IUnknown*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSource*, uint, IUnknown*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFCaptureSource*)Unsafe.AsPointer(ref this)</param>, <param name="dwSourceStreamIndex">dwSourceStreamIndex</param>, <param name="pUnknown">pUnknown</param>);
        </code>
                </body>
            </function>
            <function name="RemoveAllEffects" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwSourceStreamIndex">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSource*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IMFCaptureSource*)Unsafe.AsPointer(ref this)</param>, <param name="dwSourceStreamIndex">dwSourceStreamIndex</param>);
        </code>
                </body>
            </function>
            <function name="GetAvailableDeviceMediaType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwSourceStreamIndex">
                    <type>uint</type>
                </param>
                <param name="dwMediaTypeIndex">
                    <type>uint</type>
                </param>
                <param name="ppMediaType">
                    <type>IMFMediaType**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSource*, uint, uint, IMFMediaType**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IMFCaptureSource*)Unsafe.AsPointer(ref this)</param>, <param name="dwSourceStreamIndex">dwSourceStreamIndex</param>, <param name="dwMediaTypeIndex">dwMediaTypeIndex</param>, <param name="ppMediaType">ppMediaType</param>);
        </code>
                </body>
            </function>
            <function name="SetCurrentDeviceMediaType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwSourceStreamIndex">
                    <type>uint</type>
                </param>
                <param name="pMediaType">
                    <type>IMFMediaType*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSource*, uint, IMFMediaType*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IMFCaptureSource*)Unsafe.AsPointer(ref this)</param>, <param name="dwSourceStreamIndex">dwSourceStreamIndex</param>, <param name="pMediaType">pMediaType</param>);
        </code>
                </body>
            </function>
            <function name="GetCurrentDeviceMediaType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwSourceStreamIndex">
                    <type>uint</type>
                </param>
                <param name="ppMediaType">
                    <type>IMFMediaType**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSource*, uint, IMFMediaType**, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IMFCaptureSource*)Unsafe.AsPointer(ref this)</param>, <param name="dwSourceStreamIndex">dwSourceStreamIndex</param>, <param name="ppMediaType">ppMediaType</param>);
        </code>
                </body>
            </function>
            <function name="GetDeviceStreamCount" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pdwStreamCount">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSource*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IMFCaptureSource*)Unsafe.AsPointer(ref this)</param>, <param name="pdwStreamCount">pdwStreamCount</param>);
        </code>
                </body>
            </function>
            <function name="GetDeviceStreamCategory" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwSourceStreamIndex">
                    <type>uint</type>
                </param>
                <param name="pStreamCategory">
                    <type>MF_CAPTURE_ENGINE_STREAM_CATEGORY*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSource*, uint, MF_CAPTURE_ENGINE_STREAM_CATEGORY*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IMFCaptureSource*)Unsafe.AsPointer(ref this)</param>, <param name="dwSourceStreamIndex">dwSourceStreamIndex</param>, <param name="pStreamCategory">pStreamCategory</param>);
        </code>
                </body>
            </function>
            <function name="GetMirrorState" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwStreamIndex">
                    <type>uint</type>
                </param>
                <param name="pfMirrorState">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSource*, uint, int*, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IMFCaptureSource*)Unsafe.AsPointer(ref this)</param>, <param name="dwStreamIndex">dwStreamIndex</param>, <param name="pfMirrorState">pfMirrorState</param>);
        </code>
                </body>
            </function>
            <function name="SetMirrorState" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwStreamIndex">
                    <type>uint</type>
                </param>
                <param name="fMirrorState">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSource*, uint, int, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IMFCaptureSource*)Unsafe.AsPointer(ref this)</param>, <param name="dwStreamIndex">dwStreamIndex</param>, <param name="fMirrorState">fMirrorState</param>);
        </code>
                </body>
            </function>
            <function name="GetStreamIndexFromFriendlyName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="uifriendlyName">
                    <type>uint</type>
                </param>
                <param name="pdwActualStreamIndex">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFCaptureSource*, uint, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(IMFCaptureSource*)Unsafe.AsPointer(ref this)</param>, <param name="uifriendlyName">uifriendlyName</param>, <param name="pdwActualStreamIndex">pdwActualStreamIndex</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
