<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/ObjIdl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IRunningObjectTable" access="public" native="struct IRunningObjectTable : IUnknown" uuid="00000010-0000-0000-c000-000000000046" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRunningObjectTable*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IRunningObjectTable*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRunningObjectTable*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IRunningObjectTable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRunningObjectTable*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IRunningObjectTable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Register" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="grfFlags">
                    <type>uint</type>
                </param>
                <param name="punkObject">
                    <type>IUnknown*</type>
                </param>
                <param name="pmkObjectName">
                    <type>IMoniker*</type>
                </param>
                <param name="pdwRegister">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRunningObjectTable*, uint, IUnknown*, IMoniker*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IRunningObjectTable*)Unsafe.AsPointer(ref this)</param>, <param name="grfFlags">grfFlags</param>, <param name="punkObject">punkObject</param>, <param name="pmkObjectName">pmkObjectName</param>, <param name="pdwRegister">pdwRegister</param>);
        </code>
                </body>
            </function>
            <function name="Revoke" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwRegister">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRunningObjectTable*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IRunningObjectTable*)Unsafe.AsPointer(ref this)</param>, <param name="dwRegister">dwRegister</param>);
        </code>
                </body>
            </function>
            <function name="IsRunning" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pmkObjectName">
                    <type>IMoniker*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRunningObjectTable*, IMoniker*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IRunningObjectTable*)Unsafe.AsPointer(ref this)</param>, <param name="pmkObjectName">pmkObjectName</param>);
        </code>
                </body>
            </function>
            <function name="GetObject" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pmkObjectName">
                    <type>IMoniker*</type>
                </param>
                <param name="ppunkObject">
                    <type>IUnknown**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRunningObjectTable*, IMoniker*, IUnknown**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IRunningObjectTable*)Unsafe.AsPointer(ref this)</param>, <param name="pmkObjectName">pmkObjectName</param>, <param name="ppunkObject">ppunkObject</param>);
        </code>
                </body>
            </function>
            <function name="NoteChangeTime" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwRegister">
                    <type>uint</type>
                </param>
                <param name="pfiletime">
                    <type>FILETIME*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRunningObjectTable*, uint, FILETIME*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IRunningObjectTable*)Unsafe.AsPointer(ref this)</param>, <param name="dwRegister">dwRegister</param>, <param name="pfiletime">pfiletime</param>);
        </code>
                </body>
            </function>
            <function name="GetTimeOfLastChange" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pmkObjectName">
                    <type>IMoniker*</type>
                </param>
                <param name="pfiletime">
                    <type>FILETIME*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRunningObjectTable*, IMoniker*, FILETIME*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IRunningObjectTable*)Unsafe.AsPointer(ref this)</param>, <param name="pmkObjectName">pmkObjectName</param>, <param name="pfiletime">pfiletime</param>);
        </code>
                </body>
            </function>
            <function name="EnumRunning" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppenumMoniker">
                    <type>IEnumMoniker**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IRunningObjectTable*, IEnumMoniker**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IRunningObjectTable*)Unsafe.AsPointer(ref this)</param>, <param name="ppenumMoniker">ppenumMoniker</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
