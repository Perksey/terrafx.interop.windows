<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d3d11shader.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ID3D11Linker" access="public" native="struct ID3D11Linker : IUnknown" uuid="59a6cd0e-e10d-4c1f-88c0-63aba1daf30e" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11Linker*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ID3D11Linker*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11Linker*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ID3D11Linker*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11Linker*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ID3D11Linker*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Link" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pEntry">
                    <type>ID3D11ModuleInstance*</type>
                </param>
                <param name="pEntryName">
                    <type>sbyte*</type>
                </param>
                <param name="pTargetName">
                    <type>sbyte*</type>
                </param>
                <param name="uFlags">
                    <type>uint</type>
                </param>
                <param name="ppShaderBlob">
                    <type>ID3DBlob**</type>
                </param>
                <param name="ppErrorBuffer">
                    <type>ID3DBlob**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11Linker*, ID3D11ModuleInstance*, sbyte*, sbyte*, uint, ID3DBlob**, ID3DBlob**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ID3D11Linker*)Unsafe.AsPointer(ref this)</param>, <param name="pEntry">pEntry</param>, <param name="pEntryName">pEntryName</param>, <param name="pTargetName">pTargetName</param>, <param name="uFlags">uFlags</param>, <param name="ppShaderBlob">ppShaderBlob</param>, <param name="ppErrorBuffer">ppErrorBuffer</param>);
        </code>
                </body>
            </function>
            <function name="UseLibrary" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pLibraryMI">
                    <type>ID3D11ModuleInstance*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11Linker*, ID3D11ModuleInstance*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ID3D11Linker*)Unsafe.AsPointer(ref this)</param>, <param name="pLibraryMI">pLibraryMI</param>);
        </code>
                </body>
            </function>
            <function name="AddClipPlaneFromCBuffer" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="uCBufferSlot">
                    <type>uint</type>
                </param>
                <param name="uCBufferEntry">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11Linker*, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ID3D11Linker*)Unsafe.AsPointer(ref this)</param>, <param name="uCBufferSlot">uCBufferSlot</param>, <param name="uCBufferEntry">uCBufferEntry</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
