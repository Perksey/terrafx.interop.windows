<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d3d11shader.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ID3D11ModuleInstance" access="public" native="struct ID3D11ModuleInstance : IUnknown" uuid="469e07f7-045a-48d5-aa12-68a478cdf75d" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11ModuleInstance*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ID3D11ModuleInstance*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11ModuleInstance*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ID3D11ModuleInstance*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11ModuleInstance*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ID3D11ModuleInstance*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="BindConstantBuffer" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="uSrcSlot">
                    <type>uint</type>
                </param>
                <param name="uDstSlot">
                    <type>uint</type>
                </param>
                <param name="cbDstOffset">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11ModuleInstance*, uint, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ID3D11ModuleInstance*)Unsafe.AsPointer(ref this)</param>, <param name="uSrcSlot">uSrcSlot</param>, <param name="uDstSlot">uDstSlot</param>, <param name="cbDstOffset">cbDstOffset</param>);
        </code>
                </body>
            </function>
            <function name="BindConstantBufferByName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pName">
                    <type>sbyte*</type>
                </param>
                <param name="uDstSlot">
                    <type>uint</type>
                </param>
                <param name="cbDstOffset">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11ModuleInstance*, sbyte*, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ID3D11ModuleInstance*)Unsafe.AsPointer(ref this)</param>, <param name="pName">pName</param>, <param name="uDstSlot">uDstSlot</param>, <param name="cbDstOffset">cbDstOffset</param>);
        </code>
                </body>
            </function>
            <function name="BindResource" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="uSrcSlot">
                    <type>uint</type>
                </param>
                <param name="uDstSlot">
                    <type>uint</type>
                </param>
                <param name="uCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11ModuleInstance*, uint, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ID3D11ModuleInstance*)Unsafe.AsPointer(ref this)</param>, <param name="uSrcSlot">uSrcSlot</param>, <param name="uDstSlot">uDstSlot</param>, <param name="uCount">uCount</param>);
        </code>
                </body>
            </function>
            <function name="BindResourceByName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pName">
                    <type>sbyte*</type>
                </param>
                <param name="uDstSlot">
                    <type>uint</type>
                </param>
                <param name="uCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11ModuleInstance*, sbyte*, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ID3D11ModuleInstance*)Unsafe.AsPointer(ref this)</param>, <param name="pName">pName</param>, <param name="uDstSlot">uDstSlot</param>, <param name="uCount">uCount</param>);
        </code>
                </body>
            </function>
            <function name="BindSampler" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="uSrcSlot">
                    <type>uint</type>
                </param>
                <param name="uDstSlot">
                    <type>uint</type>
                </param>
                <param name="uCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11ModuleInstance*, uint, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ID3D11ModuleInstance*)Unsafe.AsPointer(ref this)</param>, <param name="uSrcSlot">uSrcSlot</param>, <param name="uDstSlot">uDstSlot</param>, <param name="uCount">uCount</param>);
        </code>
                </body>
            </function>
            <function name="BindSamplerByName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pName">
                    <type>sbyte*</type>
                </param>
                <param name="uDstSlot">
                    <type>uint</type>
                </param>
                <param name="uCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11ModuleInstance*, sbyte*, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ID3D11ModuleInstance*)Unsafe.AsPointer(ref this)</param>, <param name="pName">pName</param>, <param name="uDstSlot">uDstSlot</param>, <param name="uCount">uCount</param>);
        </code>
                </body>
            </function>
            <function name="BindUnorderedAccessView" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="uSrcSlot">
                    <type>uint</type>
                </param>
                <param name="uDstSlot">
                    <type>uint</type>
                </param>
                <param name="uCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11ModuleInstance*, uint, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ID3D11ModuleInstance*)Unsafe.AsPointer(ref this)</param>, <param name="uSrcSlot">uSrcSlot</param>, <param name="uDstSlot">uDstSlot</param>, <param name="uCount">uCount</param>);
        </code>
                </body>
            </function>
            <function name="BindUnorderedAccessViewByName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pName">
                    <type>sbyte*</type>
                </param>
                <param name="uDstSlot">
                    <type>uint</type>
                </param>
                <param name="uCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11ModuleInstance*, sbyte*, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ID3D11ModuleInstance*)Unsafe.AsPointer(ref this)</param>, <param name="pName">pName</param>, <param name="uDstSlot">uDstSlot</param>, <param name="uCount">uCount</param>);
        </code>
                </body>
            </function>
            <function name="BindResourceAsUnorderedAccessView" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="uSrcSrvSlot">
                    <type>uint</type>
                </param>
                <param name="uDstUavSlot">
                    <type>uint</type>
                </param>
                <param name="uCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11ModuleInstance*, uint, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ID3D11ModuleInstance*)Unsafe.AsPointer(ref this)</param>, <param name="uSrcSrvSlot">uSrcSrvSlot</param>, <param name="uDstUavSlot">uDstUavSlot</param>, <param name="uCount">uCount</param>);
        </code>
                </body>
            </function>
            <function name="BindResourceAsUnorderedAccessViewByName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pSrvName">
                    <type>sbyte*</type>
                </param>
                <param name="uDstUavSlot">
                    <type>uint</type>
                </param>
                <param name="uCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D11ModuleInstance*, sbyte*, uint, uint, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ID3D11ModuleInstance*)Unsafe.AsPointer(ref this)</param>, <param name="pSrvName">pSrvName</param>, <param name="uDstUavSlot">uDstUavSlot</param>, <param name="uCount">uCount</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
