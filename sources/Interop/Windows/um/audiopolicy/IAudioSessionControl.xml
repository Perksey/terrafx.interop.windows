<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/audiopolicy.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IAudioSessionControl" access="public" native="struct IAudioSessionControl : IUnknown" uuid="f4b1a599-7266-4319-a8ca-e70acb11e8cd" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAudioSessionControl*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IAudioSessionControl*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAudioSessionControl*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IAudioSessionControl*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAudioSessionControl*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IAudioSessionControl*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetState" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pRetVal">
                    <type>AudioSessionState*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAudioSessionControl*, AudioSessionState*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IAudioSessionControl*)Unsafe.AsPointer(ref this)</param>, <param name="pRetVal">pRetVal</param>);
        </code>
                </body>
            </function>
            <function name="GetDisplayName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pRetVal">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAudioSessionControl*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IAudioSessionControl*)Unsafe.AsPointer(ref this)</param>, <param name="pRetVal">pRetVal</param>);
        </code>
                </body>
            </function>
            <function name="SetDisplayName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Value">
                    <type>ushort*</type>
                </param>
                <param name="EventContext">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAudioSessionControl*, ushort*, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IAudioSessionControl*)Unsafe.AsPointer(ref this)</param>, <param name="Value">Value</param>, <param name="EventContext">EventContext</param>);
        </code>
                </body>
            </function>
            <function name="GetIconPath" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pRetVal">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAudioSessionControl*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IAudioSessionControl*)Unsafe.AsPointer(ref this)</param>, <param name="pRetVal">pRetVal</param>);
        </code>
                </body>
            </function>
            <function name="SetIconPath" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Value">
                    <type>ushort*</type>
                </param>
                <param name="EventContext">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAudioSessionControl*, ushort*, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IAudioSessionControl*)Unsafe.AsPointer(ref this)</param>, <param name="Value">Value</param>, <param name="EventContext">EventContext</param>);
        </code>
                </body>
            </function>
            <function name="GetGroupingParam" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pRetVal">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAudioSessionControl*, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IAudioSessionControl*)Unsafe.AsPointer(ref this)</param>, <param name="pRetVal">pRetVal</param>);
        </code>
                </body>
            </function>
            <function name="SetGroupingParam" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Override">
                    <type>Guid*</type>
                </param>
                <param name="EventContext">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAudioSessionControl*, Guid*, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IAudioSessionControl*)Unsafe.AsPointer(ref this)</param>, <param name="Override">Override</param>, <param name="EventContext">EventContext</param>);
        </code>
                </body>
            </function>
            <function name="RegisterAudioSessionNotification" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="NewNotifications">
                    <type>IAudioSessionEvents*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAudioSessionControl*, IAudioSessionEvents*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IAudioSessionControl*)Unsafe.AsPointer(ref this)</param>, <param name="NewNotifications">NewNotifications</param>);
        </code>
                </body>
            </function>
            <function name="UnregisterAudioSessionNotification" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="NewNotifications">
                    <type>IAudioSessionEvents*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAudioSessionControl*, IAudioSessionEvents*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IAudioSessionControl*)Unsafe.AsPointer(ref this)</param>, <param name="NewNotifications">NewNotifications</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
