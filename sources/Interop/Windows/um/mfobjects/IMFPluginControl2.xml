<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/mfobjects.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IMFPluginControl2" access="public" native="struct IMFPluginControl2 : IMFPluginControl" uuid="c6982083-3ddc-45cb-af5e-0f7a8ce4de77" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPluginControl2*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IMFPluginControl2*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPluginControl2*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IMFPluginControl2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPluginControl2*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IMFPluginControl2*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetPreferredClsid" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pluginType">
                    <type>uint</type>
                </param>
                <param name="selector">
                    <type>ushort*</type>
                </param>
                <param name="clsid">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPluginControl2*, uint, ushort*, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IMFPluginControl2*)Unsafe.AsPointer(ref this)</param>, <param name="pluginType">pluginType</param>, <param name="selector">selector</param>, <param name="clsid">clsid</param>);
        </code>
                </body>
            </function>
            <function name="GetPreferredClsidByIndex" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pluginType">
                    <type>uint</type>
                </param>
                <param name="index">
                    <type>uint</type>
                </param>
                <param name="selector">
                    <type>ushort**</type>
                </param>
                <param name="clsid">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPluginControl2*, uint, uint, ushort**, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IMFPluginControl2*)Unsafe.AsPointer(ref this)</param>, <param name="pluginType">pluginType</param>, <param name="index">index</param>, <param name="selector">selector</param>, <param name="clsid">clsid</param>);
        </code>
                </body>
            </function>
            <function name="SetPreferredClsid" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pluginType">
                    <type>uint</type>
                </param>
                <param name="selector">
                    <type>ushort*</type>
                </param>
                <param name="clsid">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPluginControl2*, uint, ushort*, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IMFPluginControl2*)Unsafe.AsPointer(ref this)</param>, <param name="pluginType">pluginType</param>, <param name="selector">selector</param>, <param name="clsid">clsid</param>);
        </code>
                </body>
            </function>
            <function name="IsDisabled" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pluginType">
                    <type>uint</type>
                </param>
                <param name="clsid">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPluginControl2*, uint, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IMFPluginControl2*)Unsafe.AsPointer(ref this)</param>, <param name="pluginType">pluginType</param>, <param name="clsid">clsid</param>);
        </code>
                </body>
            </function>
            <function name="GetDisabledByIndex" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pluginType">
                    <type>uint</type>
                </param>
                <param name="index">
                    <type>uint</type>
                </param>
                <param name="clsid">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPluginControl2*, uint, uint, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IMFPluginControl2*)Unsafe.AsPointer(ref this)</param>, <param name="pluginType">pluginType</param>, <param name="index">index</param>, <param name="clsid">clsid</param>);
        </code>
                </body>
            </function>
            <function name="SetDisabled" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pluginType">
                    <type>uint</type>
                </param>
                <param name="clsid">
                    <type>Guid*</type>
                </param>
                <param name="disabled">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPluginControl2*, uint, Guid*, int, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IMFPluginControl2*)Unsafe.AsPointer(ref this)</param>, <param name="pluginType">pluginType</param>, <param name="clsid">clsid</param>, <param name="disabled">disabled</param>);
        </code>
                </body>
            </function>
            <function name="SetPolicy" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="policy">
                    <type>MF_PLUGIN_CONTROL_POLICY</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IMFPluginControl2*, MF_PLUGIN_CONTROL_POLICY, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IMFPluginControl2*)Unsafe.AsPointer(ref this)</param>, <param name="policy">policy</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
