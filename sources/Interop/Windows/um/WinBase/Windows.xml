<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/WinBase.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <class name="Windows" access="public" static="true" unsafe="true">
            <function name="WinMain" access="public" lib="kernel32" static="true">
                <type>int</type>
                <param name="hInstance">
                    <type>IntPtr</type>
                </param>
                <param name="hPrevInstance">
                    <type>IntPtr</type>
                </param>
                <param name="lpCmdLine">
                    <type>sbyte*</type>
                </param>
                <param name="nShowCmd">
                    <type>int</type>
                </param>
            </function>
            <function name="wWinMain" access="public" lib="kernel32" static="true">
                <type>int</type>
                <param name="hInstance">
                    <type>IntPtr</type>
                </param>
                <param name="hPrevInstance">
                    <type>IntPtr</type>
                </param>
                <param name="lpCmdLine">
                    <type>ushort*</type>
                </param>
                <param name="nShowCmd">
                    <type>int</type>
                </param>
            </function>
            <function name="GlobalAlloc" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="HGLOBAL">IntPtr</type>
                <param name="uFlags">
                    <type>uint</type>
                </param>
                <param name="dwBytes">
                    <type>nuint</type>
                </param>
            </function>
            <function name="GlobalReAlloc" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="HGLOBAL">IntPtr</type>
                <param name="hMem">
                    <type>IntPtr</type>
                </param>
                <param name="dwBytes">
                    <type>nuint</type>
                </param>
                <param name="uFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="GlobalSize" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="SIZE_T">nuint</type>
                <param name="hMem">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GlobalUnlock" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hMem">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GlobalLock" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="LPVOID">void*</type>
                <param name="hMem">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GlobalFlags" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="UINT">uint</type>
                <param name="hMem">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GlobalHandle" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="HGLOBAL">IntPtr</type>
                <param name="pMem">
                    <type>void*</type>
                </param>
            </function>
            <function name="GlobalFree" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="HGLOBAL">IntPtr</type>
                <param name="hMem">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GlobalCompact" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="SIZE_T">nuint</type>
                <param name="dwMinFree">
                    <type>uint</type>
                </param>
            </function>
            <function name="GlobalFix" access="public" lib="kernel32" static="true" unsafe="true">
                <type>void</type>
                <param name="hMem">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GlobalUnfix" access="public" lib="kernel32" static="true" unsafe="true">
                <type>void</type>
                <param name="hMem">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GlobalWire" access="public" lib="kernel32" static="true">
                <type native="LPVOID">void*</type>
                <param name="hMem">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GlobalUnWire" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hMem">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GlobalMemoryStatus" access="public" lib="kernel32" static="true">
                <type>void</type>
                <param name="lpBuffer">
                    <type>MEMORYSTATUS*</type>
                </param>
            </function>
            <function name="LocalAlloc" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="HLOCAL">IntPtr</type>
                <param name="uFlags">
                    <type>uint</type>
                </param>
                <param name="uBytes">
                    <type>nuint</type>
                </param>
            </function>
            <function name="LocalReAlloc" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="HLOCAL">IntPtr</type>
                <param name="hMem">
                    <type>IntPtr</type>
                </param>
                <param name="uBytes">
                    <type>nuint</type>
                </param>
                <param name="uFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="LocalLock" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="LPVOID">void*</type>
                <param name="hMem">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="LocalHandle" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="HLOCAL">IntPtr</type>
                <param name="pMem">
                    <type>void*</type>
                </param>
            </function>
            <function name="LocalUnlock" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hMem">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="LocalSize" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="SIZE_T">nuint</type>
                <param name="hMem">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="LocalFlags" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="UINT">uint</type>
                <param name="hMem">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="LocalFree" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="HLOCAL">IntPtr</type>
                <param name="hMem">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="LocalShrink" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="SIZE_T">nuint</type>
                <param name="hMem">
                    <type>IntPtr</type>
                </param>
                <param name="cbNewSize">
                    <type>uint</type>
                </param>
            </function>
            <function name="LocalCompact" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="SIZE_T">nuint</type>
                <param name="uMinFree">
                    <type>uint</type>
                </param>
            </function>
            <function name="GetBinaryTypeA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpApplicationName">
                    <type>sbyte*</type>
                </param>
                <param name="lpBinaryType">
                    <type>uint*</type>
                </param>
            </function>
            <function name="GetBinaryTypeW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpApplicationName">
                    <type>ushort*</type>
                </param>
                <param name="lpBinaryType">
                    <type>uint*</type>
                </param>
            </function>
            <function name="GetShortPathNameA" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpszLongPath">
                    <type>sbyte*</type>
                </param>
                <param name="lpszShortPath">
                    <type>sbyte*</type>
                </param>
                <param name="cchBuffer">
                    <type>uint</type>
                </param>
            </function>
            <function name="GetLongPathNameTransactedA" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpszShortPath">
                    <type>sbyte*</type>
                </param>
                <param name="lpszLongPath">
                    <type>sbyte*</type>
                </param>
                <param name="cchBuffer">
                    <type>uint</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GetLongPathNameTransactedW" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpszShortPath">
                    <type>ushort*</type>
                </param>
                <param name="lpszLongPath">
                    <type>ushort*</type>
                </param>
                <param name="cchBuffer">
                    <type>uint</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GetProcessAffinityMask" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hProcess">
                    <type>IntPtr</type>
                </param>
                <param name="lpProcessAffinityMask">
                    <type>nuint*</type>
                </param>
                <param name="lpSystemAffinityMask">
                    <type>nuint*</type>
                </param>
            </function>
            <function name="SetProcessAffinityMask" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hProcess">
                    <type>IntPtr</type>
                </param>
                <param name="dwProcessAffinityMask">
                    <type>nuint</type>
                </param>
            </function>
            <function name="GetProcessIoCounters" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hProcess">
                    <type>IntPtr</type>
                </param>
                <param name="lpIoCounters">
                    <type>IO_COUNTERS*</type>
                </param>
            </function>
            <function name="GetProcessWorkingSetSize" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hProcess">
                    <type>IntPtr</type>
                </param>
                <param name="lpMinimumWorkingSetSize">
                    <type>nuint*</type>
                </param>
                <param name="lpMaximumWorkingSetSize">
                    <type>nuint*</type>
                </param>
            </function>
            <function name="SetProcessWorkingSetSize" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hProcess">
                    <type>IntPtr</type>
                </param>
                <param name="dwMinimumWorkingSetSize">
                    <type>nuint</type>
                </param>
                <param name="dwMaximumWorkingSetSize">
                    <type>nuint</type>
                </param>
            </function>
            <function name="FatalExit" access="public" lib="kernel32" static="true" unsafe="true">
                <type>void</type>
                <param name="ExitCode">
                    <type>int</type>
                </param>
            </function>
            <function name="SetEnvironmentStringsA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="NewEnvironment">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="SwitchToFiber" access="public" lib="kernel32" static="true">
                <type>void</type>
                <param name="lpFiber">
                    <type>void*</type>
                </param>
            </function>
            <function name="DeleteFiber" access="public" lib="kernel32" static="true">
                <type>void</type>
                <param name="lpFiber">
                    <type>void*</type>
                </param>
            </function>
            <function name="ConvertFiberToThread" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
            </function>
            <function name="CreateFiberEx" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="LPVOID">void*</type>
                <param name="dwStackCommitSize">
                    <type>nuint</type>
                </param>
                <param name="dwStackReserveSize">
                    <type>nuint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="lpStartAddress">
                    <type>delegate* unmanaged&lt;void*, void&gt;</type>
                </param>
                <param name="lpParameter">
                    <type>void*</type>
                </param>
            </function>
            <function name="ConvertThreadToFiberEx" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="LPVOID">void*</type>
                <param name="lpParameter">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CreateFiber" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="LPVOID">void*</type>
                <param name="dwStackSize">
                    <type>nuint</type>
                </param>
                <param name="lpStartAddress">
                    <type>delegate* unmanaged&lt;void*, void&gt;</type>
                </param>
                <param name="lpParameter">
                    <type>void*</type>
                </param>
            </function>
            <function name="ConvertThreadToFiber" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="LPVOID">void*</type>
                <param name="lpParameter">
                    <type>void*</type>
                </param>
            </function>
            <function name="CreateUmsCompletionList" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="UmsCompletionList">
                    <type>void**</type>
                </param>
            </function>
            <function name="DequeueUmsCompletionListItems" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="UmsCompletionList">
                    <type>void*</type>
                </param>
                <param name="WaitTimeOut">
                    <type>uint</type>
                </param>
                <param name="UmsThreadList">
                    <type>void**</type>
                </param>
            </function>
            <function name="GetUmsCompletionListEvent" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="UmsCompletionList">
                    <type>void*</type>
                </param>
                <param name="UmsCompletionEvent">
                    <type>IntPtr*</type>
                </param>
            </function>
            <function name="ExecuteUmsThread" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="UmsThread">
                    <type>void*</type>
                </param>
            </function>
            <function name="UmsThreadYield" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="SchedulerParam">
                    <type>void*</type>
                </param>
            </function>
            <function name="DeleteUmsCompletionList" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="UmsCompletionList">
                    <type>void*</type>
                </param>
            </function>
            <function name="GetCurrentUmsThread" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="PUMS_CONTEXT">void*</type>
            </function>
            <function name="GetNextUmsListItem" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="PUMS_CONTEXT">void*</type>
                <param name="UmsContext">
                    <type>void*</type>
                </param>
            </function>
            <function name="QueryUmsThreadInformation" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="UmsThread">
                    <type>void*</type>
                </param>
                <param name="UmsThreadInfoClass">
                    <type>RTL_UMS_THREAD_INFO_CLASS</type>
                </param>
                <param name="UmsThreadInformation">
                    <type>void*</type>
                </param>
                <param name="UmsThreadInformationLength">
                    <type>uint</type>
                </param>
                <param name="ReturnLength">
                    <type>uint*</type>
                </param>
            </function>
            <function name="SetUmsThreadInformation" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="UmsThread">
                    <type>void*</type>
                </param>
                <param name="UmsThreadInfoClass">
                    <type>RTL_UMS_THREAD_INFO_CLASS</type>
                </param>
                <param name="UmsThreadInformation">
                    <type>void*</type>
                </param>
                <param name="UmsThreadInformationLength">
                    <type>uint</type>
                </param>
            </function>
            <function name="DeleteUmsThreadContext" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="UmsThread">
                    <type>void*</type>
                </param>
            </function>
            <function name="CreateUmsThreadContext" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="lpUmsThread">
                    <type>void**</type>
                </param>
            </function>
            <function name="EnterUmsSchedulingMode" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="SchedulerStartupInfo">
                    <type>UMS_SCHEDULER_STARTUP_INFO*</type>
                </param>
            </function>
            <function name="GetUmsSystemThreadInformation" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="ThreadHandle">
                    <type>IntPtr</type>
                </param>
                <param name="SystemThreadInfo">
                    <type>UMS_SYSTEM_THREAD_INFORMATION*</type>
                </param>
            </function>
            <function name="SetThreadAffinityMask" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="DWORD_PTR">nuint</type>
                <param name="hThread">
                    <type>IntPtr</type>
                </param>
                <param name="dwThreadAffinityMask">
                    <type>nuint</type>
                </param>
            </function>
            <function name="SetProcessDEPPolicy" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="GetProcessDEPPolicy" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hProcess">
                    <type>IntPtr</type>
                </param>
                <param name="lpFlags">
                    <type>uint*</type>
                </param>
                <param name="lpPermanent">
                    <type>int*</type>
                </param>
            </function>
            <function name="RequestWakeupLatency" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="latency">
                    <type>LATENCY_TIME</type>
                </param>
            </function>
            <function name="IsSystemResumeAutomatic" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="BOOL">int</type>
            </function>
            <function name="GetThreadSelectorEntry" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hThread">
                    <type>IntPtr</type>
                </param>
                <param name="dwSelector">
                    <type>uint</type>
                </param>
                <param name="lpSelectorEntry">
                    <type>LDT_ENTRY*</type>
                </param>
            </function>
            <function name="SetThreadExecutionState" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="EXECUTION_STATE">uint</type>
                <param name="esFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="PowerCreateRequest" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="Context">
                    <type>REASON_CONTEXT*</type>
                </param>
            </function>
            <function name="PowerSetRequest" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="PowerRequest">
                    <type>IntPtr</type>
                </param>
                <param name="RequestType">
                    <type>POWER_REQUEST_TYPE</type>
                </param>
            </function>
            <function name="PowerClearRequest" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="PowerRequest">
                    <type>IntPtr</type>
                </param>
                <param name="RequestType">
                    <type>POWER_REQUEST_TYPE</type>
                </param>
            </function>
            <function name="SetFileCompletionNotificationModes" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="FileHandle">
                    <type>IntPtr</type>
                </param>
                <param name="Flags">
                    <type>byte</type>
                </param>
            </function>
            <function name="Wow64GetThreadSelectorEntry" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hThread">
                    <type>IntPtr</type>
                </param>
                <param name="dwSelector">
                    <type>uint</type>
                </param>
                <param name="lpSelectorEntry">
                    <type>WOW64_LDT_ENTRY*</type>
                </param>
            </function>
            <function name="DebugSetProcessKillOnExit" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="KillOnExit">
                    <type>int</type>
                </param>
            </function>
            <function name="DebugBreakProcess" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="Process">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="PulseEvent" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hEvent">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GlobalDeleteAtom" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="ATOM">ushort</type>
                <param name="nAtom">
                    <type>ushort</type>
                </param>
            </function>
            <function name="InitAtomTable" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="nSize">
                    <type>uint</type>
                </param>
            </function>
            <function name="DeleteAtom" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="ATOM">ushort</type>
                <param name="nAtom">
                    <type>ushort</type>
                </param>
            </function>
            <function name="SetHandleCount" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="UINT">uint</type>
                <param name="uNumber">
                    <type>uint</type>
                </param>
            </function>
            <function name="RequestDeviceWakeup" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hDevice">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="CancelDeviceWakeupRequest" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hDevice">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GetDevicePowerState" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hDevice">
                    <type>IntPtr</type>
                </param>
                <param name="pfOn">
                    <type>int*</type>
                </param>
            </function>
            <function name="SetMessageWaitingIndicator" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hMsgIndicator">
                    <type>IntPtr</type>
                </param>
                <param name="ulMsgCount">
                    <type>uint</type>
                </param>
            </function>
            <function name="SetFileShortNameA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="lpShortName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="SetFileShortNameW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="lpShortName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="LoadModule" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpModuleName">
                    <type>sbyte*</type>
                </param>
                <param name="lpParameterBlock">
                    <type>void*</type>
                </param>
            </function>
            <function name="WinExec" access="public" lib="kernel32" static="true">
                <type native="UINT">uint</type>
                <param name="lpCmdLine">
                    <type>sbyte*</type>
                </param>
                <param name="uCmdShow">
                    <type>uint</type>
                </param>
            </function>
            <function name="ClearCommBreak" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="ClearCommError" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="lpErrors">
                    <type>uint*</type>
                </param>
                <param name="lpStat">
                    <type>COMSTAT*</type>
                </param>
            </function>
            <function name="SetupComm" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="dwInQueue">
                    <type>uint</type>
                </param>
                <param name="dwOutQueue">
                    <type>uint</type>
                </param>
            </function>
            <function name="EscapeCommFunction" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="dwFunc">
                    <type>uint</type>
                </param>
            </function>
            <function name="GetCommConfig" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCommDev">
                    <type>IntPtr</type>
                </param>
                <param name="lpCC">
                    <type>COMMCONFIG*</type>
                </param>
                <param name="lpdwSize">
                    <type>uint*</type>
                </param>
            </function>
            <function name="GetCommMask" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="lpEvtMask">
                    <type>uint*</type>
                </param>
            </function>
            <function name="GetCommProperties" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="lpCommProp">
                    <type>COMMPROP*</type>
                </param>
            </function>
            <function name="GetCommModemStatus" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="lpModemStat">
                    <type>uint*</type>
                </param>
            </function>
            <function name="GetCommState" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="lpDCB">
                    <type>DCB*</type>
                </param>
            </function>
            <function name="GetCommTimeouts" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="lpCommTimeouts">
                    <type>COMMTIMEOUTS*</type>
                </param>
            </function>
            <function name="PurgeComm" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="SetCommBreak" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="SetCommConfig" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hCommDev">
                    <type>IntPtr</type>
                </param>
                <param name="lpCC">
                    <type>COMMCONFIG*</type>
                </param>
                <param name="dwSize">
                    <type>uint</type>
                </param>
            </function>
            <function name="SetCommMask" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="dwEvtMask">
                    <type>uint</type>
                </param>
            </function>
            <function name="SetCommState" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="lpDCB">
                    <type>DCB*</type>
                </param>
            </function>
            <function name="SetCommTimeouts" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="lpCommTimeouts">
                    <type>COMMTIMEOUTS*</type>
                </param>
            </function>
            <function name="TransmitCommChar" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="cChar">
                    <type>sbyte</type>
                </param>
            </function>
            <function name="WaitCommEvent" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="lpEvtMask">
                    <type>uint*</type>
                </param>
                <param name="lpOverlapped">
                    <type>OVERLAPPED*</type>
                </param>
            </function>
            <function name="OpenCommPort" access="public" lib="KernelBase" static="true" unsafe="true">
                <type native="HANDLE">IntPtr</type>
                <param name="uPortNumber">
                    <type>uint</type>
                </param>
                <param name="dwDesiredAccess">
                    <type>uint</type>
                </param>
                <param name="dwFlagsAndAttributes">
                    <type>uint</type>
                </param>
            </function>
            <function name="GetCommPorts" access="public" lib="kernelbase" static="true">
                <type native="ULONG">uint</type>
                <param name="lpPortNumbers">
                    <type>uint*</type>
                </param>
                <param name="uPortNumbersCount">
                    <type>uint</type>
                </param>
                <param name="puPortNumbersFound">
                    <type>uint*</type>
                </param>
            </function>
            <function name="SetTapePosition" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="DWORD">uint</type>
                <param name="hDevice">
                    <type>IntPtr</type>
                </param>
                <param name="dwPositionMethod">
                    <type>uint</type>
                </param>
                <param name="dwPartition">
                    <type>uint</type>
                </param>
                <param name="dwOffsetLow">
                    <type>uint</type>
                </param>
                <param name="dwOffsetHigh">
                    <type>uint</type>
                </param>
                <param name="bImmediate">
                    <type>int</type>
                </param>
            </function>
            <function name="GetTapePosition" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="hDevice">
                    <type>IntPtr</type>
                </param>
                <param name="dwPositionType">
                    <type>uint</type>
                </param>
                <param name="lpdwPartition">
                    <type>uint*</type>
                </param>
                <param name="lpdwOffsetLow">
                    <type>uint*</type>
                </param>
                <param name="lpdwOffsetHigh">
                    <type>uint*</type>
                </param>
            </function>
            <function name="PrepareTape" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="DWORD">uint</type>
                <param name="hDevice">
                    <type>IntPtr</type>
                </param>
                <param name="dwOperation">
                    <type>uint</type>
                </param>
                <param name="bImmediate">
                    <type>int</type>
                </param>
            </function>
            <function name="EraseTape" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="DWORD">uint</type>
                <param name="hDevice">
                    <type>IntPtr</type>
                </param>
                <param name="dwEraseType">
                    <type>uint</type>
                </param>
                <param name="bImmediate">
                    <type>int</type>
                </param>
            </function>
            <function name="CreateTapePartition" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="DWORD">uint</type>
                <param name="hDevice">
                    <type>IntPtr</type>
                </param>
                <param name="dwPartitionMethod">
                    <type>uint</type>
                </param>
                <param name="dwCount">
                    <type>uint</type>
                </param>
                <param name="dwSize">
                    <type>uint</type>
                </param>
            </function>
            <function name="WriteTapemark" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="DWORD">uint</type>
                <param name="hDevice">
                    <type>IntPtr</type>
                </param>
                <param name="dwTapemarkType">
                    <type>uint</type>
                </param>
                <param name="dwTapemarkCount">
                    <type>uint</type>
                </param>
                <param name="bImmediate">
                    <type>int</type>
                </param>
            </function>
            <function name="GetTapeStatus" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="DWORD">uint</type>
                <param name="hDevice">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GetTapeParameters" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="hDevice">
                    <type>IntPtr</type>
                </param>
                <param name="dwOperation">
                    <type>uint</type>
                </param>
                <param name="lpdwSize">
                    <type>uint*</type>
                </param>
                <param name="lpTapeInformation">
                    <type>void*</type>
                </param>
            </function>
            <function name="SetTapeParameters" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="hDevice">
                    <type>IntPtr</type>
                </param>
                <param name="dwOperation">
                    <type>uint</type>
                </param>
                <param name="lpTapeInformation">
                    <type>void*</type>
                </param>
            </function>
            <function name="MulDiv" access="public" lib="kernel32" static="true" unsafe="true">
                <type>int</type>
                <param name="nNumber">
                    <type>int</type>
                </param>
                <param name="nNumerator">
                    <type>int</type>
                </param>
                <param name="nDenominator">
                    <type>int</type>
                </param>
            </function>
            <function name="GetSystemDEPPolicy" access="public" lib="kernel32" static="true" unsafe="true">
                <type>DEP_SYSTEM_POLICY_TYPE</type>
            </function>
            <function name="GetSystemRegistryQuota" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pdwQuotaAllowed">
                    <type>uint*</type>
                </param>
                <param name="pdwQuotaUsed">
                    <type>uint*</type>
                </param>
            </function>
            <function name="FileTimeToDosDateTime" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileTime">
                    <type>FILETIME*</type>
                </param>
                <param name="lpFatDate">
                    <type>ushort*</type>
                </param>
                <param name="lpFatTime">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="DosDateTimeToFileTime" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="wFatDate">
                    <type>ushort</type>
                </param>
                <param name="wFatTime">
                    <type>ushort</type>
                </param>
                <param name="lpFileTime">
                    <type>FILETIME*</type>
                </param>
            </function>
            <function name="FormatMessageA" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="lpSource">
                    <type>void*</type>
                </param>
                <param name="dwMessageId">
                    <type>uint</type>
                </param>
                <param name="dwLanguageId">
                    <type>uint</type>
                </param>
                <param name="lpBuffer">
                    <type>sbyte*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
                <param name="Arguments">
                    <type>sbyte**</type>
                </param>
            </function>
            <function name="FormatMessageW" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="lpSource">
                    <type>void*</type>
                </param>
                <param name="dwMessageId">
                    <type>uint</type>
                </param>
                <param name="dwLanguageId">
                    <type>uint</type>
                </param>
                <param name="lpBuffer">
                    <type>ushort*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
                <param name="Arguments">
                    <type>sbyte**</type>
                </param>
            </function>
            <function name="CreateMailslotA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
                <param name="nMaxMessageSize">
                    <type>uint</type>
                </param>
                <param name="lReadTimeout">
                    <type>uint</type>
                </param>
                <param name="lpSecurityAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
            </function>
            <function name="CreateMailslotW" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpName">
                    <type>ushort*</type>
                </param>
                <param name="nMaxMessageSize">
                    <type>uint</type>
                </param>
                <param name="lReadTimeout">
                    <type>uint</type>
                </param>
                <param name="lpSecurityAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
            </function>
            <function name="GetMailslotInfo" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hMailslot">
                    <type>IntPtr</type>
                </param>
                <param name="lpMaxMessageSize">
                    <type>uint*</type>
                </param>
                <param name="lpNextSize">
                    <type>uint*</type>
                </param>
                <param name="lpMessageCount">
                    <type>uint*</type>
                </param>
                <param name="lpReadTimeout">
                    <type>uint*</type>
                </param>
            </function>
            <function name="SetMailslotInfo" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hMailslot">
                    <type>IntPtr</type>
                </param>
                <param name="lReadTimeout">
                    <type>uint</type>
                </param>
            </function>
            <function name="EncryptFileA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="EncryptFileW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="DecryptFileA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
                <param name="dwReserved">
                    <type>uint</type>
                </param>
            </function>
            <function name="DecryptFileW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
                <param name="dwReserved">
                    <type>uint</type>
                </param>
            </function>
            <function name="FileEncryptionStatusA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpStatus">
                    <type>uint*</type>
                </param>
            </function>
            <function name="FileEncryptionStatusW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpStatus">
                    <type>uint*</type>
                </param>
            </function>
            <function name="OpenEncryptedFileRawA" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
                <param name="ulFlags">
                    <type>uint</type>
                </param>
                <param name="pvContext">
                    <type>void**</type>
                </param>
            </function>
            <function name="OpenEncryptedFileRawW" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
                <param name="ulFlags">
                    <type>uint</type>
                </param>
                <param name="pvContext">
                    <type>void**</type>
                </param>
            </function>
            <function name="ReadEncryptedFileRaw" access="public" lib="advapi32" static="true">
                <type native="DWORD">uint</type>
                <param name="pfExportCallback">
                    <type>delegate* unmanaged&lt;byte*, void*, uint, uint&gt;</type>
                </param>
                <param name="pvCallbackContext">
                    <type>void*</type>
                </param>
                <param name="pvContext">
                    <type>void*</type>
                </param>
            </function>
            <function name="WriteEncryptedFileRaw" access="public" lib="advapi32" static="true">
                <type native="DWORD">uint</type>
                <param name="pfImportCallback">
                    <type>delegate* unmanaged&lt;byte*, void*, uint*, uint&gt;</type>
                </param>
                <param name="pvCallbackContext">
                    <type>void*</type>
                </param>
                <param name="pvContext">
                    <type>void*</type>
                </param>
            </function>
            <function name="CloseEncryptedFileRaw" access="public" lib="advapi32" static="true">
                <type>void</type>
                <param name="pvContext">
                    <type>void*</type>
                </param>
            </function>
            <function name="lstrcmpA" access="public" lib="kernel32" static="true">
                <type>int</type>
                <param name="lpString1">
                    <type>sbyte*</type>
                </param>
                <param name="lpString2">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="lstrcmpW" access="public" lib="kernel32" static="true">
                <type>int</type>
                <param name="lpString1">
                    <type>ushort*</type>
                </param>
                <param name="lpString2">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="lstrcmpiA" access="public" lib="kernel32" static="true">
                <type>int</type>
                <param name="lpString1">
                    <type>sbyte*</type>
                </param>
                <param name="lpString2">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="lstrcmpiW" access="public" lib="kernel32" static="true">
                <type>int</type>
                <param name="lpString1">
                    <type>ushort*</type>
                </param>
                <param name="lpString2">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="lstrcpynA" access="public" lib="kernel32" static="true">
                <type native="LPSTR">sbyte*</type>
                <param name="lpString1">
                    <type>sbyte*</type>
                </param>
                <param name="lpString2">
                    <type>sbyte*</type>
                </param>
                <param name="iMaxLength">
                    <type>int</type>
                </param>
            </function>
            <function name="lstrcpynW" access="public" lib="kernel32" static="true">
                <type native="LPWSTR">ushort*</type>
                <param name="lpString1">
                    <type>ushort*</type>
                </param>
                <param name="lpString2">
                    <type>ushort*</type>
                </param>
                <param name="iMaxLength">
                    <type>int</type>
                </param>
            </function>
            <function name="lstrcpyA" access="public" lib="kernel32" static="true">
                <type native="LPSTR">sbyte*</type>
                <param name="lpString1">
                    <type>sbyte*</type>
                </param>
                <param name="lpString2">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="lstrcpyW" access="public" lib="kernel32" static="true">
                <type native="LPWSTR">ushort*</type>
                <param name="lpString1">
                    <type>ushort*</type>
                </param>
                <param name="lpString2">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="lstrcatA" access="public" lib="kernel32" static="true">
                <type native="LPSTR">sbyte*</type>
                <param name="lpString1">
                    <type>sbyte*</type>
                </param>
                <param name="lpString2">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="lstrcatW" access="public" lib="kernel32" static="true">
                <type native="LPWSTR">ushort*</type>
                <param name="lpString1">
                    <type>ushort*</type>
                </param>
                <param name="lpString2">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="lstrlenA" access="public" lib="kernel32" static="true">
                <type>int</type>
                <param name="lpString">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="lstrlenW" access="public" lib="kernel32" static="true">
                <type>int</type>
                <param name="lpString">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="OpenFile" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="HFILE">int</type>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpReOpenBuff">
                    <type>OFSTRUCT*</type>
                </param>
                <param name="uStyle">
                    <type>uint</type>
                </param>
            </function>
            <function name="_lopen" access="public" lib="kernel32" static="true">
                <type native="HFILE">int</type>
                <param name="lpPathName">
                    <type>sbyte*</type>
                </param>
                <param name="iReadWrite">
                    <type>int</type>
                </param>
            </function>
            <function name="_lcreat" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="HFILE">int</type>
                <param name="lpPathName">
                    <type>sbyte*</type>
                </param>
                <param name="iAttribute">
                    <type>int</type>
                </param>
            </function>
            <function name="_lread" access="public" lib="kernel32" static="true">
                <type native="UINT">uint</type>
                <param name="hFile">
                    <type>int</type>
                </param>
                <param name="lpBuffer">
                    <type>void*</type>
                </param>
                <param name="uBytes">
                    <type>uint</type>
                </param>
            </function>
            <function name="_lwrite" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="UINT">uint</type>
                <param name="hFile">
                    <type>int</type>
                </param>
                <param name="lpBuffer">
                    <type>sbyte*</type>
                </param>
                <param name="uBytes">
                    <type>uint</type>
                </param>
            </function>
            <function name="_hread" access="public" lib="kernel32" static="true">
                <type native="long">int</type>
                <param name="hFile">
                    <type>int</type>
                </param>
                <param name="lpBuffer">
                    <type>void*</type>
                </param>
                <param name="lBytes">
                    <type>int</type>
                </param>
            </function>
            <function name="_hwrite" access="public" lib="kernel32" static="true">
                <type native="long">int</type>
                <param name="hFile">
                    <type>int</type>
                </param>
                <param name="lpBuffer">
                    <type>sbyte*</type>
                </param>
                <param name="lBytes">
                    <type>int</type>
                </param>
            </function>
            <function name="_lclose" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="HFILE">int</type>
                <param name="hFile">
                    <type>int</type>
                </param>
            </function>
            <function name="_llseek" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="LONG">int</type>
                <param name="hFile">
                    <type>int</type>
                </param>
                <param name="lOffset">
                    <type>int</type>
                </param>
                <param name="iOrigin">
                    <type>int</type>
                </param>
            </function>
            <function name="IsTextUnicode" access="public" lib="advapi32" static="true">
                <type native="BOOL">int</type>
                <param name="lpv">
                    <type>void*</type>
                </param>
                <param name="iSize">
                    <type>int</type>
                </param>
                <param name="lpiResult">
                    <type>int*</type>
                </param>
            </function>
            <function name="BackupRead" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="lpBuffer">
                    <type>byte*</type>
                </param>
                <param name="nNumberOfBytesToRead">
                    <type>uint</type>
                </param>
                <param name="lpNumberOfBytesRead">
                    <type>uint*</type>
                </param>
                <param name="bAbort">
                    <type>int</type>
                </param>
                <param name="bProcessSecurity">
                    <type>int</type>
                </param>
                <param name="lpContext">
                    <type>void**</type>
                </param>
            </function>
            <function name="BackupSeek" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="dwLowBytesToSeek">
                    <type>uint</type>
                </param>
                <param name="dwHighBytesToSeek">
                    <type>uint</type>
                </param>
                <param name="lpdwLowByteSeeked">
                    <type>uint*</type>
                </param>
                <param name="lpdwHighByteSeeked">
                    <type>uint*</type>
                </param>
                <param name="lpContext">
                    <type>void**</type>
                </param>
            </function>
            <function name="BackupWrite" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="lpBuffer">
                    <type>byte*</type>
                </param>
                <param name="nNumberOfBytesToWrite">
                    <type>uint</type>
                </param>
                <param name="lpNumberOfBytesWritten">
                    <type>uint*</type>
                </param>
                <param name="bAbort">
                    <type>int</type>
                </param>
                <param name="bProcessSecurity">
                    <type>int</type>
                </param>
                <param name="lpContext">
                    <type>void**</type>
                </param>
            </function>
            <function name="OpenMutexA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="dwDesiredAccess">
                    <type>uint</type>
                </param>
                <param name="bInheritHandle">
                    <type>int</type>
                </param>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="CreateSemaphoreA" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpSemaphoreAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
                <param name="lInitialCount">
                    <type>int</type>
                </param>
                <param name="lMaximumCount">
                    <type>int</type>
                </param>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="OpenSemaphoreA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="dwDesiredAccess">
                    <type>uint</type>
                </param>
                <param name="bInheritHandle">
                    <type>int</type>
                </param>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="CreateWaitableTimerA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpTimerAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
                <param name="bManualReset">
                    <type>int</type>
                </param>
                <param name="lpTimerName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="OpenWaitableTimerA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="dwDesiredAccess">
                    <type>uint</type>
                </param>
                <param name="bInheritHandle">
                    <type>int</type>
                </param>
                <param name="lpTimerName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="CreateSemaphoreExA" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpSemaphoreAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
                <param name="lInitialCount">
                    <type>int</type>
                </param>
                <param name="lMaximumCount">
                    <type>int</type>
                </param>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="dwDesiredAccess">
                    <type>uint</type>
                </param>
            </function>
            <function name="CreateWaitableTimerExA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpTimerAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
                <param name="lpTimerName">
                    <type>sbyte*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="dwDesiredAccess">
                    <type>uint</type>
                </param>
            </function>
            <function name="CreateFileMappingA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="lpFileMappingAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
                <param name="flProtect">
                    <type>uint</type>
                </param>
                <param name="dwMaximumSizeHigh">
                    <type>uint</type>
                </param>
                <param name="dwMaximumSizeLow">
                    <type>uint</type>
                </param>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="CreateFileMappingNumaA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="lpFileMappingAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
                <param name="flProtect">
                    <type>uint</type>
                </param>
                <param name="dwMaximumSizeHigh">
                    <type>uint</type>
                </param>
                <param name="dwMaximumSizeLow">
                    <type>uint</type>
                </param>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
                <param name="nndPreferred">
                    <type>uint</type>
                </param>
            </function>
            <function name="OpenFileMappingA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="dwDesiredAccess">
                    <type>uint</type>
                </param>
                <param name="bInheritHandle">
                    <type>int</type>
                </param>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="GetLogicalDriveStringsA" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="nBufferLength">
                    <type>uint</type>
                </param>
                <param name="lpBuffer">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="LoadPackagedLibrary" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="HMODULE">IntPtr</type>
                <param name="lpwLibFileName">
                    <type>ushort*</type>
                </param>
                <param name="Reserved">
                    <type>uint</type>
                </param>
            </function>
            <function name="QueryFullProcessImageNameA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hProcess">
                    <type>IntPtr</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="lpExeName">
                    <type>sbyte*</type>
                </param>
                <param name="lpdwSize">
                    <type>uint*</type>
                </param>
            </function>
            <function name="QueryFullProcessImageNameW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hProcess">
                    <type>IntPtr</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="lpExeName">
                    <type>ushort*</type>
                </param>
                <param name="lpdwSize">
                    <type>uint*</type>
                </param>
            </function>
            <function name="GetStartupInfoA" access="public" lib="kernel32" static="true">
                <type>void</type>
                <param name="lpStartupInfo">
                    <type>STARTUPINFOA*</type>
                </param>
            </function>
            <function name="GetFirmwareEnvironmentVariableA" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
                <param name="lpGuid">
                    <type>sbyte*</type>
                </param>
                <param name="pBuffer">
                    <type>void*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
            </function>
            <function name="GetFirmwareEnvironmentVariableW" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpName">
                    <type>ushort*</type>
                </param>
                <param name="lpGuid">
                    <type>ushort*</type>
                </param>
                <param name="pBuffer">
                    <type>void*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
            </function>
            <function name="GetFirmwareEnvironmentVariableExA" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
                <param name="lpGuid">
                    <type>sbyte*</type>
                </param>
                <param name="pBuffer">
                    <type>void*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
                <param name="pdwAttribubutes">
                    <type>uint*</type>
                </param>
            </function>
            <function name="GetFirmwareEnvironmentVariableExW" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpName">
                    <type>ushort*</type>
                </param>
                <param name="lpGuid">
                    <type>ushort*</type>
                </param>
                <param name="pBuffer">
                    <type>void*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
                <param name="pdwAttribubutes">
                    <type>uint*</type>
                </param>
            </function>
            <function name="SetFirmwareEnvironmentVariableA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
                <param name="lpGuid">
                    <type>sbyte*</type>
                </param>
                <param name="pValue">
                    <type>void*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
            </function>
            <function name="SetFirmwareEnvironmentVariableW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpName">
                    <type>ushort*</type>
                </param>
                <param name="lpGuid">
                    <type>ushort*</type>
                </param>
                <param name="pValue">
                    <type>void*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
            </function>
            <function name="SetFirmwareEnvironmentVariableExA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
                <param name="lpGuid">
                    <type>sbyte*</type>
                </param>
                <param name="pValue">
                    <type>void*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
                <param name="dwAttributes">
                    <type>uint</type>
                </param>
            </function>
            <function name="SetFirmwareEnvironmentVariableExW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpName">
                    <type>ushort*</type>
                </param>
                <param name="lpGuid">
                    <type>ushort*</type>
                </param>
                <param name="pValue">
                    <type>void*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
                <param name="dwAttributes">
                    <type>uint</type>
                </param>
            </function>
            <function name="GetFirmwareType" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="FirmwareType">
                    <type>FIRMWARE_TYPE*</type>
                </param>
            </function>
            <function name="IsNativeVhdBoot" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="NativeVhdBoot">
                    <type>int*</type>
                </param>
            </function>
            <function name="FindResourceA" access="public" lib="kernel32" static="true">
                <type native="HRSRC">IntPtr</type>
                <param name="hModule">
                    <type>IntPtr</type>
                </param>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
                <param name="lpType">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="FindResourceExA" access="public" lib="kernel32" static="true">
                <type native="HRSRC">IntPtr</type>
                <param name="hModule">
                    <type>IntPtr</type>
                </param>
                <param name="lpType">
                    <type>sbyte*</type>
                </param>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
                <param name="wLanguage">
                    <type>ushort</type>
                </param>
            </function>
            <function name="EnumResourceTypesA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hModule">
                    <type>IntPtr</type>
                </param>
                <param name="lpEnumFunc">
                    <type>delegate* unmanaged&lt;IntPtr, sbyte*, nint, int&gt;</type>
                </param>
                <param name="lParam">
                    <type>nint</type>
                </param>
            </function>
            <function name="EnumResourceTypesW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hModule">
                    <type>IntPtr</type>
                </param>
                <param name="lpEnumFunc">
                    <type>delegate* unmanaged&lt;IntPtr, ushort*, nint, int&gt;</type>
                </param>
                <param name="lParam">
                    <type>nint</type>
                </param>
            </function>
            <function name="EnumResourceNamesA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hModule">
                    <type>IntPtr</type>
                </param>
                <param name="lpType">
                    <type>sbyte*</type>
                </param>
                <param name="lpEnumFunc">
                    <type>delegate* unmanaged&lt;IntPtr, sbyte*, sbyte*, nint, int&gt;</type>
                </param>
                <param name="lParam">
                    <type>nint</type>
                </param>
            </function>
            <function name="EnumResourceLanguagesA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hModule">
                    <type>IntPtr</type>
                </param>
                <param name="lpType">
                    <type>sbyte*</type>
                </param>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
                <param name="lpEnumFunc">
                    <type>delegate* unmanaged&lt;IntPtr, sbyte*, sbyte*, ushort, nint, int&gt;</type>
                </param>
                <param name="lParam">
                    <type>nint</type>
                </param>
            </function>
            <function name="EnumResourceLanguagesW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hModule">
                    <type>IntPtr</type>
                </param>
                <param name="lpType">
                    <type>ushort*</type>
                </param>
                <param name="lpName">
                    <type>ushort*</type>
                </param>
                <param name="lpEnumFunc">
                    <type>delegate* unmanaged&lt;IntPtr, ushort*, ushort*, ushort, nint, int&gt;</type>
                </param>
                <param name="lParam">
                    <type>nint</type>
                </param>
            </function>
            <function name="BeginUpdateResourceA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="pFileName">
                    <type>sbyte*</type>
                </param>
                <param name="bDeleteExistingResources">
                    <type>int</type>
                </param>
            </function>
            <function name="BeginUpdateResourceW" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="pFileName">
                    <type>ushort*</type>
                </param>
                <param name="bDeleteExistingResources">
                    <type>int</type>
                </param>
            </function>
            <function name="UpdateResourceA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hUpdate">
                    <type>IntPtr</type>
                </param>
                <param name="lpType">
                    <type>sbyte*</type>
                </param>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
                <param name="wLanguage">
                    <type>ushort</type>
                </param>
                <param name="lpData">
                    <type>void*</type>
                </param>
                <param name="cb">
                    <type>uint</type>
                </param>
            </function>
            <function name="UpdateResourceW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hUpdate">
                    <type>IntPtr</type>
                </param>
                <param name="lpType">
                    <type>ushort*</type>
                </param>
                <param name="lpName">
                    <type>ushort*</type>
                </param>
                <param name="wLanguage">
                    <type>ushort</type>
                </param>
                <param name="lpData">
                    <type>void*</type>
                </param>
                <param name="cb">
                    <type>uint</type>
                </param>
            </function>
            <function name="EndUpdateResourceA" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hUpdate">
                    <type>IntPtr</type>
                </param>
                <param name="fDiscard">
                    <type>int</type>
                </param>
            </function>
            <function name="EndUpdateResourceW" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hUpdate">
                    <type>IntPtr</type>
                </param>
                <param name="fDiscard">
                    <type>int</type>
                </param>
            </function>
            <function name="GlobalAddAtomA" access="public" lib="kernel32" static="true">
                <type native="ATOM">ushort</type>
                <param name="lpString">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="GlobalAddAtomW" access="public" lib="kernel32" static="true">
                <type native="ATOM">ushort</type>
                <param name="lpString">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="GlobalAddAtomExA" access="public" lib="kernel32" static="true">
                <type native="ATOM">ushort</type>
                <param name="lpString">
                    <type>sbyte*</type>
                </param>
                <param name="Flags">
                    <type>uint</type>
                </param>
            </function>
            <function name="GlobalAddAtomExW" access="public" lib="kernel32" static="true">
                <type native="ATOM">ushort</type>
                <param name="lpString">
                    <type>ushort*</type>
                </param>
                <param name="Flags">
                    <type>uint</type>
                </param>
            </function>
            <function name="GlobalFindAtomA" access="public" lib="kernel32" static="true">
                <type native="ATOM">ushort</type>
                <param name="lpString">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="GlobalFindAtomW" access="public" lib="kernel32" static="true">
                <type native="ATOM">ushort</type>
                <param name="lpString">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="GlobalGetAtomNameA" access="public" lib="kernel32" static="true">
                <type native="UINT">uint</type>
                <param name="nAtom">
                    <type>ushort</type>
                </param>
                <param name="lpBuffer">
                    <type>sbyte*</type>
                </param>
                <param name="nSize">
                    <type>int</type>
                </param>
            </function>
            <function name="GlobalGetAtomNameW" access="public" lib="kernel32" static="true">
                <type native="UINT">uint</type>
                <param name="nAtom">
                    <type>ushort</type>
                </param>
                <param name="lpBuffer">
                    <type>ushort*</type>
                </param>
                <param name="nSize">
                    <type>int</type>
                </param>
            </function>
            <function name="AddAtomA" access="public" lib="kernel32" static="true">
                <type native="ATOM">ushort</type>
                <param name="lpString">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="AddAtomW" access="public" lib="kernel32" static="true">
                <type native="ATOM">ushort</type>
                <param name="lpString">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="FindAtomA" access="public" lib="kernel32" static="true">
                <type native="ATOM">ushort</type>
                <param name="lpString">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="FindAtomW" access="public" lib="kernel32" static="true">
                <type native="ATOM">ushort</type>
                <param name="lpString">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="GetAtomNameA" access="public" lib="kernel32" static="true">
                <type native="UINT">uint</type>
                <param name="nAtom">
                    <type>ushort</type>
                </param>
                <param name="lpBuffer">
                    <type>sbyte*</type>
                </param>
                <param name="nSize">
                    <type>int</type>
                </param>
            </function>
            <function name="GetAtomNameW" access="public" lib="kernel32" static="true">
                <type native="UINT">uint</type>
                <param name="nAtom">
                    <type>ushort</type>
                </param>
                <param name="lpBuffer">
                    <type>ushort*</type>
                </param>
                <param name="nSize">
                    <type>int</type>
                </param>
            </function>
            <function name="GetProfileIntA" access="public" lib="kernel32" static="true">
                <type native="UINT">uint</type>
                <param name="lpAppName">
                    <type>sbyte*</type>
                </param>
                <param name="lpKeyName">
                    <type>sbyte*</type>
                </param>
                <param name="nDefault">
                    <type>int</type>
                </param>
            </function>
            <function name="GetProfileIntW" access="public" lib="kernel32" static="true">
                <type native="UINT">uint</type>
                <param name="lpAppName">
                    <type>ushort*</type>
                </param>
                <param name="lpKeyName">
                    <type>ushort*</type>
                </param>
                <param name="nDefault">
                    <type>int</type>
                </param>
            </function>
            <function name="GetProfileStringA" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpAppName">
                    <type>sbyte*</type>
                </param>
                <param name="lpKeyName">
                    <type>sbyte*</type>
                </param>
                <param name="lpDefault">
                    <type>sbyte*</type>
                </param>
                <param name="lpReturnedString">
                    <type>sbyte*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
            </function>
            <function name="GetProfileStringW" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpAppName">
                    <type>ushort*</type>
                </param>
                <param name="lpKeyName">
                    <type>ushort*</type>
                </param>
                <param name="lpDefault">
                    <type>ushort*</type>
                </param>
                <param name="lpReturnedString">
                    <type>ushort*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
            </function>
            <function name="WriteProfileStringA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpAppName">
                    <type>sbyte*</type>
                </param>
                <param name="lpKeyName">
                    <type>sbyte*</type>
                </param>
                <param name="lpString">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="WriteProfileStringW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpAppName">
                    <type>ushort*</type>
                </param>
                <param name="lpKeyName">
                    <type>ushort*</type>
                </param>
                <param name="lpString">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="GetProfileSectionA" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpAppName">
                    <type>sbyte*</type>
                </param>
                <param name="lpReturnedString">
                    <type>sbyte*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
            </function>
            <function name="GetProfileSectionW" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpAppName">
                    <type>ushort*</type>
                </param>
                <param name="lpReturnedString">
                    <type>ushort*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
            </function>
            <function name="WriteProfileSectionA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpAppName">
                    <type>sbyte*</type>
                </param>
                <param name="lpString">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="WriteProfileSectionW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpAppName">
                    <type>ushort*</type>
                </param>
                <param name="lpString">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="GetPrivateProfileIntA" access="public" lib="kernel32" static="true">
                <type native="UINT">uint</type>
                <param name="lpAppName">
                    <type>sbyte*</type>
                </param>
                <param name="lpKeyName">
                    <type>sbyte*</type>
                </param>
                <param name="nDefault">
                    <type>int</type>
                </param>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="GetPrivateProfileIntW" access="public" lib="kernel32" static="true">
                <type native="UINT">uint</type>
                <param name="lpAppName">
                    <type>ushort*</type>
                </param>
                <param name="lpKeyName">
                    <type>ushort*</type>
                </param>
                <param name="nDefault">
                    <type>int</type>
                </param>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="GetPrivateProfileStringA" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpAppName">
                    <type>sbyte*</type>
                </param>
                <param name="lpKeyName">
                    <type>sbyte*</type>
                </param>
                <param name="lpDefault">
                    <type>sbyte*</type>
                </param>
                <param name="lpReturnedString">
                    <type>sbyte*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="GetPrivateProfileStringW" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpAppName">
                    <type>ushort*</type>
                </param>
                <param name="lpKeyName">
                    <type>ushort*</type>
                </param>
                <param name="lpDefault">
                    <type>ushort*</type>
                </param>
                <param name="lpReturnedString">
                    <type>ushort*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="WritePrivateProfileStringA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpAppName">
                    <type>sbyte*</type>
                </param>
                <param name="lpKeyName">
                    <type>sbyte*</type>
                </param>
                <param name="lpString">
                    <type>sbyte*</type>
                </param>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="WritePrivateProfileStringW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpAppName">
                    <type>ushort*</type>
                </param>
                <param name="lpKeyName">
                    <type>ushort*</type>
                </param>
                <param name="lpString">
                    <type>ushort*</type>
                </param>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="GetPrivateProfileSectionA" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpAppName">
                    <type>sbyte*</type>
                </param>
                <param name="lpReturnedString">
                    <type>sbyte*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="GetPrivateProfileSectionW" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpAppName">
                    <type>ushort*</type>
                </param>
                <param name="lpReturnedString">
                    <type>ushort*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="WritePrivateProfileSectionA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpAppName">
                    <type>sbyte*</type>
                </param>
                <param name="lpString">
                    <type>sbyte*</type>
                </param>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="WritePrivateProfileSectionW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpAppName">
                    <type>ushort*</type>
                </param>
                <param name="lpString">
                    <type>ushort*</type>
                </param>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="GetPrivateProfileSectionNamesA" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpszReturnBuffer">
                    <type>sbyte*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="GetPrivateProfileSectionNamesW" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpszReturnBuffer">
                    <type>ushort*</type>
                </param>
                <param name="nSize">
                    <type>uint</type>
                </param>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="GetPrivateProfileStructA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszSection">
                    <type>sbyte*</type>
                </param>
                <param name="lpszKey">
                    <type>sbyte*</type>
                </param>
                <param name="lpStruct">
                    <type>void*</type>
                </param>
                <param name="uSizeStruct">
                    <type>uint</type>
                </param>
                <param name="szFile">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="GetPrivateProfileStructW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszSection">
                    <type>ushort*</type>
                </param>
                <param name="lpszKey">
                    <type>ushort*</type>
                </param>
                <param name="lpStruct">
                    <type>void*</type>
                </param>
                <param name="uSizeStruct">
                    <type>uint</type>
                </param>
                <param name="szFile">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="WritePrivateProfileStructA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszSection">
                    <type>sbyte*</type>
                </param>
                <param name="lpszKey">
                    <type>sbyte*</type>
                </param>
                <param name="lpStruct">
                    <type>void*</type>
                </param>
                <param name="uSizeStruct">
                    <type>uint</type>
                </param>
                <param name="szFile">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="WritePrivateProfileStructW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszSection">
                    <type>ushort*</type>
                </param>
                <param name="lpszKey">
                    <type>ushort*</type>
                </param>
                <param name="lpStruct">
                    <type>void*</type>
                </param>
                <param name="uSizeStruct">
                    <type>uint</type>
                </param>
                <param name="szFile">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="Wow64EnableWow64FsRedirection" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="BOOLEAN">byte</type>
                <param name="Wow64FsEnableRedirection">
                    <type>byte</type>
                </param>
            </function>
            <function name="SetDllDirectoryA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpPathName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="SetDllDirectoryW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpPathName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="GetDllDirectoryA" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="nBufferLength">
                    <type>uint</type>
                </param>
                <param name="lpBuffer">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="GetDllDirectoryW" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="nBufferLength">
                    <type>uint</type>
                </param>
                <param name="lpBuffer">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="SetSearchPathMode" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="Flags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CreateDirectoryExA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpTemplateDirectory">
                    <type>sbyte*</type>
                </param>
                <param name="lpNewDirectory">
                    <type>sbyte*</type>
                </param>
                <param name="lpSecurityAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
            </function>
            <function name="CreateDirectoryExW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpTemplateDirectory">
                    <type>ushort*</type>
                </param>
                <param name="lpNewDirectory">
                    <type>ushort*</type>
                </param>
                <param name="lpSecurityAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
            </function>
            <function name="CreateDirectoryTransactedA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpTemplateDirectory">
                    <type>sbyte*</type>
                </param>
                <param name="lpNewDirectory">
                    <type>sbyte*</type>
                </param>
                <param name="lpSecurityAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="CreateDirectoryTransactedW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpTemplateDirectory">
                    <type>ushort*</type>
                </param>
                <param name="lpNewDirectory">
                    <type>ushort*</type>
                </param>
                <param name="lpSecurityAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="RemoveDirectoryTransactedA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpPathName">
                    <type>sbyte*</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="RemoveDirectoryTransactedW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpPathName">
                    <type>ushort*</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GetFullPathNameTransactedA" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
                <param name="nBufferLength">
                    <type>uint</type>
                </param>
                <param name="lpBuffer">
                    <type>sbyte*</type>
                </param>
                <param name="lpFilePart">
                    <type>sbyte**</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GetFullPathNameTransactedW" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
                <param name="nBufferLength">
                    <type>uint</type>
                </param>
                <param name="lpBuffer">
                    <type>ushort*</type>
                </param>
                <param name="lpFilePart">
                    <type>ushort**</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="DefineDosDeviceA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="lpDeviceName">
                    <type>sbyte*</type>
                </param>
                <param name="lpTargetPath">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="QueryDosDeviceA" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpDeviceName">
                    <type>sbyte*</type>
                </param>
                <param name="lpTargetPath">
                    <type>sbyte*</type>
                </param>
                <param name="ucchMax">
                    <type>uint</type>
                </param>
            </function>
            <function name="CreateFileTransactedA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
                <param name="dwDesiredAccess">
                    <type>uint</type>
                </param>
                <param name="dwShareMode">
                    <type>uint</type>
                </param>
                <param name="lpSecurityAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
                <param name="dwCreationDisposition">
                    <type>uint</type>
                </param>
                <param name="dwFlagsAndAttributes">
                    <type>uint</type>
                </param>
                <param name="hTemplateFile">
                    <type>IntPtr</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
                <param name="pusMiniVersion">
                    <type>ushort*</type>
                </param>
                <param name="lpExtendedParameter">
                    <type>void*</type>
                </param>
            </function>
            <function name="CreateFileTransactedW" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
                <param name="dwDesiredAccess">
                    <type>uint</type>
                </param>
                <param name="dwShareMode">
                    <type>uint</type>
                </param>
                <param name="lpSecurityAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
                <param name="dwCreationDisposition">
                    <type>uint</type>
                </param>
                <param name="dwFlagsAndAttributes">
                    <type>uint</type>
                </param>
                <param name="hTemplateFile">
                    <type>IntPtr</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
                <param name="pusMiniVersion">
                    <type>ushort*</type>
                </param>
                <param name="lpExtendedParameter">
                    <type>void*</type>
                </param>
            </function>
            <function name="ReOpenFile" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="HANDLE">IntPtr</type>
                <param name="hOriginalFile">
                    <type>IntPtr</type>
                </param>
                <param name="dwDesiredAccess">
                    <type>uint</type>
                </param>
                <param name="dwShareMode">
                    <type>uint</type>
                </param>
                <param name="dwFlagsAndAttributes">
                    <type>uint</type>
                </param>
            </function>
            <function name="SetFileAttributesTransactedA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
                <param name="dwFileAttributes">
                    <type>uint</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="SetFileAttributesTransactedW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
                <param name="dwFileAttributes">
                    <type>uint</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GetFileAttributesTransactedA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
                <param name="fInfoLevelId">
                    <type>GET_FILEEX_INFO_LEVELS</type>
                </param>
                <param name="lpFileInformation">
                    <type>void*</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GetFileAttributesTransactedW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
                <param name="fInfoLevelId">
                    <type>GET_FILEEX_INFO_LEVELS</type>
                </param>
                <param name="lpFileInformation">
                    <type>void*</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GetCompressedFileSizeTransactedA" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpFileSizeHigh">
                    <type>uint*</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GetCompressedFileSizeTransactedW" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpFileSizeHigh">
                    <type>uint*</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="DeleteFileTransactedA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="DeleteFileTransactedW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="CheckNameLegalDOS8Dot3A" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
                <param name="lpOemName">
                    <type>sbyte*</type>
                </param>
                <param name="OemNameSize">
                    <type>uint</type>
                </param>
                <param name="pbNameContainsSpaces">
                    <type>int*</type>
                </param>
                <param name="pbNameLegal">
                    <type>int*</type>
                </param>
            </function>
            <function name="CheckNameLegalDOS8Dot3W" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpName">
                    <type>ushort*</type>
                </param>
                <param name="lpOemName">
                    <type>sbyte*</type>
                </param>
                <param name="OemNameSize">
                    <type>uint</type>
                </param>
                <param name="pbNameContainsSpaces">
                    <type>int*</type>
                </param>
                <param name="pbNameLegal">
                    <type>int*</type>
                </param>
            </function>
            <function name="FindFirstFileTransactedA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
                <param name="fInfoLevelId">
                    <type>FINDEX_INFO_LEVELS</type>
                </param>
                <param name="lpFindFileData">
                    <type>void*</type>
                </param>
                <param name="fSearchOp">
                    <type>FINDEX_SEARCH_OPS</type>
                </param>
                <param name="lpSearchFilter">
                    <type>void*</type>
                </param>
                <param name="dwAdditionalFlags">
                    <type>uint</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="FindFirstFileTransactedW" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
                <param name="fInfoLevelId">
                    <type>FINDEX_INFO_LEVELS</type>
                </param>
                <param name="lpFindFileData">
                    <type>void*</type>
                </param>
                <param name="fSearchOp">
                    <type>FINDEX_SEARCH_OPS</type>
                </param>
                <param name="lpSearchFilter">
                    <type>void*</type>
                </param>
                <param name="dwAdditionalFlags">
                    <type>uint</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="CopyFileA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpExistingFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpNewFileName">
                    <type>sbyte*</type>
                </param>
                <param name="bFailIfExists">
                    <type>int</type>
                </param>
            </function>
            <function name="CopyFileW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpExistingFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpNewFileName">
                    <type>ushort*</type>
                </param>
                <param name="bFailIfExists">
                    <type>int</type>
                </param>
            </function>
            <function name="CopyFileExA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpExistingFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpNewFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpProgressRoutine">
                    <type>delegate* unmanaged&lt;LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, uint, uint, IntPtr, IntPtr, void*, uint&gt;</type>
                </param>
                <param name="lpData">
                    <type>void*</type>
                </param>
                <param name="pbCancel">
                    <type>int*</type>
                </param>
                <param name="dwCopyFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CopyFileExW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpExistingFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpNewFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpProgressRoutine">
                    <type>delegate* unmanaged&lt;LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, uint, uint, IntPtr, IntPtr, void*, uint&gt;</type>
                </param>
                <param name="lpData">
                    <type>void*</type>
                </param>
                <param name="pbCancel">
                    <type>int*</type>
                </param>
                <param name="dwCopyFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CopyFileTransactedA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpExistingFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpNewFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpProgressRoutine">
                    <type>delegate* unmanaged&lt;LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, uint, uint, IntPtr, IntPtr, void*, uint&gt;</type>
                </param>
                <param name="lpData">
                    <type>void*</type>
                </param>
                <param name="pbCancel">
                    <type>int*</type>
                </param>
                <param name="dwCopyFlags">
                    <type>uint</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="CopyFileTransactedW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpExistingFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpNewFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpProgressRoutine">
                    <type>delegate* unmanaged&lt;LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, uint, uint, IntPtr, IntPtr, void*, uint&gt;</type>
                </param>
                <param name="lpData">
                    <type>void*</type>
                </param>
                <param name="pbCancel">
                    <type>int*</type>
                </param>
                <param name="dwCopyFlags">
                    <type>uint</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="CopyFile2" access="public" lib="kernel32" static="true">
                <type native="HRESULT">int</type>
                <param name="pwszExistingFileName">
                    <type>ushort*</type>
                </param>
                <param name="pwszNewFileName">
                    <type>ushort*</type>
                </param>
                <param name="pExtendedParameters">
                    <type>COPYFILE2_EXTENDED_PARAMETERS*</type>
                </param>
            </function>
            <function name="MoveFileA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpExistingFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpNewFileName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="MoveFileW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpExistingFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpNewFileName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="MoveFileExA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpExistingFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpNewFileName">
                    <type>sbyte*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="MoveFileExW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpExistingFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpNewFileName">
                    <type>ushort*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="MoveFileWithProgressA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpExistingFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpNewFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpProgressRoutine">
                    <type>delegate* unmanaged&lt;LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, uint, uint, IntPtr, IntPtr, void*, uint&gt;</type>
                </param>
                <param name="lpData">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="MoveFileWithProgressW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpExistingFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpNewFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpProgressRoutine">
                    <type>delegate* unmanaged&lt;LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, uint, uint, IntPtr, IntPtr, void*, uint&gt;</type>
                </param>
                <param name="lpData">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="MoveFileTransactedA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpExistingFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpNewFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpProgressRoutine">
                    <type>delegate* unmanaged&lt;LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, uint, uint, IntPtr, IntPtr, void*, uint&gt;</type>
                </param>
                <param name="lpData">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="MoveFileTransactedW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpExistingFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpNewFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpProgressRoutine">
                    <type>delegate* unmanaged&lt;LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, uint, uint, IntPtr, IntPtr, void*, uint&gt;</type>
                </param>
                <param name="lpData">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="ReplaceFileA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpReplacedFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpReplacementFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpBackupFileName">
                    <type>sbyte*</type>
                </param>
                <param name="dwReplaceFlags">
                    <type>uint</type>
                </param>
                <param name="lpExclude">
                    <type>void*</type>
                </param>
                <param name="lpReserved">
                    <type>void*</type>
                </param>
            </function>
            <function name="ReplaceFileW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpReplacedFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpReplacementFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpBackupFileName">
                    <type>ushort*</type>
                </param>
                <param name="dwReplaceFlags">
                    <type>uint</type>
                </param>
                <param name="lpExclude">
                    <type>void*</type>
                </param>
                <param name="lpReserved">
                    <type>void*</type>
                </param>
            </function>
            <function name="CreateHardLinkA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpExistingFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpSecurityAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
            </function>
            <function name="CreateHardLinkW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpExistingFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpSecurityAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
            </function>
            <function name="CreateHardLinkTransactedA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpExistingFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpSecurityAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="CreateHardLinkTransactedW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpExistingFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpSecurityAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="FindFirstStreamTransactedW" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
                <param name="InfoLevel">
                    <type>STREAM_INFO_LEVELS</type>
                </param>
                <param name="lpFindStreamData">
                    <type>void*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="FindFirstFileNameTransactedW" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="StringLength">
                    <type>uint*</type>
                </param>
                <param name="LinkName">
                    <type>ushort*</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="CreateNamedPipeA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
                <param name="dwOpenMode">
                    <type>uint</type>
                </param>
                <param name="dwPipeMode">
                    <type>uint</type>
                </param>
                <param name="nMaxInstances">
                    <type>uint</type>
                </param>
                <param name="nOutBufferSize">
                    <type>uint</type>
                </param>
                <param name="nInBufferSize">
                    <type>uint</type>
                </param>
                <param name="nDefaultTimeOut">
                    <type>uint</type>
                </param>
                <param name="lpSecurityAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
            </function>
            <function name="GetNamedPipeHandleStateA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hNamedPipe">
                    <type>IntPtr</type>
                </param>
                <param name="lpState">
                    <type>uint*</type>
                </param>
                <param name="lpCurInstances">
                    <type>uint*</type>
                </param>
                <param name="lpMaxCollectionCount">
                    <type>uint*</type>
                </param>
                <param name="lpCollectDataTimeout">
                    <type>uint*</type>
                </param>
                <param name="lpUserName">
                    <type>sbyte*</type>
                </param>
                <param name="nMaxUserNameSize">
                    <type>uint</type>
                </param>
            </function>
            <function name="CallNamedPipeA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpNamedPipeName">
                    <type>sbyte*</type>
                </param>
                <param name="lpInBuffer">
                    <type>void*</type>
                </param>
                <param name="nInBufferSize">
                    <type>uint</type>
                </param>
                <param name="lpOutBuffer">
                    <type>void*</type>
                </param>
                <param name="nOutBufferSize">
                    <type>uint</type>
                </param>
                <param name="lpBytesRead">
                    <type>uint*</type>
                </param>
                <param name="nTimeOut">
                    <type>uint</type>
                </param>
            </function>
            <function name="WaitNamedPipeA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpNamedPipeName">
                    <type>sbyte*</type>
                </param>
                <param name="nTimeOut">
                    <type>uint</type>
                </param>
            </function>
            <function name="GetNamedPipeClientComputerNameA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="Pipe">
                    <type>IntPtr</type>
                </param>
                <param name="ClientComputerName">
                    <type>sbyte*</type>
                </param>
                <param name="ClientComputerNameLength">
                    <type>uint</type>
                </param>
            </function>
            <function name="GetNamedPipeClientProcessId" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="Pipe">
                    <type>IntPtr</type>
                </param>
                <param name="ClientProcessId">
                    <type>uint*</type>
                </param>
            </function>
            <function name="GetNamedPipeClientSessionId" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="Pipe">
                    <type>IntPtr</type>
                </param>
                <param name="ClientSessionId">
                    <type>uint*</type>
                </param>
            </function>
            <function name="GetNamedPipeServerProcessId" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="Pipe">
                    <type>IntPtr</type>
                </param>
                <param name="ServerProcessId">
                    <type>uint*</type>
                </param>
            </function>
            <function name="GetNamedPipeServerSessionId" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="Pipe">
                    <type>IntPtr</type>
                </param>
                <param name="ServerSessionId">
                    <type>uint*</type>
                </param>
            </function>
            <function name="SetVolumeLabelA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpRootPathName">
                    <type>sbyte*</type>
                </param>
                <param name="lpVolumeName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="SetVolumeLabelW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpRootPathName">
                    <type>ushort*</type>
                </param>
                <param name="lpVolumeName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="SetFileBandwidthReservation" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="nPeriodMilliseconds">
                    <type>uint</type>
                </param>
                <param name="nBytesPerPeriod">
                    <type>uint</type>
                </param>
                <param name="bDiscardable">
                    <type>int</type>
                </param>
                <param name="lpTransferSize">
                    <type>uint*</type>
                </param>
                <param name="lpNumOutstandingRequests">
                    <type>uint*</type>
                </param>
            </function>
            <function name="GetFileBandwidthReservation" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="lpPeriodMilliseconds">
                    <type>uint*</type>
                </param>
                <param name="lpBytesPerPeriod">
                    <type>uint*</type>
                </param>
                <param name="pDiscardable">
                    <type>int*</type>
                </param>
                <param name="lpTransferSize">
                    <type>uint*</type>
                </param>
                <param name="lpNumOutstandingRequests">
                    <type>uint*</type>
                </param>
            </function>
            <function name="ClearEventLogA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hEventLog">
                    <type>IntPtr</type>
                </param>
                <param name="lpBackupFileName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="ClearEventLogW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hEventLog">
                    <type>IntPtr</type>
                </param>
                <param name="lpBackupFileName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="BackupEventLogA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hEventLog">
                    <type>IntPtr</type>
                </param>
                <param name="lpBackupFileName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="BackupEventLogW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hEventLog">
                    <type>IntPtr</type>
                </param>
                <param name="lpBackupFileName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="CloseEventLog" access="public" lib="advapi32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hEventLog">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="DeregisterEventSource" access="public" lib="advapi32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hEventLog">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="NotifyChangeEventLog" access="public" lib="advapi32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hEventLog">
                    <type>IntPtr</type>
                </param>
                <param name="hEvent">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="GetNumberOfEventLogRecords" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hEventLog">
                    <type>IntPtr</type>
                </param>
                <param name="NumberOfRecords">
                    <type>uint*</type>
                </param>
            </function>
            <function name="GetOldestEventLogRecord" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hEventLog">
                    <type>IntPtr</type>
                </param>
                <param name="OldestRecord">
                    <type>uint*</type>
                </param>
            </function>
            <function name="OpenEventLogA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpUNCServerName">
                    <type>sbyte*</type>
                </param>
                <param name="lpSourceName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="OpenEventLogW" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpUNCServerName">
                    <type>ushort*</type>
                </param>
                <param name="lpSourceName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="RegisterEventSourceA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpUNCServerName">
                    <type>sbyte*</type>
                </param>
                <param name="lpSourceName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="RegisterEventSourceW" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpUNCServerName">
                    <type>ushort*</type>
                </param>
                <param name="lpSourceName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="OpenBackupEventLogA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpUNCServerName">
                    <type>sbyte*</type>
                </param>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="OpenBackupEventLogW" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpUNCServerName">
                    <type>ushort*</type>
                </param>
                <param name="lpFileName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="ReadEventLogA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hEventLog">
                    <type>IntPtr</type>
                </param>
                <param name="dwReadFlags">
                    <type>uint</type>
                </param>
                <param name="dwRecordOffset">
                    <type>uint</type>
                </param>
                <param name="lpBuffer">
                    <type>void*</type>
                </param>
                <param name="nNumberOfBytesToRead">
                    <type>uint</type>
                </param>
                <param name="pnBytesRead">
                    <type>uint*</type>
                </param>
                <param name="pnMinNumberOfBytesNeeded">
                    <type>uint*</type>
                </param>
            </function>
            <function name="ReadEventLogW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hEventLog">
                    <type>IntPtr</type>
                </param>
                <param name="dwReadFlags">
                    <type>uint</type>
                </param>
                <param name="dwRecordOffset">
                    <type>uint</type>
                </param>
                <param name="lpBuffer">
                    <type>void*</type>
                </param>
                <param name="nNumberOfBytesToRead">
                    <type>uint</type>
                </param>
                <param name="pnBytesRead">
                    <type>uint*</type>
                </param>
                <param name="pnMinNumberOfBytesNeeded">
                    <type>uint*</type>
                </param>
            </function>
            <function name="ReportEventA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hEventLog">
                    <type>IntPtr</type>
                </param>
                <param name="wType">
                    <type>ushort</type>
                </param>
                <param name="wCategory">
                    <type>ushort</type>
                </param>
                <param name="dwEventID">
                    <type>uint</type>
                </param>
                <param name="lpUserSid">
                    <type>void*</type>
                </param>
                <param name="wNumStrings">
                    <type>ushort</type>
                </param>
                <param name="dwDataSize">
                    <type>uint</type>
                </param>
                <param name="lpStrings">
                    <type>sbyte**</type>
                </param>
                <param name="lpRawData">
                    <type>void*</type>
                </param>
            </function>
            <function name="ReportEventW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hEventLog">
                    <type>IntPtr</type>
                </param>
                <param name="wType">
                    <type>ushort</type>
                </param>
                <param name="wCategory">
                    <type>ushort</type>
                </param>
                <param name="dwEventID">
                    <type>uint</type>
                </param>
                <param name="lpUserSid">
                    <type>void*</type>
                </param>
                <param name="wNumStrings">
                    <type>ushort</type>
                </param>
                <param name="dwDataSize">
                    <type>uint</type>
                </param>
                <param name="lpStrings">
                    <type>ushort**</type>
                </param>
                <param name="lpRawData">
                    <type>void*</type>
                </param>
            </function>
            <function name="GetEventLogInformation" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hEventLog">
                    <type>IntPtr</type>
                </param>
                <param name="dwInfoLevel">
                    <type>uint</type>
                </param>
                <param name="lpBuffer">
                    <type>void*</type>
                </param>
                <param name="cbBufSize">
                    <type>uint</type>
                </param>
                <param name="pcbBytesNeeded">
                    <type>uint*</type>
                </param>
            </function>
            <function name="OperationStart" access="public" lib="advapi32" static="true">
                <type native="BOOL">int</type>
                <param name="OperationStartParams">
                    <type>OPERATION_START_PARAMETERS*</type>
                </param>
            </function>
            <function name="OperationEnd" access="public" lib="advapi32" static="true">
                <type native="BOOL">int</type>
                <param name="OperationEndParams">
                    <type>OPERATION_END_PARAMETERS*</type>
                </param>
            </function>
            <function name="AccessCheckAndAuditAlarmA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="SubsystemName">
                    <type>sbyte*</type>
                </param>
                <param name="HandleId">
                    <type>void*</type>
                </param>
                <param name="ObjectTypeName">
                    <type>sbyte*</type>
                </param>
                <param name="ObjectName">
                    <type>sbyte*</type>
                </param>
                <param name="SecurityDescriptor">
                    <type>void*</type>
                </param>
                <param name="DesiredAccess">
                    <type>uint</type>
                </param>
                <param name="GenericMapping">
                    <type>GENERIC_MAPPING*</type>
                </param>
                <param name="ObjectCreation">
                    <type>int</type>
                </param>
                <param name="GrantedAccess">
                    <type>uint*</type>
                </param>
                <param name="AccessStatus">
                    <type>int*</type>
                </param>
                <param name="pfGenerateOnClose">
                    <type>int*</type>
                </param>
            </function>
            <function name="AccessCheckByTypeAndAuditAlarmA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="SubsystemName">
                    <type>sbyte*</type>
                </param>
                <param name="HandleId">
                    <type>void*</type>
                </param>
                <param name="ObjectTypeName">
                    <type>sbyte*</type>
                </param>
                <param name="ObjectName">
                    <type>sbyte*</type>
                </param>
                <param name="SecurityDescriptor">
                    <type>void*</type>
                </param>
                <param name="PrincipalSelfSid">
                    <type>void*</type>
                </param>
                <param name="DesiredAccess">
                    <type>uint</type>
                </param>
                <param name="AuditType">
                    <type>AUDIT_EVENT_TYPE</type>
                </param>
                <param name="Flags">
                    <type>uint</type>
                </param>
                <param name="ObjectTypeList">
                    <type>OBJECT_TYPE_LIST*</type>
                </param>
                <param name="ObjectTypeListLength">
                    <type>uint</type>
                </param>
                <param name="GenericMapping">
                    <type>GENERIC_MAPPING*</type>
                </param>
                <param name="ObjectCreation">
                    <type>int</type>
                </param>
                <param name="GrantedAccess">
                    <type>uint*</type>
                </param>
                <param name="AccessStatus">
                    <type>int*</type>
                </param>
                <param name="pfGenerateOnClose">
                    <type>int*</type>
                </param>
            </function>
            <function name="AccessCheckByTypeResultListAndAuditAlarmA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="SubsystemName">
                    <type>sbyte*</type>
                </param>
                <param name="HandleId">
                    <type>void*</type>
                </param>
                <param name="ObjectTypeName">
                    <type>sbyte*</type>
                </param>
                <param name="ObjectName">
                    <type>sbyte*</type>
                </param>
                <param name="SecurityDescriptor">
                    <type>void*</type>
                </param>
                <param name="PrincipalSelfSid">
                    <type>void*</type>
                </param>
                <param name="DesiredAccess">
                    <type>uint</type>
                </param>
                <param name="AuditType">
                    <type>AUDIT_EVENT_TYPE</type>
                </param>
                <param name="Flags">
                    <type>uint</type>
                </param>
                <param name="ObjectTypeList">
                    <type>OBJECT_TYPE_LIST*</type>
                </param>
                <param name="ObjectTypeListLength">
                    <type>uint</type>
                </param>
                <param name="GenericMapping">
                    <type>GENERIC_MAPPING*</type>
                </param>
                <param name="ObjectCreation">
                    <type>int</type>
                </param>
                <param name="GrantedAccess">
                    <type>uint*</type>
                </param>
                <param name="AccessStatusList">
                    <type>uint*</type>
                </param>
                <param name="pfGenerateOnClose">
                    <type>int*</type>
                </param>
            </function>
            <function name="AccessCheckByTypeResultListAndAuditAlarmByHandleA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="SubsystemName">
                    <type>sbyte*</type>
                </param>
                <param name="HandleId">
                    <type>void*</type>
                </param>
                <param name="ClientToken">
                    <type>IntPtr</type>
                </param>
                <param name="ObjectTypeName">
                    <type>sbyte*</type>
                </param>
                <param name="ObjectName">
                    <type>sbyte*</type>
                </param>
                <param name="SecurityDescriptor">
                    <type>void*</type>
                </param>
                <param name="PrincipalSelfSid">
                    <type>void*</type>
                </param>
                <param name="DesiredAccess">
                    <type>uint</type>
                </param>
                <param name="AuditType">
                    <type>AUDIT_EVENT_TYPE</type>
                </param>
                <param name="Flags">
                    <type>uint</type>
                </param>
                <param name="ObjectTypeList">
                    <type>OBJECT_TYPE_LIST*</type>
                </param>
                <param name="ObjectTypeListLength">
                    <type>uint</type>
                </param>
                <param name="GenericMapping">
                    <type>GENERIC_MAPPING*</type>
                </param>
                <param name="ObjectCreation">
                    <type>int</type>
                </param>
                <param name="GrantedAccess">
                    <type>uint*</type>
                </param>
                <param name="AccessStatusList">
                    <type>uint*</type>
                </param>
                <param name="pfGenerateOnClose">
                    <type>int*</type>
                </param>
            </function>
            <function name="ObjectOpenAuditAlarmA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="SubsystemName">
                    <type>sbyte*</type>
                </param>
                <param name="HandleId">
                    <type>void*</type>
                </param>
                <param name="ObjectTypeName">
                    <type>sbyte*</type>
                </param>
                <param name="ObjectName">
                    <type>sbyte*</type>
                </param>
                <param name="pSecurityDescriptor">
                    <type>void*</type>
                </param>
                <param name="ClientToken">
                    <type>IntPtr</type>
                </param>
                <param name="DesiredAccess">
                    <type>uint</type>
                </param>
                <param name="GrantedAccess">
                    <type>uint</type>
                </param>
                <param name="Privileges">
                    <type>PRIVILEGE_SET*</type>
                </param>
                <param name="ObjectCreation">
                    <type>int</type>
                </param>
                <param name="AccessGranted">
                    <type>int</type>
                </param>
                <param name="GenerateOnClose">
                    <type>int*</type>
                </param>
            </function>
            <function name="ObjectPrivilegeAuditAlarmA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="SubsystemName">
                    <type>sbyte*</type>
                </param>
                <param name="HandleId">
                    <type>void*</type>
                </param>
                <param name="ClientToken">
                    <type>IntPtr</type>
                </param>
                <param name="DesiredAccess">
                    <type>uint</type>
                </param>
                <param name="Privileges">
                    <type>PRIVILEGE_SET*</type>
                </param>
                <param name="AccessGranted">
                    <type>int</type>
                </param>
            </function>
            <function name="ObjectCloseAuditAlarmA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="SubsystemName">
                    <type>sbyte*</type>
                </param>
                <param name="HandleId">
                    <type>void*</type>
                </param>
                <param name="GenerateOnClose">
                    <type>int</type>
                </param>
            </function>
            <function name="ObjectDeleteAuditAlarmA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="SubsystemName">
                    <type>sbyte*</type>
                </param>
                <param name="HandleId">
                    <type>void*</type>
                </param>
                <param name="GenerateOnClose">
                    <type>int</type>
                </param>
            </function>
            <function name="PrivilegedServiceAuditAlarmA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="SubsystemName">
                    <type>sbyte*</type>
                </param>
                <param name="ServiceName">
                    <type>sbyte*</type>
                </param>
                <param name="ClientToken">
                    <type>IntPtr</type>
                </param>
                <param name="Privileges">
                    <type>PRIVILEGE_SET*</type>
                </param>
                <param name="AccessGranted">
                    <type>int</type>
                </param>
            </function>
            <function name="AddConditionalAce" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pAcl">
                    <type>ACL*</type>
                </param>
                <param name="dwAceRevision">
                    <type>uint</type>
                </param>
                <param name="AceFlags">
                    <type>uint</type>
                </param>
                <param name="AceType">
                    <type>byte</type>
                </param>
                <param name="AccessMask">
                    <type>uint</type>
                </param>
                <param name="pSid">
                    <type>void*</type>
                </param>
                <param name="ConditionStr">
                    <type>ushort*</type>
                </param>
                <param name="ReturnLength">
                    <type>uint*</type>
                </param>
            </function>
            <function name="SetFileSecurityA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
                <param name="SecurityInformation">
                    <type>uint</type>
                </param>
                <param name="pSecurityDescriptor">
                    <type>void*</type>
                </param>
            </function>
            <function name="GetFileSecurityA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpFileName">
                    <type>sbyte*</type>
                </param>
                <param name="RequestedInformation">
                    <type>uint</type>
                </param>
                <param name="pSecurityDescriptor">
                    <type>void*</type>
                </param>
                <param name="nLength">
                    <type>uint</type>
                </param>
                <param name="lpnLengthNeeded">
                    <type>uint*</type>
                </param>
            </function>
            <function name="ReadDirectoryChangesW" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hDirectory">
                    <type>IntPtr</type>
                </param>
                <param name="lpBuffer">
                    <type>void*</type>
                </param>
                <param name="nBufferLength">
                    <type>uint</type>
                </param>
                <param name="bWatchSubtree">
                    <type>int</type>
                </param>
                <param name="dwNotifyFilter">
                    <type>uint</type>
                </param>
                <param name="lpBytesReturned">
                    <type>uint*</type>
                </param>
                <param name="lpOverlapped">
                    <type>OVERLAPPED*</type>
                </param>
                <param name="lpCompletionRoutine">
                    <type>delegate* unmanaged&lt;uint, uint, OVERLAPPED*, void&gt;</type>
                </param>
            </function>
            <function name="ReadDirectoryChangesExW" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hDirectory">
                    <type>IntPtr</type>
                </param>
                <param name="lpBuffer">
                    <type>void*</type>
                </param>
                <param name="nBufferLength">
                    <type>uint</type>
                </param>
                <param name="bWatchSubtree">
                    <type>int</type>
                </param>
                <param name="dwNotifyFilter">
                    <type>uint</type>
                </param>
                <param name="lpBytesReturned">
                    <type>uint*</type>
                </param>
                <param name="lpOverlapped">
                    <type>OVERLAPPED*</type>
                </param>
                <param name="lpCompletionRoutine">
                    <type>delegate* unmanaged&lt;uint, uint, OVERLAPPED*, void&gt;</type>
                </param>
                <param name="ReadDirectoryNotifyInformationClass">
                    <type>READ_DIRECTORY_NOTIFY_INFORMATION_CLASS</type>
                </param>
            </function>
            <function name="MapViewOfFileExNuma" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="LPVOID">void*</type>
                <param name="hFileMappingObject">
                    <type>IntPtr</type>
                </param>
                <param name="dwDesiredAccess">
                    <type>uint</type>
                </param>
                <param name="dwFileOffsetHigh">
                    <type>uint</type>
                </param>
                <param name="dwFileOffsetLow">
                    <type>uint</type>
                </param>
                <param name="dwNumberOfBytesToMap">
                    <type>nuint</type>
                </param>
                <param name="lpBaseAddress">
                    <type>void*</type>
                </param>
                <param name="nndPreferred">
                    <type>uint</type>
                </param>
            </function>
            <function name="IsBadReadPtr" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lp">
                    <type>void*</type>
                </param>
                <param name="ucb">
                    <type>nuint</type>
                </param>
            </function>
            <function name="IsBadWritePtr" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lp">
                    <type>void*</type>
                </param>
                <param name="ucb">
                    <type>nuint</type>
                </param>
            </function>
            <function name="IsBadHugeReadPtr" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lp">
                    <type>void*</type>
                </param>
                <param name="ucb">
                    <type>nuint</type>
                </param>
            </function>
            <function name="IsBadHugeWritePtr" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lp">
                    <type>void*</type>
                </param>
                <param name="ucb">
                    <type>nuint</type>
                </param>
            </function>
            <function name="IsBadCodePtr" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="lpfn">
                    <type>delegate* unmanaged&lt;int&gt;</type>
                </param>
            </function>
            <function name="IsBadStringPtrA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpsz">
                    <type>sbyte*</type>
                </param>
                <param name="ucchMax">
                    <type>nuint</type>
                </param>
            </function>
            <function name="IsBadStringPtrW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpsz">
                    <type>ushort*</type>
                </param>
                <param name="ucchMax">
                    <type>nuint</type>
                </param>
            </function>
            <function name="LookupAccountSidA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpSystemName">
                    <type>sbyte*</type>
                </param>
                <param name="Sid">
                    <type>void*</type>
                </param>
                <param name="Name">
                    <type>sbyte*</type>
                </param>
                <param name="cchName">
                    <type>uint*</type>
                </param>
                <param name="ReferencedDomainName">
                    <type>sbyte*</type>
                </param>
                <param name="cchReferencedDomainName">
                    <type>uint*</type>
                </param>
                <param name="peUse">
                    <type>SID_NAME_USE*</type>
                </param>
            </function>
            <function name="LookupAccountSidW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpSystemName">
                    <type>ushort*</type>
                </param>
                <param name="Sid">
                    <type>void*</type>
                </param>
                <param name="Name">
                    <type>ushort*</type>
                </param>
                <param name="cchName">
                    <type>uint*</type>
                </param>
                <param name="ReferencedDomainName">
                    <type>ushort*</type>
                </param>
                <param name="cchReferencedDomainName">
                    <type>uint*</type>
                </param>
                <param name="peUse">
                    <type>SID_NAME_USE*</type>
                </param>
            </function>
            <function name="LookupAccountNameA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpSystemName">
                    <type>sbyte*</type>
                </param>
                <param name="lpAccountName">
                    <type>sbyte*</type>
                </param>
                <param name="Sid">
                    <type>void*</type>
                </param>
                <param name="cbSid">
                    <type>uint*</type>
                </param>
                <param name="ReferencedDomainName">
                    <type>sbyte*</type>
                </param>
                <param name="cchReferencedDomainName">
                    <type>uint*</type>
                </param>
                <param name="peUse">
                    <type>SID_NAME_USE*</type>
                </param>
            </function>
            <function name="LookupAccountNameW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpSystemName">
                    <type>ushort*</type>
                </param>
                <param name="lpAccountName">
                    <type>ushort*</type>
                </param>
                <param name="Sid">
                    <type>void*</type>
                </param>
                <param name="cbSid">
                    <type>uint*</type>
                </param>
                <param name="ReferencedDomainName">
                    <type>ushort*</type>
                </param>
                <param name="cchReferencedDomainName">
                    <type>uint*</type>
                </param>
                <param name="peUse">
                    <type>SID_NAME_USE*</type>
                </param>
            </function>
            <function name="LookupAccountNameLocalA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpAccountName">
                    <type>sbyte*</type>
                </param>
                <param name="Sid">
                    <type>void*</type>
                </param>
                <param name="cbSid">
                    <type>uint*</type>
                </param>
                <param name="ReferencedDomainName">
                    <type>sbyte*</type>
                </param>
                <param name="cchReferencedDomainName">
                    <type>uint*</type>
                </param>
                <param name="peUse">
                    <type>SID_NAME_USE*</type>
                </param>
            </function>
            <function name="LookupAccountNameLocalW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpAccountName">
                    <type>ushort*</type>
                </param>
                <param name="Sid">
                    <type>void*</type>
                </param>
                <param name="cbSid">
                    <type>uint*</type>
                </param>
                <param name="ReferencedDomainName">
                    <type>ushort*</type>
                </param>
                <param name="cchReferencedDomainName">
                    <type>uint*</type>
                </param>
                <param name="peUse">
                    <type>SID_NAME_USE*</type>
                </param>
            </function>
            <function name="LookupAccountSidLocalA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="Sid">
                    <type>void*</type>
                </param>
                <param name="Name">
                    <type>sbyte*</type>
                </param>
                <param name="cchName">
                    <type>uint*</type>
                </param>
                <param name="ReferencedDomainName">
                    <type>sbyte*</type>
                </param>
                <param name="cchReferencedDomainName">
                    <type>uint*</type>
                </param>
                <param name="peUse">
                    <type>SID_NAME_USE*</type>
                </param>
            </function>
            <function name="LookupAccountSidLocalW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="Sid">
                    <type>void*</type>
                </param>
                <param name="Name">
                    <type>ushort*</type>
                </param>
                <param name="cchName">
                    <type>uint*</type>
                </param>
                <param name="ReferencedDomainName">
                    <type>ushort*</type>
                </param>
                <param name="cchReferencedDomainName">
                    <type>uint*</type>
                </param>
                <param name="peUse">
                    <type>SID_NAME_USE*</type>
                </param>
            </function>
            <function name="LookupPrivilegeValueA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpSystemName">
                    <type>sbyte*</type>
                </param>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
                <param name="lpLuid">
                    <type>LUID*</type>
                </param>
            </function>
            <function name="LookupPrivilegeValueW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpSystemName">
                    <type>ushort*</type>
                </param>
                <param name="lpName">
                    <type>ushort*</type>
                </param>
                <param name="lpLuid">
                    <type>LUID*</type>
                </param>
            </function>
            <function name="LookupPrivilegeNameA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpSystemName">
                    <type>sbyte*</type>
                </param>
                <param name="lpLuid">
                    <type>LUID*</type>
                </param>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
                <param name="cchName">
                    <type>uint*</type>
                </param>
            </function>
            <function name="LookupPrivilegeNameW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpSystemName">
                    <type>ushort*</type>
                </param>
                <param name="lpLuid">
                    <type>LUID*</type>
                </param>
                <param name="lpName">
                    <type>ushort*</type>
                </param>
                <param name="cchName">
                    <type>uint*</type>
                </param>
            </function>
            <function name="LookupPrivilegeDisplayNameA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpSystemName">
                    <type>sbyte*</type>
                </param>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
                <param name="lpDisplayName">
                    <type>sbyte*</type>
                </param>
                <param name="cchDisplayName">
                    <type>uint*</type>
                </param>
                <param name="lpLanguageId">
                    <type>uint*</type>
                </param>
            </function>
            <function name="LookupPrivilegeDisplayNameW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpSystemName">
                    <type>ushort*</type>
                </param>
                <param name="lpName">
                    <type>ushort*</type>
                </param>
                <param name="lpDisplayName">
                    <type>ushort*</type>
                </param>
                <param name="cchDisplayName">
                    <type>uint*</type>
                </param>
                <param name="lpLanguageId">
                    <type>uint*</type>
                </param>
            </function>
            <function name="BuildCommDCBA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpDef">
                    <type>sbyte*</type>
                </param>
                <param name="lpDCB">
                    <type>DCB*</type>
                </param>
            </function>
            <function name="BuildCommDCBW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpDef">
                    <type>ushort*</type>
                </param>
                <param name="lpDCB">
                    <type>DCB*</type>
                </param>
            </function>
            <function name="BuildCommDCBAndTimeoutsA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpDef">
                    <type>sbyte*</type>
                </param>
                <param name="lpDCB">
                    <type>DCB*</type>
                </param>
                <param name="lpCommTimeouts">
                    <type>COMMTIMEOUTS*</type>
                </param>
            </function>
            <function name="BuildCommDCBAndTimeoutsW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpDef">
                    <type>ushort*</type>
                </param>
                <param name="lpDCB">
                    <type>DCB*</type>
                </param>
                <param name="lpCommTimeouts">
                    <type>COMMTIMEOUTS*</type>
                </param>
            </function>
            <function name="CommConfigDialogA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszName">
                    <type>sbyte*</type>
                </param>
                <param name="hWnd">
                    <type>IntPtr</type>
                </param>
                <param name="lpCC">
                    <type>COMMCONFIG*</type>
                </param>
            </function>
            <function name="CommConfigDialogW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszName">
                    <type>ushort*</type>
                </param>
                <param name="hWnd">
                    <type>IntPtr</type>
                </param>
                <param name="lpCC">
                    <type>COMMCONFIG*</type>
                </param>
            </function>
            <function name="GetDefaultCommConfigA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszName">
                    <type>sbyte*</type>
                </param>
                <param name="lpCC">
                    <type>COMMCONFIG*</type>
                </param>
                <param name="lpdwSize">
                    <type>uint*</type>
                </param>
            </function>
            <function name="GetDefaultCommConfigW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszName">
                    <type>ushort*</type>
                </param>
                <param name="lpCC">
                    <type>COMMCONFIG*</type>
                </param>
                <param name="lpdwSize">
                    <type>uint*</type>
                </param>
            </function>
            <function name="SetDefaultCommConfigA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszName">
                    <type>sbyte*</type>
                </param>
                <param name="lpCC">
                    <type>COMMCONFIG*</type>
                </param>
                <param name="dwSize">
                    <type>uint</type>
                </param>
            </function>
            <function name="SetDefaultCommConfigW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszName">
                    <type>ushort*</type>
                </param>
                <param name="lpCC">
                    <type>COMMCONFIG*</type>
                </param>
                <param name="dwSize">
                    <type>uint</type>
                </param>
            </function>
            <function name="GetComputerNameA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpBuffer">
                    <type>sbyte*</type>
                </param>
                <param name="nSize">
                    <type>uint*</type>
                </param>
            </function>
            <function name="GetComputerNameW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpBuffer">
                    <type>ushort*</type>
                </param>
                <param name="nSize">
                    <type>uint*</type>
                </param>
            </function>
            <function name="DnsHostnameToComputerNameA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="Hostname">
                    <type>sbyte*</type>
                </param>
                <param name="ComputerName">
                    <type>sbyte*</type>
                </param>
                <param name="nSize">
                    <type>uint*</type>
                </param>
            </function>
            <function name="DnsHostnameToComputerNameW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="Hostname">
                    <type>ushort*</type>
                </param>
                <param name="ComputerName">
                    <type>ushort*</type>
                </param>
                <param name="nSize">
                    <type>uint*</type>
                </param>
            </function>
            <function name="GetUserNameA" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="lpBuffer">
                    <type>sbyte*</type>
                </param>
                <param name="pcbBuffer">
                    <type>uint*</type>
                </param>
            </function>
            <function name="GetUserNameW" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="lpBuffer">
                    <type>ushort*</type>
                </param>
                <param name="pcbBuffer">
                    <type>uint*</type>
                </param>
            </function>
            <function name="LogonUserA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszUsername">
                    <type>sbyte*</type>
                </param>
                <param name="lpszDomain">
                    <type>sbyte*</type>
                </param>
                <param name="lpszPassword">
                    <type>sbyte*</type>
                </param>
                <param name="dwLogonType">
                    <type>uint</type>
                </param>
                <param name="dwLogonProvider">
                    <type>uint</type>
                </param>
                <param name="phToken">
                    <type>IntPtr*</type>
                </param>
            </function>
            <function name="LogonUserW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszUsername">
                    <type>ushort*</type>
                </param>
                <param name="lpszDomain">
                    <type>ushort*</type>
                </param>
                <param name="lpszPassword">
                    <type>ushort*</type>
                </param>
                <param name="dwLogonType">
                    <type>uint</type>
                </param>
                <param name="dwLogonProvider">
                    <type>uint</type>
                </param>
                <param name="phToken">
                    <type>IntPtr*</type>
                </param>
            </function>
            <function name="LogonUserExA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszUsername">
                    <type>sbyte*</type>
                </param>
                <param name="lpszDomain">
                    <type>sbyte*</type>
                </param>
                <param name="lpszPassword">
                    <type>sbyte*</type>
                </param>
                <param name="dwLogonType">
                    <type>uint</type>
                </param>
                <param name="dwLogonProvider">
                    <type>uint</type>
                </param>
                <param name="phToken">
                    <type>IntPtr*</type>
                </param>
                <param name="ppLogonSid">
                    <type>void**</type>
                </param>
                <param name="ppProfileBuffer">
                    <type>void**</type>
                </param>
                <param name="pdwProfileLength">
                    <type>uint*</type>
                </param>
                <param name="pQuotaLimits">
                    <type>QUOTA_LIMITS*</type>
                </param>
            </function>
            <function name="LogonUserExW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszUsername">
                    <type>ushort*</type>
                </param>
                <param name="lpszDomain">
                    <type>ushort*</type>
                </param>
                <param name="lpszPassword">
                    <type>ushort*</type>
                </param>
                <param name="dwLogonType">
                    <type>uint</type>
                </param>
                <param name="dwLogonProvider">
                    <type>uint</type>
                </param>
                <param name="phToken">
                    <type>IntPtr*</type>
                </param>
                <param name="ppLogonSid">
                    <type>void**</type>
                </param>
                <param name="ppProfileBuffer">
                    <type>void**</type>
                </param>
                <param name="pdwProfileLength">
                    <type>uint*</type>
                </param>
                <param name="pQuotaLimits">
                    <type>QUOTA_LIMITS*</type>
                </param>
            </function>
            <function name="CreateProcessWithLogonW" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="lpUsername">
                    <type>ushort*</type>
                </param>
                <param name="lpDomain">
                    <type>ushort*</type>
                </param>
                <param name="lpPassword">
                    <type>ushort*</type>
                </param>
                <param name="dwLogonFlags">
                    <type>uint</type>
                </param>
                <param name="lpApplicationName">
                    <type>ushort*</type>
                </param>
                <param name="lpCommandLine">
                    <type>ushort*</type>
                </param>
                <param name="dwCreationFlags">
                    <type>uint</type>
                </param>
                <param name="lpEnvironment">
                    <type>void*</type>
                </param>
                <param name="lpCurrentDirectory">
                    <type>ushort*</type>
                </param>
                <param name="lpStartupInfo">
                    <type>STARTUPINFOW*</type>
                </param>
                <param name="lpProcessInformation">
                    <type>PROCESS_INFORMATION*</type>
                </param>
            </function>
            <function name="CreateProcessWithTokenW" access="public" lib="advapi32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hToken">
                    <type>IntPtr</type>
                </param>
                <param name="dwLogonFlags">
                    <type>uint</type>
                </param>
                <param name="lpApplicationName">
                    <type>ushort*</type>
                </param>
                <param name="lpCommandLine">
                    <type>ushort*</type>
                </param>
                <param name="dwCreationFlags">
                    <type>uint</type>
                </param>
                <param name="lpEnvironment">
                    <type>void*</type>
                </param>
                <param name="lpCurrentDirectory">
                    <type>ushort*</type>
                </param>
                <param name="lpStartupInfo">
                    <type>STARTUPINFOW*</type>
                </param>
                <param name="lpProcessInformation">
                    <type>PROCESS_INFORMATION*</type>
                </param>
            </function>
            <function name="IsTokenUntrusted" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="TokenHandle">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="RegisterWaitForSingleObject" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="phNewWaitObject">
                    <type>IntPtr*</type>
                </param>
                <param name="hObject">
                    <type>IntPtr</type>
                </param>
                <param name="Callback">
                    <type>delegate* unmanaged&lt;void*, byte, void&gt;</type>
                </param>
                <param name="Context">
                    <type>void*</type>
                </param>
                <param name="dwMilliseconds">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="UnregisterWait" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="WaitHandle">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="BindIoCompletionCallback" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="FileHandle">
                    <type>IntPtr</type>
                </param>
                <param name="Function">
                    <type>delegate* unmanaged&lt;uint, uint, OVERLAPPED*, void&gt;</type>
                </param>
                <param name="Flags">
                    <type>uint</type>
                </param>
            </function>
            <function name="SetTimerQueueTimer" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="TimerQueue">
                    <type>IntPtr</type>
                </param>
                <param name="Callback">
                    <type>delegate* unmanaged&lt;void*, byte, void&gt;</type>
                </param>
                <param name="Parameter">
                    <type>void*</type>
                </param>
                <param name="DueTime">
                    <type>uint</type>
                </param>
                <param name="Period">
                    <type>uint</type>
                </param>
                <param name="PreferIo">
                    <type>int</type>
                </param>
            </function>
            <function name="CancelTimerQueueTimer" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="TimerQueue">
                    <type>IntPtr</type>
                </param>
                <param name="Timer">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="DeleteTimerQueue" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="TimerQueue">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="CreatePrivateNamespaceA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpPrivateNamespaceAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
                <param name="lpBoundaryDescriptor">
                    <type>void*</type>
                </param>
                <param name="lpAliasPrefix">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="OpenPrivateNamespaceA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpBoundaryDescriptor">
                    <type>void*</type>
                </param>
                <param name="lpAliasPrefix">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="CreateBoundaryDescriptorA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="Name">
                    <type>sbyte*</type>
                </param>
                <param name="Flags">
                    <type>uint</type>
                </param>
            </function>
            <function name="AddIntegrityLabelToBoundaryDescriptor" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="BoundaryDescriptor">
                    <type>IntPtr*</type>
                </param>
                <param name="IntegrityLabel">
                    <type>void*</type>
                </param>
            </function>
            <function name="GetCurrentHwProfileA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpHwProfileInfo">
                    <type>HW_PROFILE_INFOA*</type>
                </param>
            </function>
            <function name="GetCurrentHwProfileW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpHwProfileInfo">
                    <type>HW_PROFILE_INFOW*</type>
                </param>
            </function>
            <function name="VerifyVersionInfoA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpVersionInformation">
                    <type>OSVERSIONINFOEXA*</type>
                </param>
                <param name="dwTypeMask">
                    <type>uint</type>
                </param>
                <param name="dwlConditionMask">
                    <type>ulong</type>
                </param>
            </function>
            <function name="VerifyVersionInfoW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpVersionInformation">
                    <type>OSVERSIONINFOEXW*</type>
                </param>
                <param name="dwTypeMask">
                    <type>uint</type>
                </param>
                <param name="dwlConditionMask">
                    <type>ulong</type>
                </param>
            </function>
            <function name="SetSystemPowerState" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="fSuspend">
                    <type>int</type>
                </param>
                <param name="fForce">
                    <type>int</type>
                </param>
            </function>
            <function name="GetSystemPowerStatus" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="lpSystemPowerStatus">
                    <type>SYSTEM_POWER_STATUS*</type>
                </param>
            </function>
            <function name="MapUserPhysicalPagesScatter" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="VirtualAddresses">
                    <type>void**</type>
                </param>
                <param name="NumberOfPages">
                    <type>nuint</type>
                </param>
                <param name="PageArray">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CreateJobObjectA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpJobAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="OpenJobObjectA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="dwDesiredAccess">
                    <type>uint</type>
                </param>
                <param name="bInheritHandle">
                    <type>int</type>
                </param>
                <param name="lpName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="CreateJobSet" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="NumJob">
                    <type>uint</type>
                </param>
                <param name="UserJobSet">
                    <type>JOB_SET_ARRAY*</type>
                </param>
                <param name="Flags">
                    <type>uint</type>
                </param>
            </function>
            <function name="FindFirstVolumeA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpszVolumeName">
                    <type>sbyte*</type>
                </param>
                <param name="cchBufferLength">
                    <type>uint</type>
                </param>
            </function>
            <function name="FindNextVolumeA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hFindVolume">
                    <type>IntPtr</type>
                </param>
                <param name="lpszVolumeName">
                    <type>sbyte*</type>
                </param>
                <param name="cchBufferLength">
                    <type>uint</type>
                </param>
            </function>
            <function name="FindFirstVolumeMountPointA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpszRootPathName">
                    <type>sbyte*</type>
                </param>
                <param name="lpszVolumeMountPoint">
                    <type>sbyte*</type>
                </param>
                <param name="cchBufferLength">
                    <type>uint</type>
                </param>
            </function>
            <function name="FindFirstVolumeMountPointW" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="lpszRootPathName">
                    <type>ushort*</type>
                </param>
                <param name="lpszVolumeMountPoint">
                    <type>ushort*</type>
                </param>
                <param name="cchBufferLength">
                    <type>uint</type>
                </param>
            </function>
            <function name="FindNextVolumeMountPointA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hFindVolumeMountPoint">
                    <type>IntPtr</type>
                </param>
                <param name="lpszVolumeMountPoint">
                    <type>sbyte*</type>
                </param>
                <param name="cchBufferLength">
                    <type>uint</type>
                </param>
            </function>
            <function name="FindNextVolumeMountPointW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="hFindVolumeMountPoint">
                    <type>IntPtr</type>
                </param>
                <param name="lpszVolumeMountPoint">
                    <type>ushort*</type>
                </param>
                <param name="cchBufferLength">
                    <type>uint</type>
                </param>
            </function>
            <function name="FindVolumeMountPointClose" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hFindVolumeMountPoint">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="SetVolumeMountPointA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszVolumeMountPoint">
                    <type>sbyte*</type>
                </param>
                <param name="lpszVolumeName">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="SetVolumeMountPointW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszVolumeMountPoint">
                    <type>ushort*</type>
                </param>
                <param name="lpszVolumeName">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="DeleteVolumeMountPointA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszVolumeMountPoint">
                    <type>sbyte*</type>
                </param>
            </function>
            <function name="GetVolumeNameForVolumeMountPointA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszVolumeMountPoint">
                    <type>sbyte*</type>
                </param>
                <param name="lpszVolumeName">
                    <type>sbyte*</type>
                </param>
                <param name="cchBufferLength">
                    <type>uint</type>
                </param>
            </function>
            <function name="GetVolumePathNameA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpszVolumePathName">
                    <type>sbyte*</type>
                </param>
                <param name="cchBufferLength">
                    <type>uint</type>
                </param>
            </function>
            <function name="GetVolumePathNamesForVolumeNameA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="lpszVolumeName">
                    <type>sbyte*</type>
                </param>
                <param name="lpszVolumePathNames">
                    <type>sbyte*</type>
                </param>
                <param name="cchBufferLength">
                    <type>uint</type>
                </param>
                <param name="lpcchReturnLength">
                    <type>uint*</type>
                </param>
            </function>
            <function name="CreateActCtxA" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="pActCtx">
                    <type>ACTCTXA*</type>
                </param>
            </function>
            <function name="CreateActCtxW" access="public" lib="kernel32" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="pActCtx">
                    <type>ACTCTXW*</type>
                </param>
            </function>
            <function name="AddRefActCtx" access="public" lib="kernel32" static="true" unsafe="true">
                <type>void</type>
                <param name="hActCtx">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="ReleaseActCtx" access="public" lib="kernel32" static="true" unsafe="true">
                <type>void</type>
                <param name="hActCtx">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="ZombifyActCtx" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="hActCtx">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="ActivateActCtx" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hActCtx">
                    <type>IntPtr</type>
                </param>
                <param name="lpCookie">
                    <type>nuint*</type>
                </param>
            </function>
            <function name="DeactivateActCtx" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="BOOL">int</type>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="ulCookie">
                    <type>nuint</type>
                </param>
            </function>
            <function name="GetCurrentActCtx" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="lphActCtx">
                    <type>IntPtr*</type>
                </param>
            </function>
            <function name="FindActCtxSectionStringA" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="lpExtensionGuid">
                    <type>Guid*</type>
                </param>
                <param name="ulSectionId">
                    <type>uint</type>
                </param>
                <param name="lpStringToFind">
                    <type>sbyte*</type>
                </param>
                <param name="ReturnedData">
                    <type>ACTCTX_SECTION_KEYED_DATA*</type>
                </param>
            </function>
            <function name="FindActCtxSectionStringW" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="lpExtensionGuid">
                    <type>Guid*</type>
                </param>
                <param name="ulSectionId">
                    <type>uint</type>
                </param>
                <param name="lpStringToFind">
                    <type>ushort*</type>
                </param>
                <param name="ReturnedData">
                    <type>ACTCTX_SECTION_KEYED_DATA*</type>
                </param>
            </function>
            <function name="FindActCtxSectionGuid" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="lpExtensionGuid">
                    <type>Guid*</type>
                </param>
                <param name="ulSectionId">
                    <type>uint</type>
                </param>
                <param name="lpGuidToFind">
                    <type>Guid*</type>
                </param>
                <param name="ReturnedData">
                    <type>ACTCTX_SECTION_KEYED_DATA*</type>
                </param>
            </function>
            <function name="QueryActCtxW" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="hActCtx">
                    <type>IntPtr</type>
                </param>
                <param name="pvSubInstance">
                    <type>void*</type>
                </param>
                <param name="ulInfoClass">
                    <type>uint</type>
                </param>
                <param name="pvBuffer">
                    <type>void*</type>
                </param>
                <param name="cbBuffer">
                    <type>nuint</type>
                </param>
                <param name="pcbWrittenOrRequired">
                    <type>nuint*</type>
                </param>
            </function>
            <function name="WTSGetActiveConsoleSessionId" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="DWORD">uint</type>
            </function>
            <function name="WTSGetServiceSessionId" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="DWORD">uint</type>
            </function>
            <function name="WTSIsServerContainer" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="BOOLEAN">byte</type>
            </function>
            <function name="GetActiveProcessorGroupCount" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="WORD">ushort</type>
            </function>
            <function name="GetMaximumProcessorGroupCount" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="WORD">ushort</type>
            </function>
            <function name="GetActiveProcessorCount" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="DWORD">uint</type>
                <param name="GroupNumber">
                    <type>ushort</type>
                </param>
            </function>
            <function name="GetMaximumProcessorCount" access="public" lib="kernel32" setlasterror="true" static="true" unsafe="true">
                <type native="DWORD">uint</type>
                <param name="GroupNumber">
                    <type>ushort</type>
                </param>
            </function>
            <function name="GetNumaProcessorNode" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="Processor">
                    <type>byte</type>
                </param>
                <param name="NodeNumber">
                    <type>byte*</type>
                </param>
            </function>
            <function name="GetNumaNodeNumberFromHandle" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="NodeNumber">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="GetNumaProcessorNodeEx" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="Processor">
                    <type>PROCESSOR_NUMBER*</type>
                </param>
                <param name="NodeNumber">
                    <type>ushort*</type>
                </param>
            </function>
            <function name="GetNumaNodeProcessorMask" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="Node">
                    <type>byte</type>
                </param>
                <param name="ProcessorMask">
                    <type>ulong*</type>
                </param>
            </function>
            <function name="GetNumaAvailableMemoryNode" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="Node">
                    <type>byte</type>
                </param>
                <param name="AvailableBytes">
                    <type>ulong*</type>
                </param>
            </function>
            <function name="GetNumaAvailableMemoryNodeEx" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="Node">
                    <type>ushort</type>
                </param>
                <param name="AvailableBytes">
                    <type>ulong*</type>
                </param>
            </function>
            <function name="GetNumaProximityNode" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="ProximityId">
                    <type>uint</type>
                </param>
                <param name="NodeNumber">
                    <type>byte*</type>
                </param>
            </function>
            <function name="RegisterApplicationRecoveryCallback" access="public" lib="kernel32" static="true">
                <type native="HRESULT">int</type>
                <param name="pRecoveyCallback">
                    <type>delegate* unmanaged&lt;void*, uint&gt;</type>
                </param>
                <param name="pvParameter">
                    <type>void*</type>
                </param>
                <param name="dwPingInterval">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="UnregisterApplicationRecoveryCallback" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="HRESULT">int</type>
            </function>
            <function name="RegisterApplicationRestart" access="public" lib="kernel32" static="true">
                <type native="HRESULT">int</type>
                <param name="pwzCommandline">
                    <type>ushort*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="UnregisterApplicationRestart" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="HRESULT">int</type>
            </function>
            <function name="GetApplicationRecoveryCallback" access="public" lib="kernel32" static="true">
                <type native="HRESULT">int</type>
                <param name="hProcess">
                    <type>IntPtr</type>
                </param>
                <param name="pRecoveryCallback">
                    <type>delegate* unmanaged&lt;void*, uint&gt;*</type>
                </param>
                <param name="ppvParameter">
                    <type>void**</type>
                </param>
                <param name="pdwPingInterval">
                    <type>uint*</type>
                </param>
                <param name="pdwFlags">
                    <type>uint*</type>
                </param>
            </function>
            <function name="GetApplicationRestartSettings" access="public" lib="kernel32" static="true">
                <type native="HRESULT">int</type>
                <param name="hProcess">
                    <type>IntPtr</type>
                </param>
                <param name="pwzCommandline">
                    <type>ushort*</type>
                </param>
                <param name="pcchSize">
                    <type>uint*</type>
                </param>
                <param name="pdwFlags">
                    <type>uint*</type>
                </param>
            </function>
            <function name="ApplicationRecoveryInProgress" access="public" lib="kernel32" static="true">
                <type native="HRESULT">int</type>
                <param name="pbCancelled">
                    <type>int*</type>
                </param>
            </function>
            <function name="ApplicationRecoveryFinished" access="public" lib="kernel32" static="true" unsafe="true">
                <type>void</type>
                <param name="bSuccess">
                    <type>int</type>
                </param>
            </function>
            <function name="GetFileInformationByHandleEx" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="hFile">
                    <type>IntPtr</type>
                </param>
                <param name="FileInformationClass">
                    <type>FILE_INFO_BY_HANDLE_CLASS</type>
                </param>
                <param name="lpFileInformation">
                    <type>void*</type>
                </param>
                <param name="dwBufferSize">
                    <type>uint</type>
                </param>
            </function>
            <function name="OpenFileById" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="HANDLE">IntPtr</type>
                <param name="hVolumeHint">
                    <type>IntPtr</type>
                </param>
                <param name="lpFileId">
                    <type>FILE_ID_DESCRIPTOR*</type>
                </param>
                <param name="dwDesiredAccess">
                    <type>uint</type>
                </param>
                <param name="dwShareMode">
                    <type>uint</type>
                </param>
                <param name="lpSecurityAttributes">
                    <type>SECURITY_ATTRIBUTES*</type>
                </param>
                <param name="dwFlagsAndAttributes">
                    <type>uint</type>
                </param>
            </function>
            <function name="CreateSymbolicLinkA" access="public" lib="kernel32" static="true">
                <type native="BOOLEAN">byte</type>
                <param name="lpSymlinkFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpTargetFileName">
                    <type>sbyte*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="CreateSymbolicLinkW" access="public" lib="kernel32" static="true">
                <type native="BOOLEAN">byte</type>
                <param name="lpSymlinkFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpTargetFileName">
                    <type>ushort*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
            </function>
            <function name="QueryActCtxSettingsW" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="hActCtx">
                    <type>IntPtr</type>
                </param>
                <param name="settingsNameSpace">
                    <type>ushort*</type>
                </param>
                <param name="settingName">
                    <type>ushort*</type>
                </param>
                <param name="pvBuffer">
                    <type>ushort*</type>
                </param>
                <param name="dwBuffer">
                    <type>nuint</type>
                </param>
                <param name="pdwWrittenOrRequired">
                    <type>nuint*</type>
                </param>
            </function>
            <function name="CreateSymbolicLinkTransactedA" access="public" lib="kernel32" static="true">
                <type native="BOOLEAN">byte</type>
                <param name="lpSymlinkFileName">
                    <type>sbyte*</type>
                </param>
                <param name="lpTargetFileName">
                    <type>sbyte*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="CreateSymbolicLinkTransactedW" access="public" lib="kernel32" static="true">
                <type native="BOOLEAN">byte</type>
                <param name="lpSymlinkFileName">
                    <type>ushort*</type>
                </param>
                <param name="lpTargetFileName">
                    <type>ushort*</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="hTransaction">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="ReplacePartitionUnit" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="TargetPartition">
                    <type>ushort*</type>
                </param>
                <param name="SparePartition">
                    <type>ushort*</type>
                </param>
                <param name="Flags">
                    <type>uint</type>
                </param>
            </function>
            <function name="AddSecureMemoryCacheCallback" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="pfnCallBack">
                    <type>delegate* unmanaged&lt;void*, nuint, byte&gt;</type>
                </param>
            </function>
            <function name="RemoveSecureMemoryCacheCallback" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="pfnCallBack">
                    <type>delegate* unmanaged&lt;void*, nuint, byte&gt;</type>
                </param>
            </function>
            <function name="CopyContext" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="Destination">
                    <type>CONTEXT*</type>
                </param>
                <param name="ContextFlags">
                    <type>uint</type>
                </param>
                <param name="Source">
                    <type>CONTEXT*</type>
                </param>
            </function>
            <function name="InitializeContext" access="public" lib="kernel32" setlasterror="true" static="true">
                <type native="BOOL">int</type>
                <param name="Buffer">
                    <type>void*</type>
                </param>
                <param name="ContextFlags">
                    <type>uint</type>
                </param>
                <param name="Context">
                    <type>CONTEXT**</type>
                </param>
                <param name="ContextLength">
                    <type>uint*</type>
                </param>
            </function>
            <function name="InitializeContext2" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="Buffer">
                    <type>void*</type>
                </param>
                <param name="ContextFlags">
                    <type>uint</type>
                </param>
                <param name="Context">
                    <type>CONTEXT**</type>
                </param>
                <param name="ContextLength">
                    <type>uint*</type>
                </param>
                <param name="XStateCompactionMask">
                    <type>ulong</type>
                </param>
            </function>
            <function name="GetEnabledXStateFeatures" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="DWORD64">ulong</type>
            </function>
            <function name="GetXStateFeaturesMask" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="Context">
                    <type>CONTEXT*</type>
                </param>
                <param name="FeatureMask">
                    <type>ulong*</type>
                </param>
            </function>
            <function name="LocateXStateFeature" access="public" lib="kernel32" static="true">
                <type native="PVOID">void*</type>
                <param name="Context">
                    <type>CONTEXT*</type>
                </param>
                <param name="FeatureId">
                    <type>uint</type>
                </param>
                <param name="Length">
                    <type>uint*</type>
                </param>
            </function>
            <function name="SetXStateFeaturesMask" access="public" lib="kernel32" static="true">
                <type native="BOOL">int</type>
                <param name="Context">
                    <type>CONTEXT*</type>
                </param>
                <param name="FeatureMask">
                    <type>ulong</type>
                </param>
            </function>
            <function name="EnableThreadProfiling" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="ThreadHandle">
                    <type>IntPtr</type>
                </param>
                <param name="Flags">
                    <type>uint</type>
                </param>
                <param name="HardwareCounters">
                    <type>ulong</type>
                </param>
                <param name="PerformanceDataHandle">
                    <type>IntPtr*</type>
                </param>
            </function>
            <function name="DisableThreadProfiling" access="public" lib="kernel32" static="true" unsafe="true">
                <type native="DWORD">uint</type>
                <param name="PerformanceDataHandle">
                    <type>IntPtr</type>
                </param>
            </function>
            <function name="QueryThreadProfiling" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="ThreadHandle">
                    <type>IntPtr</type>
                </param>
                <param name="Enabled">
                    <type>byte*</type>
                </param>
            </function>
            <function name="ReadThreadProfilingData" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="PerformanceDataHandle">
                    <type>IntPtr</type>
                </param>
                <param name="Flags">
                    <type>uint</type>
                </param>
                <param name="PerformanceData">
                    <type>PERFORMANCE_DATA*</type>
                </param>
            </function>
            <function name="RaiseCustomSystemEventTrigger" access="public" lib="kernel32" static="true">
                <type native="DWORD">uint</type>
                <param name="CustomSystemEventTriggerConfig">
                    <type>CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG*</type>
                </param>
            </function>
            <constant name="FILE_BEGIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="FILE_CURRENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="FILE_END" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="WAIT_FAILED" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0xFFFFFFFF)
            </code>
                </value>
            </constant>
            <constant name="WAIT_OBJECT_0" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((((uint)0x00000000)) + 0)
            </code>
                </value>
            </constant>
            <constant name="WAIT_ABANDONED" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((((uint)0x00000080)) + 0)
            </code>
                </value>
            </constant>
            <constant name="WAIT_ABANDONED_0" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((((uint)0x00000080)) + 0)
            </code>
                </value>
            </constant>
            <constant name="WAIT_IO_COMPLETION" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x000000C0)
            </code>
                </value>
            </constant>
            <constant name="FILE_FLAG_WRITE_THROUGH" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="FILE_FLAG_OVERLAPPED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000000
            </code>
                </value>
            </constant>
            <constant name="FILE_FLAG_NO_BUFFERING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20000000
            </code>
                </value>
            </constant>
            <constant name="FILE_FLAG_RANDOM_ACCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000000
            </code>
                </value>
            </constant>
            <constant name="FILE_FLAG_SEQUENTIAL_SCAN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x08000000
            </code>
                </value>
            </constant>
            <constant name="FILE_FLAG_DELETE_ON_CLOSE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04000000
            </code>
                </value>
            </constant>
            <constant name="FILE_FLAG_BACKUP_SEMANTICS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02000000
            </code>
                </value>
            </constant>
            <constant name="FILE_FLAG_POSIX_SEMANTICS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01000000
            </code>
                </value>
            </constant>
            <constant name="FILE_FLAG_SESSION_AWARE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00800000
            </code>
                </value>
            </constant>
            <constant name="FILE_FLAG_OPEN_REPARSE_POINT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00200000
            </code>
                </value>
            </constant>
            <constant name="FILE_FLAG_OPEN_NO_RECALL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00100000
            </code>
                </value>
            </constant>
            <constant name="FILE_FLAG_FIRST_PIPE_INSTANCE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00080000
            </code>
                </value>
            </constant>
            <constant name="FILE_FLAG_OPEN_REQUIRING_OPLOCK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00040000
            </code>
                </value>
            </constant>
            <constant name="PROGRESS_CONTINUE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="PROGRESS_CANCEL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="PROGRESS_STOP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="PROGRESS_QUIET" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CALLBACK_CHUNK_FINISHED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="CALLBACK_STREAM_SWITCH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="COPY_FILE_FAIL_IF_EXISTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="COPY_FILE_RESTARTABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="COPY_FILE_OPEN_SOURCE_FOR_WRITE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="COPY_FILE_ALLOW_DECRYPTED_DESTINATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="COPY_FILE_COPY_SYMLINK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000800
            </code>
                </value>
            </constant>
            <constant name="COPY_FILE_NO_BUFFERING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00001000
            </code>
                </value>
            </constant>
            <constant name="COPY_FILE_REQUEST_SECURITY_PRIVILEGES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00002000
            </code>
                </value>
            </constant>
            <constant name="COPY_FILE_RESUME_FROM_PAUSE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00004000
            </code>
                </value>
            </constant>
            <constant name="COPY_FILE_NO_OFFLOAD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00040000
            </code>
                </value>
            </constant>
            <constant name="COPY_FILE_IGNORE_EDP_BLOCK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00400000
            </code>
                </value>
            </constant>
            <constant name="COPY_FILE_IGNORE_SOURCE_ENCRYPTION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00800000
            </code>
                </value>
            </constant>
            <constant name="COPY_FILE_DONT_REQUEST_DEST_WRITE_DAC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02000000
            </code>
                </value>
            </constant>
            <constant name="COPY_FILE_REQUEST_COMPRESSED_TRAFFIC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000000
            </code>
                </value>
            </constant>
            <constant name="COPY_FILE_OPEN_AND_COPY_REPARSE_POINT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00200000
            </code>
                </value>
            </constant>
            <constant name="COPY_FILE_DIRECTORY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000080
            </code>
                </value>
            </constant>
            <constant name="COPY_FILE_SKIP_ALTERNATE_STREAMS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="COPY_FILE_DISABLE_PRE_ALLOCATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04000000
            </code>
                </value>
            </constant>
            <constant name="COPY_FILE_ENABLE_LOW_FREE_SPACE_MODE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x08000000
            </code>
                </value>
            </constant>
            <constant name="REPLACEFILE_WRITE_THROUGH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="REPLACEFILE_IGNORE_MERGE_ERRORS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="REPLACEFILE_IGNORE_ACL_ERRORS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="PIPE_ACCESS_INBOUND" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="PIPE_ACCESS_OUTBOUND" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="PIPE_ACCESS_DUPLEX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000003
            </code>
                </value>
            </constant>
            <constant name="PIPE_CLIENT_END" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="PIPE_SERVER_END" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="PIPE_WAIT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="PIPE_NOWAIT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="PIPE_READMODE_BYTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="PIPE_READMODE_MESSAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="PIPE_TYPE_BYTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="PIPE_TYPE_MESSAGE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="PIPE_ACCEPT_REMOTE_CLIENTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="PIPE_REJECT_REMOTE_CLIENTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="PIPE_UNLIMITED_INSTANCES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>255
            </code>
                </value>
            </constant>
            <constant name="SECURITY_ANONYMOUS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>
                        <value></value>((int)SecurityAnonymous &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="SECURITY_IDENTIFICATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>
                        <value></value>((int)SecurityIdentification &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="SECURITY_IMPERSONATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>
                        <value></value>((int)SecurityImpersonation &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="SECURITY_DELEGATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>
                        <value></value>((int)SecurityDelegation &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="SECURITY_CONTEXT_TRACKING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00040000
            </code>
                </value>
            </constant>
            <constant name="SECURITY_EFFECTIVE_ONLY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00080000
            </code>
                </value>
            </constant>
            <constant name="SECURITY_SQOS_PRESENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00100000
            </code>
                </value>
            </constant>
            <constant name="SECURITY_VALID_SQOS_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x001F0000
            </code>
                </value>
            </constant>
            <constant name="FAIL_FAST_GENERATE_EXCEPTION_ADDRESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="FAIL_FAST_NO_HARD_ERROR_DLG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="SP_SERIALCOMM" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000001)
            </code>
                </value>
            </constant>
            <constant name="PST_UNSPECIFIED" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000000)
            </code>
                </value>
            </constant>
            <constant name="PST_RS232" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000001)
            </code>
                </value>
            </constant>
            <constant name="PST_PARALLELPORT" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000002)
            </code>
                </value>
            </constant>
            <constant name="PST_RS422" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000003)
            </code>
                </value>
            </constant>
            <constant name="PST_RS423" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000004)
            </code>
                </value>
            </constant>
            <constant name="PST_RS449" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000005)
            </code>
                </value>
            </constant>
            <constant name="PST_MODEM" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000006)
            </code>
                </value>
            </constant>
            <constant name="PST_FAX" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000021)
            </code>
                </value>
            </constant>
            <constant name="PST_SCANNER" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000022)
            </code>
                </value>
            </constant>
            <constant name="PST_NETWORK_BRIDGE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000100)
            </code>
                </value>
            </constant>
            <constant name="PST_LAT" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000101)
            </code>
                </value>
            </constant>
            <constant name="PST_TCPIP_TELNET" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000102)
            </code>
                </value>
            </constant>
            <constant name="PST_X25" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000103)
            </code>
                </value>
            </constant>
            <constant name="PCF_DTRDSR" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0001)
            </code>
                </value>
            </constant>
            <constant name="PCF_RTSCTS" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0002)
            </code>
                </value>
            </constant>
            <constant name="PCF_RLSD" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0004)
            </code>
                </value>
            </constant>
            <constant name="PCF_PARITY_CHECK" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0008)
            </code>
                </value>
            </constant>
            <constant name="PCF_XONXOFF" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0010)
            </code>
                </value>
            </constant>
            <constant name="PCF_SETXCHAR" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0020)
            </code>
                </value>
            </constant>
            <constant name="PCF_TOTALTIMEOUTS" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0040)
            </code>
                </value>
            </constant>
            <constant name="PCF_INTTIMEOUTS" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0080)
            </code>
                </value>
            </constant>
            <constant name="PCF_SPECIALCHARS" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0100)
            </code>
                </value>
            </constant>
            <constant name="PCF_16BITMODE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0200)
            </code>
                </value>
            </constant>
            <constant name="SP_PARITY" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0001)
            </code>
                </value>
            </constant>
            <constant name="SP_BAUD" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0002)
            </code>
                </value>
            </constant>
            <constant name="SP_DATABITS" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0004)
            </code>
                </value>
            </constant>
            <constant name="SP_STOPBITS" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0008)
            </code>
                </value>
            </constant>
            <constant name="SP_HANDSHAKING" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0010)
            </code>
                </value>
            </constant>
            <constant name="SP_PARITY_CHECK" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0020)
            </code>
                </value>
            </constant>
            <constant name="SP_RLSD" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0040)
            </code>
                </value>
            </constant>
            <constant name="BAUD_075" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000001)
            </code>
                </value>
            </constant>
            <constant name="BAUD_110" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000002)
            </code>
                </value>
            </constant>
            <constant name="BAUD_134_5" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000004)
            </code>
                </value>
            </constant>
            <constant name="BAUD_150" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000008)
            </code>
                </value>
            </constant>
            <constant name="BAUD_300" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000010)
            </code>
                </value>
            </constant>
            <constant name="BAUD_600" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000020)
            </code>
                </value>
            </constant>
            <constant name="BAUD_1200" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000040)
            </code>
                </value>
            </constant>
            <constant name="BAUD_1800" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000080)
            </code>
                </value>
            </constant>
            <constant name="BAUD_2400" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000100)
            </code>
                </value>
            </constant>
            <constant name="BAUD_4800" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000200)
            </code>
                </value>
            </constant>
            <constant name="BAUD_7200" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000400)
            </code>
                </value>
            </constant>
            <constant name="BAUD_9600" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00000800)
            </code>
                </value>
            </constant>
            <constant name="BAUD_14400" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00001000)
            </code>
                </value>
            </constant>
            <constant name="BAUD_19200" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00002000)
            </code>
                </value>
            </constant>
            <constant name="BAUD_38400" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00004000)
            </code>
                </value>
            </constant>
            <constant name="BAUD_56K" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00008000)
            </code>
                </value>
            </constant>
            <constant name="BAUD_128K" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00010000)
            </code>
                </value>
            </constant>
            <constant name="BAUD_115200" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00020000)
            </code>
                </value>
            </constant>
            <constant name="BAUD_57600" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x00040000)
            </code>
                </value>
            </constant>
            <constant name="BAUD_USER" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x10000000)
            </code>
                </value>
            </constant>
            <constant name="DATABITS_5" access="public">
                <type primitive="True">ushort</type>
                <value>
                    <code>
                        <value></value>((ushort)0x0001)
            </code>
                </value>
            </constant>
            <constant name="DATABITS_6" access="public">
                <type primitive="True">ushort</type>
                <value>
                    <code>
                        <value></value>((ushort)0x0002)
            </code>
                </value>
            </constant>
            <constant name="DATABITS_7" access="public">
                <type primitive="True">ushort</type>
                <value>
                    <code>
                        <value></value>((ushort)0x0004)
            </code>
                </value>
            </constant>
            <constant name="DATABITS_8" access="public">
                <type primitive="True">ushort</type>
                <value>
                    <code>
                        <value></value>((ushort)0x0008)
            </code>
                </value>
            </constant>
            <constant name="DATABITS_16" access="public">
                <type primitive="True">ushort</type>
                <value>
                    <code>
                        <value></value>((ushort)0x0010)
            </code>
                </value>
            </constant>
            <constant name="DATABITS_16X" access="public">
                <type primitive="True">ushort</type>
                <value>
                    <code>
                        <value></value>((ushort)0x0020)
            </code>
                </value>
            </constant>
            <constant name="STOPBITS_10" access="public">
                <type primitive="True">ushort</type>
                <value>
                    <code>
                        <value></value>((ushort)0x0001)
            </code>
                </value>
            </constant>
            <constant name="STOPBITS_15" access="public">
                <type primitive="True">ushort</type>
                <value>
                    <code>
                        <value></value>((ushort)0x0002)
            </code>
                </value>
            </constant>
            <constant name="STOPBITS_20" access="public">
                <type primitive="True">ushort</type>
                <value>
                    <code>
                        <value></value>((ushort)0x0004)
            </code>
                </value>
            </constant>
            <constant name="PARITY_NONE" access="public">
                <type primitive="True">ushort</type>
                <value>
                    <code>
                        <value></value>((ushort)0x0100)
            </code>
                </value>
            </constant>
            <constant name="PARITY_ODD" access="public">
                <type primitive="True">ushort</type>
                <value>
                    <code>
                        <value></value>((ushort)0x0200)
            </code>
                </value>
            </constant>
            <constant name="PARITY_EVEN" access="public">
                <type primitive="True">ushort</type>
                <value>
                    <code>
                        <value></value>((ushort)0x0400)
            </code>
                </value>
            </constant>
            <constant name="PARITY_MARK" access="public">
                <type primitive="True">ushort</type>
                <value>
                    <code>
                        <value></value>((ushort)0x0800)
            </code>
                </value>
            </constant>
            <constant name="PARITY_SPACE" access="public">
                <type primitive="True">ushort</type>
                <value>
                    <code>
                        <value></value>((ushort)0x1000)
            </code>
                </value>
            </constant>
            <constant name="COMMPROP_INITIALIZED" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0xE73CF52E)
            </code>
                </value>
            </constant>
            <constant name="DTR_CONTROL_DISABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00
            </code>
                </value>
            </constant>
            <constant name="DTR_CONTROL_ENABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="DTR_CONTROL_HANDSHAKE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="RTS_CONTROL_DISABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00
            </code>
                </value>
            </constant>
            <constant name="RTS_CONTROL_ENABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="RTS_CONTROL_HANDSHAKE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="RTS_CONTROL_TOGGLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x03
            </code>
                </value>
            </constant>
            <constant name="GMEM_FIXED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000
            </code>
                </value>
            </constant>
            <constant name="GMEM_MOVEABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0002
            </code>
                </value>
            </constant>
            <constant name="GMEM_NOCOMPACT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0010
            </code>
                </value>
            </constant>
            <constant name="GMEM_NODISCARD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0020
            </code>
                </value>
            </constant>
            <constant name="GMEM_ZEROINIT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0040
            </code>
                </value>
            </constant>
            <constant name="GMEM_MODIFY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0080
            </code>
                </value>
            </constant>
            <constant name="GMEM_DISCARDABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0100
            </code>
                </value>
            </constant>
            <constant name="GMEM_NOT_BANKED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1000
            </code>
                </value>
            </constant>
            <constant name="GMEM_SHARE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2000
            </code>
                </value>
            </constant>
            <constant name="GMEM_DDESHARE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2000
            </code>
                </value>
            </constant>
            <constant name="GMEM_NOTIFY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4000
            </code>
                </value>
            </constant>
            <constant name="GMEM_LOWER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1000
            </code>
                </value>
            </constant>
            <constant name="GMEM_VALID_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x7F72
            </code>
                </value>
            </constant>
            <constant name="GMEM_INVALID_HANDLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8000
            </code>
                </value>
            </constant>
            <constant name="GHND" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0002 | 0x0040)
            </code>
                </value>
            </constant>
            <constant name="GPTR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0000 | 0x0040)
            </code>
                </value>
            </constant>
            <constant name="GMEM_DISCARDED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4000
            </code>
                </value>
            </constant>
            <constant name="GMEM_LOCKCOUNT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00FF
            </code>
                </value>
            </constant>
            <constant name="DEBUG_PROCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="DEBUG_ONLY_THIS_PROCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="CREATE_SUSPENDED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="DETACHED_PROCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="CREATE_NEW_CONSOLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="NORMAL_PRIORITY_CLASS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="IDLE_PRIORITY_CLASS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="HIGH_PRIORITY_CLASS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000080
            </code>
                </value>
            </constant>
            <constant name="REALTIME_PRIORITY_CLASS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="CREATE_NEW_PROCESS_GROUP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000200
            </code>
                </value>
            </constant>
            <constant name="CREATE_UNICODE_ENVIRONMENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000400
            </code>
                </value>
            </constant>
            <constant name="CREATE_SEPARATE_WOW_VDM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000800
            </code>
                </value>
            </constant>
            <constant name="CREATE_SHARED_WOW_VDM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00001000
            </code>
                </value>
            </constant>
            <constant name="CREATE_FORCEDOS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00002000
            </code>
                </value>
            </constant>
            <constant name="BELOW_NORMAL_PRIORITY_CLASS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00004000
            </code>
                </value>
            </constant>
            <constant name="ABOVE_NORMAL_PRIORITY_CLASS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="INHERIT_PARENT_AFFINITY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00010000
            </code>
                </value>
            </constant>
            <constant name="INHERIT_CALLER_PRIORITY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00020000
            </code>
                </value>
            </constant>
            <constant name="CREATE_PROTECTED_PROCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00040000
            </code>
                </value>
            </constant>
            <constant name="EXTENDED_STARTUPINFO_PRESENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00080000
            </code>
                </value>
            </constant>
            <constant name="PROCESS_MODE_BACKGROUND_BEGIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00100000
            </code>
                </value>
            </constant>
            <constant name="PROCESS_MODE_BACKGROUND_END" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00200000
            </code>
                </value>
            </constant>
            <constant name="CREATE_SECURE_PROCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00400000
            </code>
                </value>
            </constant>
            <constant name="CREATE_BREAKAWAY_FROM_JOB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01000000
            </code>
                </value>
            </constant>
            <constant name="CREATE_PRESERVE_CODE_AUTHZ_LEVEL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02000000
            </code>
                </value>
            </constant>
            <constant name="CREATE_DEFAULT_ERROR_MODE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04000000
            </code>
                </value>
            </constant>
            <constant name="CREATE_NO_WINDOW" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x08000000
            </code>
                </value>
            </constant>
            <constant name="PROFILE_USER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000000
            </code>
                </value>
            </constant>
            <constant name="PROFILE_KERNEL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x20000000
            </code>
                </value>
            </constant>
            <constant name="PROFILE_SERVER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x40000000
            </code>
                </value>
            </constant>
            <constant name="CREATE_IGNORE_SYSTEM_DEFAULT" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="STACK_SIZE_PARAM_IS_A_RESERVATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00010000
            </code>
                </value>
            </constant>
            <constant name="THREAD_PRIORITY_LOWEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-2)
            </code>
                </value>
            </constant>
            <constant name="THREAD_PRIORITY_BELOW_NORMAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((-2) + 1)
            </code>
                </value>
            </constant>
            <constant name="THREAD_PRIORITY_NORMAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="THREAD_PRIORITY_HIGHEST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="THREAD_PRIORITY_ABOVE_NORMAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(2 - 1)
            </code>
                </value>
            </constant>
            <constant name="THREAD_PRIORITY_ERROR_RETURN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x7fffffff)
            </code>
                </value>
            </constant>
            <constant name="THREAD_PRIORITY_TIME_CRITICAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>15
            </code>
                </value>
            </constant>
            <constant name="THREAD_PRIORITY_IDLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-15)
            </code>
                </value>
            </constant>
            <constant name="THREAD_MODE_BACKGROUND_BEGIN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00010000
            </code>
                </value>
            </constant>
            <constant name="THREAD_MODE_BACKGROUND_END" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00020000
            </code>
                </value>
            </constant>
            <constant name="VOLUME_NAME_DOS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0
            </code>
                </value>
            </constant>
            <constant name="VOLUME_NAME_GUID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="VOLUME_NAME_NT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="VOLUME_NAME_NONE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x4
            </code>
                </value>
            </constant>
            <constant name="FILE_NAME_NORMALIZED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0
            </code>
                </value>
            </constant>
            <constant name="FILE_NAME_OPENED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8
            </code>
                </value>
            </constant>
            <constant name="DRIVE_UNKNOWN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="DRIVE_NO_ROOT_DIR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="DRIVE_REMOVABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="DRIVE_FIXED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="DRIVE_REMOTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="DRIVE_CDROM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="DRIVE_RAMDISK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="FILE_TYPE_UNKNOWN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000
            </code>
                </value>
            </constant>
            <constant name="FILE_TYPE_DISK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="FILE_TYPE_CHAR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0002
            </code>
                </value>
            </constant>
            <constant name="FILE_TYPE_PIPE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0003
            </code>
                </value>
            </constant>
            <constant name="FILE_TYPE_REMOTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8000
            </code>
                </value>
            </constant>
            <constant name="STD_INPUT_HANDLE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <unchecked>
                        <code>
                            <value></value>((uint)-10)
            </code>
                    </unchecked>
                </value>
            </constant>
            <constant name="STD_OUTPUT_HANDLE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <unchecked>
                        <code>
                            <value></value>((uint)-11)
            </code>
                    </unchecked>
                </value>
            </constant>
            <constant name="STD_ERROR_HANDLE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <unchecked>
                        <code>
                            <value></value>((uint)-12)
            </code>
                    </unchecked>
                </value>
            </constant>
            <constant name="NOPARITY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="ODDPARITY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="EVENPARITY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="MARKPARITY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="SPACEPARITY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="ONESTOPBIT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="ONE5STOPBITS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="TWOSTOPBITS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="IGNORE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="INFINITE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="CBR_110" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>110
            </code>
                </value>
            </constant>
            <constant name="CBR_300" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>300
            </code>
                </value>
            </constant>
            <constant name="CBR_600" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>600
            </code>
                </value>
            </constant>
            <constant name="CBR_1200" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1200
            </code>
                </value>
            </constant>
            <constant name="CBR_2400" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2400
            </code>
                </value>
            </constant>
            <constant name="CBR_4800" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4800
            </code>
                </value>
            </constant>
            <constant name="CBR_9600" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9600
            </code>
                </value>
            </constant>
            <constant name="CBR_14400" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>14400
            </code>
                </value>
            </constant>
            <constant name="CBR_19200" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>19200
            </code>
                </value>
            </constant>
            <constant name="CBR_38400" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>38400
            </code>
                </value>
            </constant>
            <constant name="CBR_56000" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>56000
            </code>
                </value>
            </constant>
            <constant name="CBR_57600" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>57600
            </code>
                </value>
            </constant>
            <constant name="CBR_115200" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>115200
            </code>
                </value>
            </constant>
            <constant name="CBR_128000" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>128000
            </code>
                </value>
            </constant>
            <constant name="CBR_256000" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>256000
            </code>
                </value>
            </constant>
            <constant name="CE_RXOVER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="CE_OVERRUN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0002
            </code>
                </value>
            </constant>
            <constant name="CE_RXPARITY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0004
            </code>
                </value>
            </constant>
            <constant name="CE_FRAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0008
            </code>
                </value>
            </constant>
            <constant name="CE_BREAK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0010
            </code>
                </value>
            </constant>
            <constant name="CE_TXFULL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0100
            </code>
                </value>
            </constant>
            <constant name="CE_PTO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0200
            </code>
                </value>
            </constant>
            <constant name="CE_IOE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0400
            </code>
                </value>
            </constant>
            <constant name="CE_DNS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0800
            </code>
                </value>
            </constant>
            <constant name="CE_OOP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1000
            </code>
                </value>
            </constant>
            <constant name="CE_MODE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8000
            </code>
                </value>
            </constant>
            <constant name="IE_BADID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-1)
            </code>
                </value>
            </constant>
            <constant name="IE_OPEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-2)
            </code>
                </value>
            </constant>
            <constant name="IE_NOPEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-3)
            </code>
                </value>
            </constant>
            <constant name="IE_MEMORY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-4)
            </code>
                </value>
            </constant>
            <constant name="IE_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-5)
            </code>
                </value>
            </constant>
            <constant name="IE_HARDWARE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-10)
            </code>
                </value>
            </constant>
            <constant name="IE_BYTESIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-11)
            </code>
                </value>
            </constant>
            <constant name="IE_BAUDRATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-12)
            </code>
                </value>
            </constant>
            <constant name="EV_RXCHAR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="EV_RXFLAG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0002
            </code>
                </value>
            </constant>
            <constant name="EV_TXEMPTY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0004
            </code>
                </value>
            </constant>
            <constant name="EV_CTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0008
            </code>
                </value>
            </constant>
            <constant name="EV_DSR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0010
            </code>
                </value>
            </constant>
            <constant name="EV_RLSD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0020
            </code>
                </value>
            </constant>
            <constant name="EV_BREAK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0040
            </code>
                </value>
            </constant>
            <constant name="EV_ERR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0080
            </code>
                </value>
            </constant>
            <constant name="EV_RING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0100
            </code>
                </value>
            </constant>
            <constant name="EV_PERR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0200
            </code>
                </value>
            </constant>
            <constant name="EV_RX80FULL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0400
            </code>
                </value>
            </constant>
            <constant name="EV_EVENT1" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0800
            </code>
                </value>
            </constant>
            <constant name="EV_EVENT2" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1000
            </code>
                </value>
            </constant>
            <constant name="SETXOFF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="SETXON" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="SETRTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="CLRRTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="SETDTR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="CLRDTR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="RESETDEV" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="SETBREAK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="CLRBREAK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="PURGE_TXABORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="PURGE_RXABORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0002
            </code>
                </value>
            </constant>
            <constant name="PURGE_TXCLEAR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0004
            </code>
                </value>
            </constant>
            <constant name="PURGE_RXCLEAR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0008
            </code>
                </value>
            </constant>
            <constant name="LPTx" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x80
            </code>
                </value>
            </constant>
            <constant name="MS_CTS_ON" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0010)
            </code>
                </value>
            </constant>
            <constant name="MS_DSR_ON" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0020)
            </code>
                </value>
            </constant>
            <constant name="MS_RING_ON" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0040)
            </code>
                </value>
            </constant>
            <constant name="MS_RLSD_ON" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>
                        <value></value>((uint)0x0080)
            </code>
                </value>
            </constant>
            <constant name="S_QUEUEEMPTY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="S_THRESHOLD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="S_ALLTHRESHOLD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="S_NORMAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="S_LEGATO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="S_STACCATO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="S_PERIOD512" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="S_PERIOD1024" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="S_PERIOD2048" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="S_PERIODVOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="S_WHITE512" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="S_WHITE1024" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="S_WHITE2048" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="S_WHITEVOICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="S_SERDVNA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-1)
            </code>
                </value>
            </constant>
            <constant name="S_SEROFM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-2)
            </code>
                </value>
            </constant>
            <constant name="S_SERMACT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-3)
            </code>
                </value>
            </constant>
            <constant name="S_SERQFUL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-4)
            </code>
                </value>
            </constant>
            <constant name="S_SERBDNT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-5)
            </code>
                </value>
            </constant>
            <constant name="S_SERDLN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-6)
            </code>
                </value>
            </constant>
            <constant name="S_SERDCC" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-7)
            </code>
                </value>
            </constant>
            <constant name="S_SERDTP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-8)
            </code>
                </value>
            </constant>
            <constant name="S_SERDVL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-9)
            </code>
                </value>
            </constant>
            <constant name="S_SERDMD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-10)
            </code>
                </value>
            </constant>
            <constant name="S_SERDSH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-11)
            </code>
                </value>
            </constant>
            <constant name="S_SERDPT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-12)
            </code>
                </value>
            </constant>
            <constant name="S_SERDFQ" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-13)
            </code>
                </value>
            </constant>
            <constant name="S_SERDDR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-14)
            </code>
                </value>
            </constant>
            <constant name="S_SERDSR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-15)
            </code>
                </value>
            </constant>
            <constant name="S_SERDST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(-16)
            </code>
                </value>
            </constant>
            <constant name="NMPWAIT_WAIT_FOREVER" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xffffffff
            </code>
                </value>
            </constant>
            <constant name="NMPWAIT_NOWAIT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="NMPWAIT_USE_DEFAULT_WAIT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="FS_CASE_IS_PRESERVED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="FS_CASE_SENSITIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="FS_UNICODE_STORED_ON_DISK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="FS_PERSISTENT_ACLS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="FS_VOL_IS_COMPRESSED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="FS_FILE_COMPRESSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="FS_FILE_ENCRYPTION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00020000
            </code>
                </value>
            </constant>
            <constant name="OF_READ" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="OF_WRITE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="OF_READWRITE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="OF_SHARE_COMPAT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="OF_SHARE_EXCLUSIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="OF_SHARE_DENY_WRITE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="OF_SHARE_DENY_READ" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000030
            </code>
                </value>
            </constant>
            <constant name="OF_SHARE_DENY_NONE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="OF_PARSE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="OF_DELETE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000200
            </code>
                </value>
            </constant>
            <constant name="OF_VERIFY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000400
            </code>
                </value>
            </constant>
            <constant name="OF_CANCEL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000800
            </code>
                </value>
            </constant>
            <constant name="OF_CREATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00001000
            </code>
                </value>
            </constant>
            <constant name="OF_PROMPT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00002000
            </code>
                </value>
            </constant>
            <constant name="OF_EXIST" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00004000
            </code>
                </value>
            </constant>
            <constant name="OF_REOPEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="OFS_MAXPATHNAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>128
            </code>
                </value>
            </constant>
            <constant name="MAXINTATOM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xC000
            </code>
                </value>
            </constant>
            <constant name="INVALID_ATOM" access="public">
                <type primitive="True">ushort</type>
                <value>
                    <code>
                        <value></value>((ushort)0)
            </code>
                </value>
            </constant>
            <constant name="SCS_32BIT_BINARY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="SCS_DOS_BINARY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="SCS_WOW_BINARY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="SCS_PIF_BINARY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="SCS_POSIX_BINARY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="SCS_OS216_BINARY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="SCS_64BIT_BINARY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="SCS_THIS_PLATFORM_BINARY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="GetBinaryType" access="public">
                <type primitive="False">delegate*&lt;ushort*, uint*, int&gt;</type>
                <value>
                    <deref>
                        <code>GetBinaryTypeW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GetLongPathNameTransacted" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, uint, IntPtr, uint&gt;</type>
                <value>
                    <deref>
                        <code>GetLongPathNameTransactedW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="FIBER_FLAG_FLOAT_SWITCH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="UMS_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x0100)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_DEP_ENABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="FILE_SKIP_COMPLETION_PORT_ON_SUCCESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="FILE_SKIP_SET_EVENT_ON_HANDLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="SEM_FAILCRITICALERRORS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0001
            </code>
                </value>
            </constant>
            <constant name="SEM_NOGPFAULTERRORBOX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0002
            </code>
                </value>
            </constant>
            <constant name="SEM_NOALIGNMENTFAULTEXCEPT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0004
            </code>
                </value>
            </constant>
            <constant name="SEM_NOOPENFILEERRORBOX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8000
            </code>
                </value>
            </constant>
            <constant name="CRITICAL_SECTION_NO_DEBUG_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01000000
            </code>
                </value>
            </constant>
            <constant name="SetFileShortName" access="public">
                <type primitive="False">delegate*&lt;IntPtr, ushort*, int&gt;</type>
                <value>
                    <deref>
                        <code>SetFileShortNameW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="HANDLE_FLAG_INHERIT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="HANDLE_FLAG_PROTECT_FROM_CLOSE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="HINSTANCE_ERROR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>32
            </code>
                </value>
            </constant>
            <constant name="GET_TAPE_MEDIA_INFORMATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="GET_TAPE_DRIVE_INFORMATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="SET_TAPE_MEDIA_INFORMATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="SET_TAPE_DRIVE_INFORMATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="FORMAT_MESSAGE_ALLOCATE_BUFFER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="FormatMessage" access="public">
                <type primitive="False">delegate*&lt;uint, void*, uint, uint, ushort*, uint, sbyte**, uint&gt;</type>
                <value>
                    <deref>
                        <code>FormatMessageW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="FORMAT_MESSAGE_IGNORE_INSERTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000200
            </code>
                </value>
            </constant>
            <constant name="FORMAT_MESSAGE_FROM_STRING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000400
            </code>
                </value>
            </constant>
            <constant name="FORMAT_MESSAGE_FROM_HMODULE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000800
            </code>
                </value>
            </constant>
            <constant name="FORMAT_MESSAGE_FROM_SYSTEM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00001000
            </code>
                </value>
            </constant>
            <constant name="FORMAT_MESSAGE_ARGUMENT_ARRAY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00002000
            </code>
                </value>
            </constant>
            <constant name="FORMAT_MESSAGE_MAX_WIDTH_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x000000FF
            </code>
                </value>
            </constant>
            <constant name="CreateMailslot" access="public">
                <type primitive="False">delegate*&lt;ushort*, uint, uint, SECURITY_ATTRIBUTES*, IntPtr&gt;</type>
                <value>
                    <deref>
                        <code>CreateMailslotW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="EncryptFile" access="public">
                <type primitive="False">delegate*&lt;ushort*, int&gt;</type>
                <value>
                    <deref>
                        <code>EncryptFileW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="DecryptFile" access="public">
                <type primitive="False">delegate*&lt;ushort*, uint, int&gt;</type>
                <value>
                    <deref>
                        <code>DecryptFileW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="FILE_ENCRYPTABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="FILE_IS_ENCRYPTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="FILE_SYSTEM_ATTR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="FILE_ROOT_DIR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="FILE_SYSTEM_DIR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="FILE_UNKNOWN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="FILE_SYSTEM_NOT_SUPPORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>6
            </code>
                </value>
            </constant>
            <constant name="FILE_USER_DISALLOWED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="FILE_READ_ONLY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="FILE_DIR_DISALLOWED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="FileEncryptionStatus" access="public">
                <type primitive="False">delegate*&lt;ushort*, uint*, int&gt;</type>
                <value>
                    <deref>
                        <code>FileEncryptionStatusW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="EFS_USE_RECOVERY_KEYS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x1)
            </code>
                </value>
            </constant>
            <constant name="CREATE_FOR_IMPORT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(1)
            </code>
                </value>
            </constant>
            <constant name="CREATE_FOR_DIR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(2)
            </code>
                </value>
            </constant>
            <constant name="OVERWRITE_HIDDEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(4)
            </code>
                </value>
            </constant>
            <constant name="EFSRPC_SECURE_ONLY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(8)
            </code>
                </value>
            </constant>
            <constant name="EFS_DROP_ALTERNATE_STREAMS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x10)
            </code>
                </value>
            </constant>
            <constant name="OpenEncryptedFileRaw" access="public">
                <type primitive="False">delegate*&lt;ushort*, uint, void**, uint&gt;</type>
                <value>
                    <deref>
                        <code>OpenEncryptedFileRawW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="lstrcmp" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, int&gt;</type>
                <value>
                    <deref>
                        <code>lstrcmpW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="lstrcmpi" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, int&gt;</type>
                <value>
                    <deref>
                        <code>lstrcmpiW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="lstrcpyn" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, int, ushort*&gt;</type>
                <value>
                    <deref>
                        <code>lstrcpynW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="lstrcpy" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, ushort*&gt;</type>
                <value>
                    <deref>
                        <code>lstrcpyW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="lstrcat" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, ushort*&gt;</type>
                <value>
                    <deref>
                        <code>lstrcatW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="lstrlen" access="public">
                <type primitive="False">delegate*&lt;ushort*, int&gt;</type>
                <value>
                    <deref>
                        <code>lstrlenW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="BACKUP_INVALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="BACKUP_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="BACKUP_EA_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="BACKUP_SECURITY_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000003
            </code>
                </value>
            </constant>
            <constant name="BACKUP_ALTERNATE_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="BACKUP_LINK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000005
            </code>
                </value>
            </constant>
            <constant name="BACKUP_PROPERTY_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000006
            </code>
                </value>
            </constant>
            <constant name="BACKUP_OBJECT_ID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000007
            </code>
                </value>
            </constant>
            <constant name="BACKUP_REPARSE_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="BACKUP_SPARSE_BLOCK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000009
            </code>
                </value>
            </constant>
            <constant name="BACKUP_TXFS_DATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000000a
            </code>
                </value>
            </constant>
            <constant name="BACKUP_GHOSTED_FILE_EXTENTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000000b
            </code>
                </value>
            </constant>
            <constant name="STREAM_NORMAL_ATTRIBUTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="STREAM_MODIFIED_WHEN_READ" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="STREAM_CONTAINS_SECURITY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="STREAM_CONTAINS_PROPERTIES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="STREAM_SPARSE_ATTRIBUTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="STREAM_CONTAINS_GHOSTED_FILE_EXTENTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="STARTF_USESHOWWINDOW" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="STARTF_USESIZE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="STARTF_USEPOSITION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="STARTF_USECOUNTCHARS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="STARTF_USEFILLATTRIBUTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="STARTF_RUNFULLSCREEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="STARTF_FORCEONFEEDBACK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="STARTF_FORCEOFFFEEDBACK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000080
            </code>
                </value>
            </constant>
            <constant name="STARTF_USESTDHANDLES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000100
            </code>
                </value>
            </constant>
            <constant name="STARTF_USEHOTKEY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000200
            </code>
                </value>
            </constant>
            <constant name="STARTF_TITLEISLINKNAME" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000800
            </code>
                </value>
            </constant>
            <constant name="STARTF_TITLEISAPPID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00001000
            </code>
                </value>
            </constant>
            <constant name="STARTF_PREVENTPINNING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00002000
            </code>
                </value>
            </constant>
            <constant name="STARTF_UNTRUSTEDSOURCE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00008000
            </code>
                </value>
            </constant>
            <constant name="SHUTDOWN_NORETRY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="PROTECTION_LEVEL_WINTCB_LIGHT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="PROTECTION_LEVEL_WINDOWS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="PROTECTION_LEVEL_WINDOWS_LIGHT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="PROTECTION_LEVEL_ANTIMALWARE_LIGHT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000003
            </code>
                </value>
            </constant>
            <constant name="PROTECTION_LEVEL_LSA_LIGHT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="PROTECTION_LEVEL_WINTCB" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000005
            </code>
                </value>
            </constant>
            <constant name="PROTECTION_LEVEL_CODEGEN_LIGHT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000006
            </code>
                </value>
            </constant>
            <constant name="PROTECTION_LEVEL_AUTHENTICODE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000007
            </code>
                </value>
            </constant>
            <constant name="PROTECTION_LEVEL_PPL_APP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="PROTECTION_LEVEL_SAME" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="PROTECTION_LEVEL_NONE" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFE
            </code>
                </value>
            </constant>
            <constant name="PROCESS_NAME_NATIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="QueryFullProcessImageName" access="public">
                <type primitive="False">delegate*&lt;IntPtr, uint, ushort*, uint*, int&gt;</type>
                <value>
                    <deref>
                        <code>QueryFullProcessImageNameW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_NUMBER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x0000FFFF
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_THREAD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00010000
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_INPUT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00020000
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_ADDITIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00040000
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_PARENT_PROCESS" access="public">
                <type primitive="False">int</type>
                <value>
                    <code>(((ProcThreadAttributeParentProcess) &amp; 0x0000FFFF) | ((0 != 0) ? 0x00010000 : 0) | ((1 != 0) ? 0x00020000 : 0) | ((0 != 0) ? 0x00040000 : 0))
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_HANDLE_LIST" access="public">
                <type primitive="False">int</type>
                <value>
                    <code>(((ProcThreadAttributeHandleList) &amp; 0x0000FFFF) | ((0 != 0) ? 0x00010000 : 0) | ((1 != 0) ? 0x00020000 : 0) | ((0 != 0) ? 0x00040000 : 0))
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_GROUP_AFFINITY" access="public">
                <type primitive="False">int</type>
                <value>
                    <code>(((ProcThreadAttributeGroupAffinity) &amp; 0x0000FFFF) | ((1 != 0) ? 0x00010000 : 0) | ((1 != 0) ? 0x00020000 : 0) | ((0 != 0) ? 0x00040000 : 0))
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_PREFERRED_NODE" access="public">
                <type primitive="False">int</type>
                <value>
                    <code>(((ProcThreadAttributePreferredNode) &amp; 0x0000FFFF) | ((0 != 0) ? 0x00010000 : 0) | ((1 != 0) ? 0x00020000 : 0) | ((0 != 0) ? 0x00040000 : 0))
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_IDEAL_PROCESSOR" access="public">
                <type primitive="False">int</type>
                <value>
                    <code>(((ProcThreadAttributeIdealProcessor) &amp; 0x0000FFFF) | ((1 != 0) ? 0x00010000 : 0) | ((1 != 0) ? 0x00020000 : 0) | ((0 != 0) ? 0x00040000 : 0))
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_UMS_THREAD" access="public">
                <type primitive="False">int</type>
                <value>
                    <code>(((ProcThreadAttributeUmsThread) &amp; 0x0000FFFF) | ((1 != 0) ? 0x00010000 : 0) | ((1 != 0) ? 0x00020000 : 0) | ((0 != 0) ? 0x00040000 : 0))
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_MITIGATION_POLICY" access="public">
                <type primitive="False">int</type>
                <value>
                    <code>(((ProcThreadAttributeMitigationPolicy) &amp; 0x0000FFFF) | ((0 != 0) ? 0x00010000 : 0) | ((1 != 0) ? 0x00020000 : 0) | ((0 != 0) ? 0x00040000 : 0))
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_SECURITY_CAPABILITIES" access="public">
                <type primitive="False">int</type>
                <value>
                    <code>(((ProcThreadAttributeSecurityCapabilities) &amp; 0x0000FFFF) | ((0 != 0) ? 0x00010000 : 0) | ((1 != 0) ? 0x00020000 : 0) | ((0 != 0) ? 0x00040000 : 0))
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_PROTECTION_LEVEL" access="public">
                <type primitive="False">int</type>
                <value>
                    <code>(((ProcThreadAttributeProtectionLevel) &amp; 0x0000FFFF) | ((0 != 0) ? 0x00010000 : 0) | ((1 != 0) ? 0x00020000 : 0) | ((0 != 0) ? 0x00040000 : 0))
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_PSEUDOCONSOLE" access="public">
                <type primitive="False">int</type>
                <value>
                    <code>(((ProcThreadAttributePseudoConsole) &amp; 0x0000FFFF) | ((0 != 0) ? 0x00010000 : 0) | ((1 != 0) ? 0x00020000 : 0) | ((0 != 0) ? 0x00040000 : 0))
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_DEP_ENABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_DEP_ATL_THUNK_ENABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_SEHOP_ENABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000003 &lt;&lt; 8)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_DEFER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000000 &lt;&lt; 8)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001 &lt;&lt; 8)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_OFF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002 &lt;&lt; 8)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON_REQ_RELOCS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000003 &lt;&lt; 8)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000003 &lt;&lt; 12)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_DEFER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000000 &lt;&lt; 12)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_ON" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001 &lt;&lt; 12)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_OFF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002 &lt;&lt; 12)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_RESERVED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000003 &lt;&lt; 12)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000003 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_DEFER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000000 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_ON" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_OFF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_RESERVED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000003 &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000003 &lt;&lt; 20)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_DEFER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000000 &lt;&lt; 20)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_ON" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001 &lt;&lt; 20)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_OFF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002 &lt;&lt; 20)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_RESERVED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000003 &lt;&lt; 20)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000003 &lt;&lt; 24)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_DEFER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000000 &lt;&lt; 24)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_ON" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001 &lt;&lt; 24)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_OFF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002 &lt;&lt; 24)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_RESERVED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000003 &lt;&lt; 24)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_MASK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000003 &lt;&lt; 28)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_DEFER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000000 &lt;&lt; 28)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_ON" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001 &lt;&lt; 28)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_OFF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002 &lt;&lt; 28)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_RESERVED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000003 &lt;&lt; 28)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 32)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 32)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 32)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 32)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_RESERVED" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 32)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 36)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 36)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 36)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 36)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON_ALLOW_OPT_OUT" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 36)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 40)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 40)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 40)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 40)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_EXPORT_SUPPRESSION" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 40)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 44)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 44)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 44)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 44)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALLOW_STORE" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 44)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 48)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 48)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 48)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 48)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_AUDIT_NONSYSTEM_FONTS" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 48)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 52)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 52)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 52)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 52)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_RESERVED" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 52)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 56)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 56)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 56)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 56)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_RESERVED" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 56)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 60)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 60)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 60)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 60)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_RESERVED" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 60)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 4)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 4)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 4)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 4)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_AUDIT" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 4)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 8)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 8)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 8)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 8)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_RESERVED" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 8)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 12)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 12)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 12)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 12)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_NOINHERIT" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 12)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_RESERVED" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 16)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 20)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 20)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 20)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 20)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_RESERVED" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 20)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 24)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 24)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 24)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 24)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_RESERVED" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 24)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 28)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 28)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 28)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 28)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_CET_USER_SHADOW_STACKS_STRICT_MODE" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 28)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 32)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 32)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 32)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 32)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_RELAXED_MODE" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 32)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 36)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 36)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 36)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 36)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_BLOCK_NON_CET_BINARIES_NON_EHCONT" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 36)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 48)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 48)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 48)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 48)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_POLICY2_CET_DYNAMIC_APIS_OUT_OF_PROC_ONLY_RESERVED" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 48)
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_JOB_LIST" access="public">
                <type primitive="False">int</type>
                <value>
                    <code>(((ProcThreadAttributeJobList) &amp; 0x0000FFFF) | ((0 != 0) ? 0x00010000 : 0) | ((1 != 0) ? 0x00020000 : 0) | ((0 != 0) ? 0x00040000 : 0))
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_CHILD_PROCESS_RESTRICTED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_CHILD_PROCESS_OVERRIDE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_CHILD_PROCESS_RESTRICTED_UNLESS_SECURE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_CHILD_PROCESS_POLICY" access="public">
                <type primitive="False">int</type>
                <value>
                    <code>(((ProcThreadAttributeChildProcessPolicy) &amp; 0x0000FFFF) | ((0 != 0) ? 0x00010000 : 0) | ((1 != 0) ? 0x00020000 : 0) | ((0 != 0) ? 0x00040000 : 0))
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_ALL_APPLICATION_PACKAGES_OPT_OUT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_ALL_APPLICATION_PACKAGES_POLICY" access="public">
                <type primitive="False">int</type>
                <value>
                    <code>(((ProcThreadAttributeAllApplicationPackagesPolicy) &amp; 0x0000FFFF) | ((0 != 0) ? 0x00010000 : 0) | ((1 != 0) ? 0x00020000 : 0) | ((0 != 0) ? 0x00040000 : 0))
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_WIN32K_FILTER" access="public">
                <type primitive="False">int</type>
                <value>
                    <code>(((ProcThreadAttributeWin32kFilter) &amp; 0x0000FFFF) | ((0 != 0) ? 0x00010000 : 0) | ((1 != 0) ? 0x00020000 : 0) | ((0 != 0) ? 0x00040000 : 0))
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_ENABLE_PROCESS_TREE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_DISABLE_PROCESS_TREE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_OVERRIDE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_DESKTOP_APP_POLICY" access="public">
                <type primitive="False">int</type>
                <value>
                    <code>(((ProcThreadAttributeDesktopAppPolicy) &amp; 0x0000FFFF) | ((0 != 0) ? 0x00010000 : 0) | ((1 != 0) ? 0x00020000 : 0) | ((0 != 0) ? 0x00040000 : 0))
            </code>
                </value>
            </constant>
            <constant name="PROC_THREAD_ATTRIBUTE_MITIGATION_AUDIT_POLICY" access="public">
                <type primitive="False">int</type>
                <value>
                    <code>(((ProcThreadAttributeMitigationAuditPolicy) &amp; 0x0000FFFF) | ((0 != 0) ? 0x00010000 : 0) | ((1 != 0) ? 0x00020000 : 0) | ((0 != 0) ? 0x00040000 : 0))
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 28)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 28)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 28)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 28)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_CET_USER_SHADOW_STACKS_RESERVED" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 28)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 32)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 32)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 32)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 32)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_USER_CET_SET_CONTEXT_IP_VALIDATION_RESERVED" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 32)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_MASK" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 36)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_DEFER" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000000UL &lt;&lt; 36)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_ALWAYS_ON" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000001UL &lt;&lt; 36)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_ALWAYS_OFF" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000002UL &lt;&lt; 36)
            </code>
                </value>
            </constant>
            <constant name="PROCESS_CREATION_MITIGATION_AUDIT_POLICY2_BLOCK_NON_CET_BINARIES_RESERVED" access="public">
                <type primitive="True">ulong</type>
                <value>
                    <code>(0x00000003UL &lt;&lt; 36)
            </code>
                </value>
            </constant>
            <constant name="GetFirmwareEnvironmentVariable" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, void*, uint, uint&gt;</type>
                <value>
                    <deref>
                        <code>GetFirmwareEnvironmentVariableW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GetFirmwareEnvironmentVariableEx" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, void*, uint, uint*, uint&gt;</type>
                <value>
                    <deref>
                        <code>GetFirmwareEnvironmentVariableExW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="SetFirmwareEnvironmentVariable" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, void*, uint, int&gt;</type>
                <value>
                    <deref>
                        <code>SetFirmwareEnvironmentVariableW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="SetFirmwareEnvironmentVariableEx" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, void*, uint, uint, int&gt;</type>
                <value>
                    <deref>
                        <code>SetFirmwareEnvironmentVariableExW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="EnumResourceTypes" access="public">
                <type primitive="False">delegate*&lt;IntPtr, delegate* unmanaged&lt;IntPtr, ushort*, nint, int&gt;, nint, int&gt;</type>
                <value>
                    <deref>
                        <code>EnumResourceTypesW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="EnumResourceLanguages" access="public">
                <type primitive="False">delegate*&lt;IntPtr, ushort*, ushort*, delegate* unmanaged&lt;IntPtr, ushort*, ushort*, ushort, nint, int&gt;, nint, int&gt;</type>
                <value>
                    <deref>
                        <code>EnumResourceLanguagesW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="BeginUpdateResource" access="public">
                <type primitive="False">delegate*&lt;ushort*, int, IntPtr&gt;</type>
                <value>
                    <deref>
                        <code>BeginUpdateResourceW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="UpdateResource" access="public">
                <type primitive="False">delegate*&lt;IntPtr, ushort*, ushort*, ushort, void*, uint, int&gt;</type>
                <value>
                    <deref>
                        <code>UpdateResourceW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="EndUpdateResource" access="public">
                <type primitive="False">delegate*&lt;IntPtr, int, int&gt;</type>
                <value>
                    <deref>
                        <code>EndUpdateResourceW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="ATOM_FLAG_GLOBAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x2
            </code>
                </value>
            </constant>
            <constant name="GlobalAddAtom" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort&gt;</type>
                <value>
                    <deref>
                        <code>GlobalAddAtomW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GlobalAddAtomEx" access="public">
                <type primitive="False">delegate*&lt;ushort*, uint, ushort&gt;</type>
                <value>
                    <deref>
                        <code>GlobalAddAtomExW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GlobalFindAtom" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort&gt;</type>
                <value>
                    <deref>
                        <code>GlobalFindAtomW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GlobalGetAtomName" access="public">
                <type primitive="False">delegate*&lt;ushort, ushort*, int, uint&gt;</type>
                <value>
                    <deref>
                        <code>GlobalGetAtomNameW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="AddAtom" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort&gt;</type>
                <value>
                    <deref>
                        <code>AddAtomW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="FindAtom" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort&gt;</type>
                <value>
                    <deref>
                        <code>FindAtomW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GetAtomName" access="public">
                <type primitive="False">delegate*&lt;ushort, ushort*, int, uint&gt;</type>
                <value>
                    <deref>
                        <code>GetAtomNameW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GetProfileInt" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, int, uint&gt;</type>
                <value>
                    <deref>
                        <code>GetProfileIntW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GetProfileString" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, ushort*, ushort*, uint, uint&gt;</type>
                <value>
                    <deref>
                        <code>GetProfileStringW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="WriteProfileString" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, ushort*, int&gt;</type>
                <value>
                    <deref>
                        <code>WriteProfileStringW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GetProfileSection" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, uint, uint&gt;</type>
                <value>
                    <deref>
                        <code>GetProfileSectionW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="WriteProfileSection" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, int&gt;</type>
                <value>
                    <deref>
                        <code>WriteProfileSectionW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GetPrivateProfileInt" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, int, ushort*, uint&gt;</type>
                <value>
                    <deref>
                        <code>GetPrivateProfileIntW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GetPrivateProfileString" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, ushort*, ushort*, uint, ushort*, uint&gt;</type>
                <value>
                    <deref>
                        <code>GetPrivateProfileStringW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="WritePrivateProfileString" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, ushort*, ushort*, int&gt;</type>
                <value>
                    <deref>
                        <code>WritePrivateProfileStringW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GetPrivateProfileSection" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, uint, ushort*, uint&gt;</type>
                <value>
                    <deref>
                        <code>GetPrivateProfileSectionW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="WritePrivateProfileSection" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, ushort*, int&gt;</type>
                <value>
                    <deref>
                        <code>WritePrivateProfileSectionW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GetPrivateProfileSectionNames" access="public">
                <type primitive="False">delegate*&lt;ushort*, uint, ushort*, uint&gt;</type>
                <value>
                    <deref>
                        <code>GetPrivateProfileSectionNamesW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GetPrivateProfileStruct" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, void*, uint, ushort*, int&gt;</type>
                <value>
                    <deref>
                        <code>GetPrivateProfileStructW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="WritePrivateProfileStruct" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, void*, uint, ushort*, int&gt;</type>
                <value>
                    <deref>
                        <code>WritePrivateProfileStructW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x57, 0x6F, 0x77, 0x36, 0x34, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x79, 0x41, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"GetSystemWow64DirectoryA"
            </code>
                </value>
            </constant>
            <constant name="GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"GetSystemWow64DirectoryA"
            </code>
                </value>
            </constant>
            <constant name="GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x57, 0x6F, 0x77, 0x36, 0x34, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x79, 0x57, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"GetSystemWow64DirectoryW"
            </code>
                </value>
            </constant>
            <constant name="GET_SYSTEM_WOW64_DIRECTORY_NAME_W_T" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"GetSystemWow64DirectoryW"
            </code>
                </value>
            </constant>
            <constant name="GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A" access="public">
                <type primitive="False">ReadOnlySpan&lt;byte&gt;</type>
                <value>
                    <code>new byte[] { 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x57, 0x6F, 0x77, 0x36, 0x34, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x79, 0x57, 0x00 }
            </code>
                </value>
            </constant>
            <constant name="GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"GetSystemWow64DirectoryW"
            </code>
                </value>
            </constant>
            <constant name="GET_SYSTEM_WOW64_DIRECTORY_NAME_T_T" access="public">
                <type primitive="True">string</type>
                <value>
                    <code>"GetSystemWow64DirectoryW"
            </code>
                </value>
            </constant>
            <constant name="SetDllDirectory" access="public">
                <type primitive="False">delegate*&lt;ushort*, int&gt;</type>
                <value>
                    <deref>
                        <code>SetDllDirectoryW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GetDllDirectory" access="public">
                <type primitive="False">delegate*&lt;uint, ushort*, uint&gt;</type>
                <value>
                    <deref>
                        <code>GetDllDirectoryW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x10000
            </code>
                </value>
            </constant>
            <constant name="BASE_SEARCH_PATH_PERMANENT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x8000
            </code>
                </value>
            </constant>
            <constant name="BASE_SEARCH_PATH_INVALID_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>~0x18001
            </code>
                </value>
            </constant>
            <constant name="CreateDirectoryEx" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, SECURITY_ATTRIBUTES*, int&gt;</type>
                <value>
                    <deref>
                        <code>CreateDirectoryExW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CreateDirectoryTransacted" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, SECURITY_ATTRIBUTES*, IntPtr, int&gt;</type>
                <value>
                    <deref>
                        <code>CreateDirectoryTransactedW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="RemoveDirectoryTransacted" access="public">
                <type primitive="False">delegate*&lt;ushort*, IntPtr, int&gt;</type>
                <value>
                    <deref>
                        <code>RemoveDirectoryTransactedW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GetFullPathNameTransacted" access="public">
                <type primitive="False">delegate*&lt;ushort*, uint, ushort*, ushort**, IntPtr, uint&gt;</type>
                <value>
                    <deref>
                        <code>GetFullPathNameTransactedW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="DDD_RAW_TARGET_PATH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="DDD_REMOVE_DEFINITION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="DDD_EXACT_MATCH_ON_REMOVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="DDD_NO_BROADCAST_SYSTEM" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="DDD_LUID_BROADCAST_DRIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="CreateFileTransacted" access="public">
                <type primitive="False">delegate*&lt;ushort*, uint, uint, SECURITY_ATTRIBUTES*, uint, uint, IntPtr, IntPtr, ushort*, void*, IntPtr&gt;</type>
                <value>
                    <deref>
                        <code>CreateFileTransactedW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="SetFileAttributesTransacted" access="public">
                <type primitive="False">delegate*&lt;ushort*, uint, IntPtr, int&gt;</type>
                <value>
                    <deref>
                        <code>SetFileAttributesTransactedW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GetFileAttributesTransacted" access="public">
                <type primitive="False">delegate*&lt;ushort*, GET_FILEEX_INFO_LEVELS, void*, IntPtr, int&gt;</type>
                <value>
                    <deref>
                        <code>GetFileAttributesTransactedW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GetCompressedFileSizeTransacted" access="public">
                <type primitive="False">delegate*&lt;ushort*, uint*, IntPtr, uint&gt;</type>
                <value>
                    <deref>
                        <code>GetCompressedFileSizeTransactedW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="DeleteFileTransacted" access="public">
                <type primitive="False">delegate*&lt;ushort*, IntPtr, int&gt;</type>
                <value>
                    <deref>
                        <code>DeleteFileTransactedW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CheckNameLegalDOS8Dot3" access="public">
                <type primitive="False">delegate*&lt;ushort*, sbyte*, uint, int*, int*, int&gt;</type>
                <value>
                    <deref>
                        <code>CheckNameLegalDOS8Dot3W
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="FindFirstFileTransacted" access="public">
                <type primitive="False">delegate*&lt;ushort*, FINDEX_INFO_LEVELS, void*, FINDEX_SEARCH_OPS, void*, uint, IntPtr, IntPtr&gt;</type>
                <value>
                    <deref>
                        <code>FindFirstFileTransactedW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CopyFile" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, int, int&gt;</type>
                <value>
                    <deref>
                        <code>CopyFileW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CopyFileEx" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, delegate* unmanaged&lt;LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, uint, uint, IntPtr, IntPtr, void*, uint&gt;, void*, int*, uint, int&gt;</type>
                <value>
                    <deref>
                        <code>CopyFileExW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CopyFileTransacted" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, delegate* unmanaged&lt;LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, uint, uint, IntPtr, IntPtr, void*, uint&gt;, void*, int*, uint, IntPtr, int&gt;</type>
                <value>
                    <deref>
                        <code>CopyFileTransactedW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="COPYFILE2_MESSAGE_COPY_OFFLOAD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="MoveFile" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, int&gt;</type>
                <value>
                    <deref>
                        <code>MoveFileW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="MoveFileEx" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, uint, int&gt;</type>
                <value>
                    <deref>
                        <code>MoveFileExW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="MoveFileWithProgress" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, delegate* unmanaged&lt;LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, uint, uint, IntPtr, IntPtr, void*, uint&gt;, void*, uint, int&gt;</type>
                <value>
                    <deref>
                        <code>MoveFileWithProgressW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="MoveFileTransacted" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, delegate* unmanaged&lt;LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, uint, uint, IntPtr, IntPtr, void*, uint&gt;, void*, uint, IntPtr, int&gt;</type>
                <value>
                    <deref>
                        <code>MoveFileTransactedW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="MOVEFILE_REPLACE_EXISTING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="MOVEFILE_COPY_ALLOWED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="MOVEFILE_DELAY_UNTIL_REBOOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="MOVEFILE_WRITE_THROUGH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="MOVEFILE_CREATE_HARDLINK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="MOVEFILE_FAIL_IF_NOT_TRACKABLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="ReplaceFile" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, ushort*, uint, void*, void*, int&gt;</type>
                <value>
                    <deref>
                        <code>ReplaceFileW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CreateHardLink" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, SECURITY_ATTRIBUTES*, int&gt;</type>
                <value>
                    <deref>
                        <code>CreateHardLinkW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CreateHardLinkTransacted" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, SECURITY_ATTRIBUTES*, IntPtr, int&gt;</type>
                <value>
                    <deref>
                        <code>CreateHardLinkTransactedW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="SetVolumeLabel" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, int&gt;</type>
                <value>
                    <deref>
                        <code>SetVolumeLabelW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="ClearEventLog" access="public">
                <type primitive="False">delegate*&lt;IntPtr, ushort*, int&gt;</type>
                <value>
                    <deref>
                        <code>ClearEventLogW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="BackupEventLog" access="public">
                <type primitive="False">delegate*&lt;IntPtr, ushort*, int&gt;</type>
                <value>
                    <deref>
                        <code>BackupEventLogW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="OpenEventLog" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, IntPtr&gt;</type>
                <value>
                    <deref>
                        <code>OpenEventLogW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="RegisterEventSource" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, IntPtr&gt;</type>
                <value>
                    <deref>
                        <code>RegisterEventSourceW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="OpenBackupEventLog" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, IntPtr&gt;</type>
                <value>
                    <deref>
                        <code>OpenBackupEventLogW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="ReadEventLog" access="public">
                <type primitive="False">delegate*&lt;IntPtr, uint, uint, void*, uint, uint*, uint*, int&gt;</type>
                <value>
                    <deref>
                        <code>ReadEventLogW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="ReportEvent" access="public">
                <type primitive="False">delegate*&lt;IntPtr, ushort, ushort, uint, void*, ushort, uint, ushort**, void*, int&gt;</type>
                <value>
                    <deref>
                        <code>ReportEventW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="EVENTLOG_FULL_INFO" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="OPERATION_API_VERSION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="OPERATION_START_TRACE_CURRENT_THREAD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="OPERATION_END_DISCARD" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x1
            </code>
                </value>
            </constant>
            <constant name="IsBadStringPtr" access="public">
                <type primitive="False">delegate*&lt;ushort*, nuint, int&gt;</type>
                <value>
                    <deref>
                        <code>IsBadStringPtrW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="LookupAccountSid" access="public">
                <type primitive="False">delegate*&lt;ushort*, void*, ushort*, uint*, ushort*, uint*, SID_NAME_USE*, int&gt;</type>
                <value>
                    <deref>
                        <code>LookupAccountSidW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="LookupAccountName" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, void*, uint*, ushort*, uint*, SID_NAME_USE*, int&gt;</type>
                <value>
                    <deref>
                        <code>LookupAccountNameW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="LookupAccountNameLocal" access="public">
                <type primitive="False">delegate*&lt;ushort*, void*, uint*, ushort*, uint*, SID_NAME_USE*, int&gt;</type>
                <value>
                    <deref>
                        <code>LookupAccountNameLocalW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="LookupAccountSidLocal" access="public">
                <type primitive="False">delegate*&lt;void*, ushort*, uint*, ushort*, uint*, SID_NAME_USE*, int&gt;</type>
                <value>
                    <deref>
                        <code>LookupAccountSidLocalW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="LookupPrivilegeValue" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, LUID*, int&gt;</type>
                <value>
                    <deref>
                        <code>LookupPrivilegeValueW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="LookupPrivilegeName" access="public">
                <type primitive="False">delegate*&lt;ushort*, LUID*, ushort*, uint*, int&gt;</type>
                <value>
                    <deref>
                        <code>LookupPrivilegeNameW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="LookupPrivilegeDisplayName" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, ushort*, uint*, uint*, int&gt;</type>
                <value>
                    <deref>
                        <code>LookupPrivilegeDisplayNameW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="BuildCommDCB" access="public">
                <type primitive="False">delegate*&lt;ushort*, DCB*, int&gt;</type>
                <value>
                    <deref>
                        <code>BuildCommDCBW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="BuildCommDCBAndTimeouts" access="public">
                <type primitive="False">delegate*&lt;ushort*, DCB*, COMMTIMEOUTS*, int&gt;</type>
                <value>
                    <deref>
                        <code>BuildCommDCBAndTimeoutsW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CommConfigDialog" access="public">
                <type primitive="False">delegate*&lt;ushort*, IntPtr, COMMCONFIG*, int&gt;</type>
                <value>
                    <deref>
                        <code>CommConfigDialogW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GetDefaultCommConfig" access="public">
                <type primitive="False">delegate*&lt;ushort*, COMMCONFIG*, uint*, int&gt;</type>
                <value>
                    <deref>
                        <code>GetDefaultCommConfigW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="SetDefaultCommConfig" access="public">
                <type primitive="False">delegate*&lt;ushort*, COMMCONFIG*, uint, int&gt;</type>
                <value>
                    <deref>
                        <code>SetDefaultCommConfigW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="MAX_COMPUTERNAME_LENGTH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>15
            </code>
                </value>
            </constant>
            <constant name="GetComputerName" access="public">
                <type primitive="False">delegate*&lt;ushort*, uint*, int&gt;</type>
                <value>
                    <deref>
                        <code>GetComputerNameW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="DnsHostnameToComputerName" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, uint*, int&gt;</type>
                <value>
                    <deref>
                        <code>DnsHostnameToComputerNameW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="GetUserName" access="public">
                <type primitive="False">delegate*&lt;ushort*, uint*, int&gt;</type>
                <value>
                    <deref>
                        <code>GetUserNameW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="LOGON32_LOGON_INTERACTIVE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="LOGON32_LOGON_NETWORK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="LOGON32_LOGON_BATCH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="LOGON32_LOGON_SERVICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5
            </code>
                </value>
            </constant>
            <constant name="LOGON32_LOGON_UNLOCK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>7
            </code>
                </value>
            </constant>
            <constant name="LOGON32_LOGON_NETWORK_CLEARTEXT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="LOGON32_LOGON_NEW_CREDENTIALS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>9
            </code>
                </value>
            </constant>
            <constant name="LOGON32_PROVIDER_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="LOGON32_PROVIDER_WINNT35" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="LOGON32_PROVIDER_WINNT40" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="LOGON32_PROVIDER_WINNT50" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="LOGON32_PROVIDER_VIRTUAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="LogonUser" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, ushort*, uint, uint, IntPtr*, int&gt;</type>
                <value>
                    <deref>
                        <code>LogonUserW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="LogonUserEx" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, ushort*, uint, uint, IntPtr*, void**, void**, uint*, QUOTA_LIMITS*, int&gt;</type>
                <value>
                    <deref>
                        <code>LogonUserExW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="LOGON_WITH_PROFILE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="LOGON_NETCREDENTIALS_ONLY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="LOGON_ZERO_PASSWORD_BUFFER" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0x80000000
            </code>
                </value>
            </constant>
            <constant name="CreatePrivateNamespace" access="public">
                <type primitive="False">delegate*&lt;SECURITY_ATTRIBUTES*, void*, ushort*, IntPtr&gt;</type>
                <value>
                    <deref>
                        <code>CreatePrivateNamespaceW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="OpenPrivateNamespace" access="public">
                <type primitive="False">delegate*&lt;void*, ushort*, IntPtr&gt;</type>
                <value>
                    <deref>
                        <code>OpenPrivateNamespaceW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CreateBoundaryDescriptor" access="public">
                <type primitive="False">delegate*&lt;ushort*, uint, IntPtr&gt;</type>
                <value>
                    <deref>
                        <code>CreateBoundaryDescriptorW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="HW_PROFILE_GUIDLEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>39
            </code>
                </value>
            </constant>
            <constant name="MAX_PROFILE_LEN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>80
            </code>
                </value>
            </constant>
            <constant name="DOCKINFO_UNDOCKED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x1)
            </code>
                </value>
            </constant>
            <constant name="DOCKINFO_DOCKED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x2)
            </code>
                </value>
            </constant>
            <constant name="DOCKINFO_USER_SUPPLIED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x4)
            </code>
                </value>
            </constant>
            <constant name="DOCKINFO_USER_UNDOCKED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((0x4) | (0x1))
            </code>
                </value>
            </constant>
            <constant name="DOCKINFO_USER_DOCKED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>((0x4) | (0x2))
            </code>
                </value>
            </constant>
            <constant name="GetCurrentHwProfile" access="public">
                <type primitive="False">delegate*&lt;HW_PROFILE_INFOW*, int&gt;</type>
                <value>
                    <deref>
                        <code>GetCurrentHwProfileW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="VerifyVersionInfo" access="public">
                <type primitive="False">delegate*&lt;OSVERSIONINFOEXW*, uint, ulong, int&gt;</type>
                <value>
                    <deref>
                        <code>VerifyVersionInfoW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="TC_NORMAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
            <constant name="TC_HARDERR" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="TC_GP_TRAP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="TC_SIGNAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>3
            </code>
                </value>
            </constant>
            <constant name="AC_LINE_OFFLINE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00
            </code>
                </value>
            </constant>
            <constant name="AC_LINE_ONLINE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="AC_LINE_BACKUP_POWER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="AC_LINE_UNKNOWN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xFF
            </code>
                </value>
            </constant>
            <constant name="BATTERY_FLAG_HIGH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="BATTERY_FLAG_LOW" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x02
            </code>
                </value>
            </constant>
            <constant name="BATTERY_FLAG_CRITICAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x04
            </code>
                </value>
            </constant>
            <constant name="BATTERY_FLAG_CHARGING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x08
            </code>
                </value>
            </constant>
            <constant name="BATTERY_FLAG_NO_BATTERY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x80
            </code>
                </value>
            </constant>
            <constant name="BATTERY_FLAG_UNKNOWN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xFF
            </code>
                </value>
            </constant>
            <constant name="BATTERY_PERCENTAGE_UNKNOWN" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0xFF
            </code>
                </value>
            </constant>
            <constant name="SYSTEM_STATUS_FLAG_POWER_SAVING_ON" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x01
            </code>
                </value>
            </constant>
            <constant name="BATTERY_LIFE_UNKNOWN" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>0xFFFFFFFF
            </code>
                </value>
            </constant>
            <constant name="CreateJobObject" access="public">
                <type primitive="False">delegate*&lt;SECURITY_ATTRIBUTES*, ushort*, IntPtr&gt;</type>
                <value>
                    <deref>
                        <code>CreateJobObjectW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="OpenJobObject" access="public">
                <type primitive="False">delegate*&lt;uint, int, ushort*, IntPtr&gt;</type>
                <value>
                    <deref>
                        <code>OpenJobObjectW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="FindFirstVolumeMountPoint" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, uint, IntPtr&gt;</type>
                <value>
                    <deref>
                        <code>FindFirstVolumeMountPointW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="FindNextVolumeMountPoint" access="public">
                <type primitive="False">delegate*&lt;IntPtr, ushort*, uint, int&gt;</type>
                <value>
                    <deref>
                        <code>FindNextVolumeMountPointW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="SetVolumeMountPoint" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, int&gt;</type>
                <value>
                    <deref>
                        <code>SetVolumeMountPointW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="ACTCTX_FLAG_LANGID_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000004)
            </code>
                </value>
            </constant>
            <constant name="ACTCTX_FLAG_RESOURCE_NAME_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000008)
            </code>
                </value>
            </constant>
            <constant name="ACTCTX_FLAG_SET_PROCESS_DEFAULT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000010)
            </code>
                </value>
            </constant>
            <constant name="ACTCTX_FLAG_APPLICATION_NAME_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000020)
            </code>
                </value>
            </constant>
            <constant name="ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000040)
            </code>
                </value>
            </constant>
            <constant name="ACTCTX_FLAG_HMODULE_VALID" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000080)
            </code>
                </value>
            </constant>
            <constant name="CreateActCtx" access="public">
                <type primitive="False">delegate*&lt;ACTCTXW*, IntPtr&gt;</type>
                <value>
                    <deref>
                        <code>CreateActCtxW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000001)
            </code>
                </value>
            </constant>
            <constant name="FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000002)
            </code>
                </value>
            </constant>
            <constant name="FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000004)
            </code>
                </value>
            </constant>
            <constant name="FindActCtxSectionString" access="public">
                <type primitive="False">delegate*&lt;uint, Guid*, uint, ushort*, ACTCTX_SECTION_KEYED_DATA*, int&gt;</type>
                <value>
                    <deref>
                        <code>FindActCtxSectionStringW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000004)
            </code>
                </value>
            </constant>
            <constant name="QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000008)
            </code>
                </value>
            </constant>
            <constant name="QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x00000010)
            </code>
                </value>
            </constant>
            <constant name="QUERY_ACTCTX_FLAG_NO_ADDREF" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0x80000000)
            </code>
                </value>
            </constant>
            <constant name="RESTART_MAX_CMD_LINE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1024
            </code>
                </value>
            </constant>
            <constant name="RESTART_NO_CRASH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>1
            </code>
                </value>
            </constant>
            <constant name="RESTART_NO_HANG" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>2
            </code>
                </value>
            </constant>
            <constant name="RESTART_NO_PATCH" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>4
            </code>
                </value>
            </constant>
            <constant name="RESTART_NO_REBOOT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>8
            </code>
                </value>
            </constant>
            <constant name="RECOVERY_DEFAULT_PING_INTERVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>5000
            </code>
                </value>
            </constant>
            <constant name="RECOVERY_MAX_PING_INTERVAL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(5 * 60 * 1000)
            </code>
                </value>
            </constant>
            <constant name="FILE_RENAME_FLAG_REPLACE_IF_EXISTS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="FILE_RENAME_FLAG_POSIX_SEMANTICS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="FILE_RENAME_FLAG_SUPPRESS_PIN_STATE_INHERITANCE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="FILE_DISPOSITION_FLAG_DO_NOT_DELETE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000000
            </code>
                </value>
            </constant>
            <constant name="FILE_DISPOSITION_FLAG_DELETE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="FILE_DISPOSITION_FLAG_POSIX_SEMANTICS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="FILE_DISPOSITION_FLAG_FORCE_IMAGE_SECTION_CHECK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="FILE_DISPOSITION_FLAG_ON_CLOSE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="FILE_DISPOSITION_FLAG_IGNORE_READONLY_ATTRIBUTE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="STORAGE_INFO_FLAGS_ALIGNED_DEVICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="STORAGE_INFO_FLAGS_PARTITION_ALIGNED_ON_DEVICE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="STORAGE_INFO_OFFSET_UNKNOWN" access="public">
                <type primitive="True">uint</type>
                <value>
                    <code>(0xffffffff)
            </code>
                </value>
            </constant>
            <constant name="REMOTE_PROTOCOL_INFO_FLAG_LOOPBACK" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="REMOTE_PROTOCOL_INFO_FLAG_OFFLINE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="REMOTE_PROTOCOL_INFO_FLAG_PERSISTENT_HANDLE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="RPI_FLAG_SMB2_SHARECAP_TIMEWARP" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="RPI_FLAG_SMB2_SHARECAP_DFS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="RPI_FLAG_SMB2_SHARECAP_CONTINUOUS_AVAILABILITY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="RPI_FLAG_SMB2_SHARECAP_SCALEOUT" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="RPI_FLAG_SMB2_SHARECAP_CLUSTER" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000040
            </code>
                </value>
            </constant>
            <constant name="RPI_SMB2_FLAG_SERVERCAP_DFS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000001
            </code>
                </value>
            </constant>
            <constant name="RPI_SMB2_FLAG_SERVERCAP_LEASING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000002
            </code>
                </value>
            </constant>
            <constant name="RPI_SMB2_FLAG_SERVERCAP_LARGEMTU" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000004
            </code>
                </value>
            </constant>
            <constant name="RPI_SMB2_FLAG_SERVERCAP_MULTICHANNEL" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000008
            </code>
                </value>
            </constant>
            <constant name="RPI_SMB2_FLAG_SERVERCAP_PERSISTENT_HANDLES" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000010
            </code>
                </value>
            </constant>
            <constant name="RPI_SMB2_FLAG_SERVERCAP_DIRECTORY_LEASING" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0x00000020
            </code>
                </value>
            </constant>
            <constant name="SYMBOLIC_LINK_FLAG_DIRECTORY" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x1)
            </code>
                </value>
            </constant>
            <constant name="SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>(0x2)
            </code>
                </value>
            </constant>
            <constant name="CreateSymbolicLink" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, uint, byte&gt;</type>
                <value>
                    <deref>
                        <code>CreateSymbolicLinkW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="CreateSymbolicLinkTransacted" access="public">
                <type primitive="False">delegate*&lt;ushort*, ushort*, uint, IntPtr, byte&gt;</type>
                <value>
                    <deref>
                        <code>CreateSymbolicLinkTransactedW
            </code>
                    </deref>
                </value>
            </constant>
            <constant name="MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS" access="public">
                <type primitive="True">int</type>
                <value>
                    <code>0
            </code>
                </value>
            </constant>
        </class>
    </namespace>
</bindings>
