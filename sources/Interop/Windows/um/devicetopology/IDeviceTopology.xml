<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/devicetopology.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDeviceTopology" access="public" native="struct IDeviceTopology : IUnknown" uuid="2a07407e-6497-4a18-9787-32f79bd0d98f" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDeviceTopology*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDeviceTopology*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDeviceTopology*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDeviceTopology*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDeviceTopology*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDeviceTopology*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetConnectorCount" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pCount">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDeviceTopology*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDeviceTopology*)Unsafe.AsPointer(ref this)</param>, <param name="pCount">pCount</param>);
        </code>
                </body>
            </function>
            <function name="GetConnector" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="nIndex">
                    <type>uint</type>
                </param>
                <param name="ppConnector">
                    <type>IConnector**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDeviceTopology*, uint, IConnector**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDeviceTopology*)Unsafe.AsPointer(ref this)</param>, <param name="nIndex">nIndex</param>, <param name="ppConnector">ppConnector</param>);
        </code>
                </body>
            </function>
            <function name="GetSubunitCount" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pCount">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDeviceTopology*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDeviceTopology*)Unsafe.AsPointer(ref this)</param>, <param name="pCount">pCount</param>);
        </code>
                </body>
            </function>
            <function name="GetSubunit" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="nIndex">
                    <type>uint</type>
                </param>
                <param name="ppSubunit">
                    <type>ISubunit**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDeviceTopology*, uint, ISubunit**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDeviceTopology*)Unsafe.AsPointer(ref this)</param>, <param name="nIndex">nIndex</param>, <param name="ppSubunit">ppSubunit</param>);
        </code>
                </body>
            </function>
            <function name="GetPartById" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="nId">
                    <type>uint</type>
                </param>
                <param name="ppPart">
                    <type>IPart**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDeviceTopology*, uint, IPart**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDeviceTopology*)Unsafe.AsPointer(ref this)</param>, <param name="nId">nId</param>, <param name="ppPart">ppPart</param>);
        </code>
                </body>
            </function>
            <function name="GetDeviceId" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppwstrDeviceId">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDeviceTopology*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDeviceTopology*)Unsafe.AsPointer(ref this)</param>, <param name="ppwstrDeviceId">ppwstrDeviceId</param>);
        </code>
                </body>
            </function>
            <function name="GetSignalPath" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pIPartFrom">
                    <type>IPart*</type>
                </param>
                <param name="pIPartTo">
                    <type>IPart*</type>
                </param>
                <param name="bRejectMixedPaths">
                    <type>int</type>
                </param>
                <param name="ppParts">
                    <type>IPartsList**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDeviceTopology*, IPart*, IPart*, int, IPartsList**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IDeviceTopology*)Unsafe.AsPointer(ref this)</param>, <param name="pIPartFrom">pIPartFrom</param>, <param name="pIPartTo">pIPartTo</param>, <param name="bRejectMixedPaths">bRejectMixedPaths</param>, <param name="ppParts">ppParts</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
