<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/devicetopology.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IConnector" access="public" native="struct IConnector : IUnknown" uuid="9c2c4058-23f5-41de-877a-df3af236a09e" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IConnector*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IConnector*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IConnector*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IConnector*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IConnector*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IConnector*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pType">
                    <type>ConnectorType*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IConnector*, ConnectorType*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IConnector*)Unsafe.AsPointer(ref this)</param>, <param name="pType">pType</param>);
        </code>
                </body>
            </function>
            <function name="GetDataFlow" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pFlow">
                    <type>DataFlow*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IConnector*, DataFlow*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IConnector*)Unsafe.AsPointer(ref this)</param>, <param name="pFlow">pFlow</param>);
        </code>
                </body>
            </function>
            <function name="ConnectTo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pConnectTo">
                    <type>IConnector*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IConnector*, IConnector*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IConnector*)Unsafe.AsPointer(ref this)</param>, <param name="pConnectTo">pConnectTo</param>);
        </code>
                </body>
            </function>
            <function name="Disconnect" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IConnector*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IConnector*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="IsConnected" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pbConnected">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IConnector*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IConnector*)Unsafe.AsPointer(ref this)</param>, <param name="pbConnected">pbConnected</param>);
        </code>
                </body>
            </function>
            <function name="GetConnectedTo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppConTo">
                    <type>IConnector**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IConnector*, IConnector**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IConnector*)Unsafe.AsPointer(ref this)</param>, <param name="ppConTo">ppConTo</param>);
        </code>
                </body>
            </function>
            <function name="GetConnectorIdConnectedTo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppwstrConnectorId">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IConnector*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IConnector*)Unsafe.AsPointer(ref this)</param>, <param name="ppwstrConnectorId">ppwstrConnectorId</param>);
        </code>
                </body>
            </function>
            <function name="GetDeviceIdConnectedTo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppwstrDeviceId">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IConnector*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IConnector*)Unsafe.AsPointer(ref this)</param>, <param name="ppwstrDeviceId">ppwstrDeviceId</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
