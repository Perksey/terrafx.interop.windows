<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/directmanipulation.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDirectManipulationManager" access="public" native="struct IDirectManipulationManager : IUnknown" uuid="fbf5d3b4-70c7-4163-9322-5a6f660d6fbc" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationManager*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDirectManipulationManager*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationManager*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDirectManipulationManager*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationManager*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDirectManipulationManager*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Activate" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="window">
                    <type>IntPtr</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationManager*, IntPtr, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDirectManipulationManager*)Unsafe.AsPointer(ref this)</param>, <param name="window">window</param>);
        </code>
                </body>
            </function>
            <function name="Deactivate" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="window">
                    <type>IntPtr</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationManager*, IntPtr, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDirectManipulationManager*)Unsafe.AsPointer(ref this)</param>, <param name="window">window</param>);
        </code>
                </body>
            </function>
            <function name="RegisterHitTestTarget" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="window">
                    <type>IntPtr</type>
                </param>
                <param name="hitTestWindow">
                    <type>IntPtr</type>
                </param>
                <param name="type">
                    <type>DIRECTMANIPULATION_HITTEST_TYPE</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationManager*, IntPtr, IntPtr, DIRECTMANIPULATION_HITTEST_TYPE, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDirectManipulationManager*)Unsafe.AsPointer(ref this)</param>, <param name="window">window</param>, <param name="hitTestWindow">hitTestWindow</param>, <param name="type">type</param>);
        </code>
                </body>
            </function>
            <function name="ProcessInput" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="message">
                    <type>MSG*</type>
                </param>
                <param name="handled">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationManager*, MSG*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDirectManipulationManager*)Unsafe.AsPointer(ref this)</param>, <param name="message">message</param>, <param name="handled">handled</param>);
        </code>
                </body>
            </function>
            <function name="GetUpdateManager" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="@object">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationManager*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDirectManipulationManager*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="@object">@object</param>);
        </code>
                </body>
            </function>
            <function name="CreateViewport" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="frameInfo">
                    <type>IDirectManipulationFrameInfoProvider*</type>
                </param>
                <param name="window">
                    <type>IntPtr</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="@object">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationManager*, IDirectManipulationFrameInfoProvider*, IntPtr, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDirectManipulationManager*)Unsafe.AsPointer(ref this)</param>, <param name="frameInfo">frameInfo</param>, <param name="window">window</param>, <param name="riid">riid</param>, <param name="@object">@object</param>);
        </code>
                </body>
            </function>
            <function name="CreateContent" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="frameInfo">
                    <type>IDirectManipulationFrameInfoProvider*</type>
                </param>
                <param name="clsid">
                    <type>Guid*</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="@object">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationManager*, IDirectManipulationFrameInfoProvider*, Guid*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IDirectManipulationManager*)Unsafe.AsPointer(ref this)</param>, <param name="frameInfo">frameInfo</param>, <param name="clsid">clsid</param>, <param name="riid">riid</param>, <param name="@object">@object</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
