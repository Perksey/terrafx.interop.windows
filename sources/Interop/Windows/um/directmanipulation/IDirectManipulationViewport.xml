<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/directmanipulation.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDirectManipulationViewport" access="public" native="struct IDirectManipulationViewport : IUnknown" uuid="28b85a3d-60a0-48bd-9ba1-5ce8d9ea3a6d" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Enable" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Disable" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetContact" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pointerId">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="pointerId">pointerId</param>);
        </code>
                </body>
            </function>
            <function name="ReleaseContact" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pointerId">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="pointerId">pointerId</param>);
        </code>
                </body>
            </function>
            <function name="ReleaseAllContacts" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetStatus" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="status">
                    <type>DIRECTMANIPULATION_STATUS*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, DIRECTMANIPULATION_STATUS*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="status">status</param>);
        </code>
                </body>
            </function>
            <function name="GetTag" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="@object">
                    <type>void**</type>
                </param>
                <param name="id">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, Guid*, void**, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="@object">@object</param>, <param name="id">id</param>);
        </code>
                </body>
            </function>
            <function name="SetTag" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="@object">
                    <type>IUnknown*</type>
                </param>
                <param name="id">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, IUnknown*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="@object">@object</param>, <param name="id">id</param>);
        </code>
                </body>
            </function>
            <function name="GetViewportRect" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="viewport">
                    <type>RECT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, RECT*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="viewport">viewport</param>);
        </code>
                </body>
            </function>
            <function name="SetViewportRect" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="viewport">
                    <type>RECT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, RECT*, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="viewport">viewport</param>);
        </code>
                </body>
            </function>
            <function name="ZoomToRect" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="left">
                    <type>float</type>
                </param>
                <param name="top">
                    <type>float</type>
                </param>
                <param name="right">
                    <type>float</type>
                </param>
                <param name="bottom">
                    <type>float</type>
                </param>
                <param name="animate">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, float, float, float, float, int, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="left">left</param>, <param name="top">top</param>, <param name="right">right</param>, <param name="bottom">bottom</param>, <param name="animate">animate</param>);
        </code>
                </body>
            </function>
            <function name="SetViewportTransform" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="matrix">
                    <type>float*</type>
                </param>
                <param name="pointCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, float*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="matrix">matrix</param>, <param name="pointCount">pointCount</param>);
        </code>
                </body>
            </function>
            <function name="SyncDisplayTransform" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="matrix">
                    <type>float*</type>
                </param>
                <param name="pointCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, float*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="matrix">matrix</param>, <param name="pointCount">pointCount</param>);
        </code>
                </body>
            </function>
            <function name="GetPrimaryContent" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="@object">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="@object">@object</param>);
        </code>
                </body>
            </function>
            <function name="AddContent" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="content">
                    <type>IDirectManipulationContent*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, IDirectManipulationContent*, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="content">content</param>);
        </code>
                </body>
            </function>
            <function name="RemoveContent" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="content">
                    <type>IDirectManipulationContent*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, IDirectManipulationContent*, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="content">content</param>);
        </code>
                </body>
            </function>
            <function name="SetViewportOptions" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="options">
                    <type>DIRECTMANIPULATION_VIEWPORT_OPTIONS</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, DIRECTMANIPULATION_VIEWPORT_OPTIONS, int&gt;)(lpVtbl[<vtbl explicit="False">19</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="options">options</param>);
        </code>
                </body>
            </function>
            <function name="AddConfiguration" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="configuration">
                    <type>DIRECTMANIPULATION_CONFIGURATION</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, DIRECTMANIPULATION_CONFIGURATION, int&gt;)(lpVtbl[<vtbl explicit="False">20</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="configuration">configuration</param>);
        </code>
                </body>
            </function>
            <function name="RemoveConfiguration" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="configuration">
                    <type>DIRECTMANIPULATION_CONFIGURATION</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, DIRECTMANIPULATION_CONFIGURATION, int&gt;)(lpVtbl[<vtbl explicit="False">21</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="configuration">configuration</param>);
        </code>
                </body>
            </function>
            <function name="ActivateConfiguration" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="configuration">
                    <type>DIRECTMANIPULATION_CONFIGURATION</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, DIRECTMANIPULATION_CONFIGURATION, int&gt;)(lpVtbl[<vtbl explicit="False">22</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="configuration">configuration</param>);
        </code>
                </body>
            </function>
            <function name="SetManualGesture" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="configuration">
                    <type>DIRECTMANIPULATION_GESTURE_CONFIGURATION</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, DIRECTMANIPULATION_GESTURE_CONFIGURATION, int&gt;)(lpVtbl[<vtbl explicit="False">23</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="configuration">configuration</param>);
        </code>
                </body>
            </function>
            <function name="SetChaining" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="enabledTypes">
                    <type>DIRECTMANIPULATION_MOTION_TYPES</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, DIRECTMANIPULATION_MOTION_TYPES, int&gt;)(lpVtbl[<vtbl explicit="False">24</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="enabledTypes">enabledTypes</param>);
        </code>
                </body>
            </function>
            <function name="AddEventHandler" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="window">
                    <type>IntPtr</type>
                </param>
                <param name="eventHandler">
                    <type>IDirectManipulationViewportEventHandler*</type>
                </param>
                <param name="cookie">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, IntPtr, IDirectManipulationViewportEventHandler*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">25</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="window">window</param>, <param name="eventHandler">eventHandler</param>, <param name="cookie">cookie</param>);
        </code>
                </body>
            </function>
            <function name="RemoveEventHandler" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="cookie">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">26</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="cookie">cookie</param>);
        </code>
                </body>
            </function>
            <function name="SetInputMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="mode">
                    <type>DIRECTMANIPULATION_INPUT_MODE</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, DIRECTMANIPULATION_INPUT_MODE, int&gt;)(lpVtbl[<vtbl explicit="False">27</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="mode">mode</param>);
        </code>
                </body>
            </function>
            <function name="SetUpdateMode" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="mode">
                    <type>DIRECTMANIPULATION_INPUT_MODE</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, DIRECTMANIPULATION_INPUT_MODE, int&gt;)(lpVtbl[<vtbl explicit="False">28</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>, <param name="mode">mode</param>);
        </code>
                </body>
            </function>
            <function name="Stop" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, int&gt;)(lpVtbl[<vtbl explicit="False">29</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Abandon" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationViewport*, int&gt;)(lpVtbl[<vtbl explicit="False">30</vtbl>]))(<param special="thisPtr">(IDirectManipulationViewport*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
