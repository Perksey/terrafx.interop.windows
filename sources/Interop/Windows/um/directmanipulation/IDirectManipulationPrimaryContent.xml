<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/directmanipulation.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IDirectManipulationPrimaryContent" access="public" native="struct IDirectManipulationPrimaryContent : IUnknown" uuid="c12851e4-1698-4625-b9b1-7ca3ec18630b" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationPrimaryContent*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IDirectManipulationPrimaryContent*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationPrimaryContent*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IDirectManipulationPrimaryContent*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationPrimaryContent*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IDirectManipulationPrimaryContent*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetSnapInterval" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="motion">
                    <type>DIRECTMANIPULATION_MOTION_TYPES</type>
                </param>
                <param name="interval">
                    <type>float</type>
                </param>
                <param name="offset">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationPrimaryContent*, DIRECTMANIPULATION_MOTION_TYPES, float, float, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IDirectManipulationPrimaryContent*)Unsafe.AsPointer(ref this)</param>, <param name="motion">motion</param>, <param name="interval">interval</param>, <param name="offset">offset</param>);
        </code>
                </body>
            </function>
            <function name="SetSnapPoints" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="motion">
                    <type>DIRECTMANIPULATION_MOTION_TYPES</type>
                </param>
                <param name="points">
                    <type>float*</type>
                </param>
                <param name="pointCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationPrimaryContent*, DIRECTMANIPULATION_MOTION_TYPES, float*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IDirectManipulationPrimaryContent*)Unsafe.AsPointer(ref this)</param>, <param name="motion">motion</param>, <param name="points">points</param>, <param name="pointCount">pointCount</param>);
        </code>
                </body>
            </function>
            <function name="SetSnapType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="motion">
                    <type>DIRECTMANIPULATION_MOTION_TYPES</type>
                </param>
                <param name="type">
                    <type>DIRECTMANIPULATION_SNAPPOINT_TYPE</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationPrimaryContent*, DIRECTMANIPULATION_MOTION_TYPES, DIRECTMANIPULATION_SNAPPOINT_TYPE, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IDirectManipulationPrimaryContent*)Unsafe.AsPointer(ref this)</param>, <param name="motion">motion</param>, <param name="type">type</param>);
        </code>
                </body>
            </function>
            <function name="SetSnapCoordinate" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="motion">
                    <type>DIRECTMANIPULATION_MOTION_TYPES</type>
                </param>
                <param name="coordinate">
                    <type>DIRECTMANIPULATION_SNAPPOINT_COORDINATE</type>
                </param>
                <param name="origin">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationPrimaryContent*, DIRECTMANIPULATION_MOTION_TYPES, DIRECTMANIPULATION_SNAPPOINT_COORDINATE, float, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IDirectManipulationPrimaryContent*)Unsafe.AsPointer(ref this)</param>, <param name="motion">motion</param>, <param name="coordinate">coordinate</param>, <param name="origin">origin</param>);
        </code>
                </body>
            </function>
            <function name="SetZoomBoundaries" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="zoomMinimum">
                    <type>float</type>
                </param>
                <param name="zoomMaximum">
                    <type>float</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationPrimaryContent*, float, float, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IDirectManipulationPrimaryContent*)Unsafe.AsPointer(ref this)</param>, <param name="zoomMinimum">zoomMinimum</param>, <param name="zoomMaximum">zoomMaximum</param>);
        </code>
                </body>
            </function>
            <function name="SetHorizontalAlignment" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="alignment">
                    <type>DIRECTMANIPULATION_HORIZONTALALIGNMENT</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationPrimaryContent*, DIRECTMANIPULATION_HORIZONTALALIGNMENT, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IDirectManipulationPrimaryContent*)Unsafe.AsPointer(ref this)</param>, <param name="alignment">alignment</param>);
        </code>
                </body>
            </function>
            <function name="SetVerticalAlignment" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="alignment">
                    <type>DIRECTMANIPULATION_VERTICALALIGNMENT</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationPrimaryContent*, DIRECTMANIPULATION_VERTICALALIGNMENT, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IDirectManipulationPrimaryContent*)Unsafe.AsPointer(ref this)</param>, <param name="alignment">alignment</param>);
        </code>
                </body>
            </function>
            <function name="GetInertiaEndTransform" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="matrix">
                    <type>float*</type>
                </param>
                <param name="pointCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationPrimaryContent*, float*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IDirectManipulationPrimaryContent*)Unsafe.AsPointer(ref this)</param>, <param name="matrix">matrix</param>, <param name="pointCount">pointCount</param>);
        </code>
                </body>
            </function>
            <function name="GetCenterPoint" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="centerX">
                    <type>float*</type>
                </param>
                <param name="centerY">
                    <type>float*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IDirectManipulationPrimaryContent*, float*, float*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IDirectManipulationPrimaryContent*)Unsafe.AsPointer(ref this)</param>, <param name="centerX">centerX</param>, <param name="centerY">centerY</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
