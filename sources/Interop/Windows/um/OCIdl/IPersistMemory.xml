<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/OCIdl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IPersistMemory" access="public" native="struct IPersistMemory : IPersist" uuid="bd1ae5e0-a6ae-11ce-bd37-504200c10000" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IPersistMemory*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IPersistMemory*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IPersistMemory*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IPersistMemory*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IPersistMemory*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IPersistMemory*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetClassID" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pClassID">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IPersistMemory*, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IPersistMemory*)Unsafe.AsPointer(ref this)</param>, <param name="pClassID">pClassID</param>);
        </code>
                </body>
            </function>
            <function name="IsDirty" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IPersistMemory*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IPersistMemory*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Load" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pMem">
                    <type>void*</type>
                </param>
                <param name="cbSize">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IPersistMemory*, void*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IPersistMemory*)Unsafe.AsPointer(ref this)</param>, <param name="pMem">pMem</param>, <param name="cbSize">cbSize</param>);
        </code>
                </body>
            </function>
            <function name="Save" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pMem">
                    <type>void*</type>
                </param>
                <param name="fClearDirty">
                    <type>int</type>
                </param>
                <param name="cbSize">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IPersistMemory*, void*, int, uint, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IPersistMemory*)Unsafe.AsPointer(ref this)</param>, <param name="pMem">pMem</param>, <param name="fClearDirty">fClearDirty</param>, <param name="cbSize">cbSize</param>);
        </code>
                </body>
            </function>
            <function name="GetSizeMax" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pCbSize">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IPersistMemory*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IPersistMemory*)Unsafe.AsPointer(ref this)</param>, <param name="pCbSize">pCbSize</param>);
        </code>
                </body>
            </function>
            <function name="InitNew" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IPersistMemory*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IPersistMemory*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
