<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/OCIdl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IFont" access="public" native="struct IFont : IUnknown" uuid="bef6e002-a874-101a-8bba-00aa00300cab" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="get_Name" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pName">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="pName">pName</param>);
        </code>
                </body>
            </function>
            <function name="put_Name" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="name">
                    <type>ushort*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, ushort*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="name">name</param>);
        </code>
                </body>
            </function>
            <function name="get_Size" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pSize">
                    <type>CY*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, CY*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="pSize">pSize</param>);
        </code>
                </body>
            </function>
            <function name="put_Size" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="size">
                    <type>CY</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, CY, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="size">size</param>);
        </code>
                </body>
            </function>
            <function name="get_Bold" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pBold">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="pBold">pBold</param>);
        </code>
                </body>
            </function>
            <function name="put_Bold" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="bold">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, int, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="bold">bold</param>);
        </code>
                </body>
            </function>
            <function name="get_Italic" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pItalic">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="pItalic">pItalic</param>);
        </code>
                </body>
            </function>
            <function name="put_Italic" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="italic">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, int, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="italic">italic</param>);
        </code>
                </body>
            </function>
            <function name="get_Underline" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pUnderline">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="pUnderline">pUnderline</param>);
        </code>
                </body>
            </function>
            <function name="put_Underline" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="underline">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, int, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="underline">underline</param>);
        </code>
                </body>
            </function>
            <function name="get_Strikethrough" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pStrikethrough">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="pStrikethrough">pStrikethrough</param>);
        </code>
                </body>
            </function>
            <function name="put_Strikethrough" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="strikethrough">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, int, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="strikethrough">strikethrough</param>);
        </code>
                </body>
            </function>
            <function name="get_Weight" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pWeight">
                    <type>short*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, short*, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="pWeight">pWeight</param>);
        </code>
                </body>
            </function>
            <function name="put_Weight" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="weight">
                    <type>short</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, short, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="weight">weight</param>);
        </code>
                </body>
            </function>
            <function name="get_Charset" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pCharset">
                    <type>short*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, short*, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="pCharset">pCharset</param>);
        </code>
                </body>
            </function>
            <function name="put_Charset" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="charset">
                    <type>short</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, short, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="charset">charset</param>);
        </code>
                </body>
            </function>
            <function name="get_hFont" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="phFont">
                    <type>IntPtr*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, IntPtr*, int&gt;)(lpVtbl[<vtbl explicit="False">19</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="phFont">phFont</param>);
        </code>
                </body>
            </function>
            <function name="Clone" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppFont">
                    <type>IFont**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, IFont**, int&gt;)(lpVtbl[<vtbl explicit="False">20</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="ppFont">ppFont</param>);
        </code>
                </body>
            </function>
            <function name="IsEqual" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pFontOther">
                    <type>IFont*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, IFont*, int&gt;)(lpVtbl[<vtbl explicit="False">21</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="pFontOther">pFontOther</param>);
        </code>
                </body>
            </function>
            <function name="SetRatio" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="cyLogical">
                    <type>int</type>
                </param>
                <param name="cyHimetric">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, int, int, int&gt;)(lpVtbl[<vtbl explicit="False">22</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="cyLogical">cyLogical</param>, <param name="cyHimetric">cyHimetric</param>);
        </code>
                </body>
            </function>
            <function name="QueryTextMetrics" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pTM">
                    <type>TEXTMETRICW*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, TEXTMETRICW*, int&gt;)(lpVtbl[<vtbl explicit="False">23</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="pTM">pTM</param>);
        </code>
                </body>
            </function>
            <function name="AddRefHfont" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="hFont">
                    <type>IntPtr</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, IntPtr, int&gt;)(lpVtbl[<vtbl explicit="False">24</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="hFont">hFont</param>);
        </code>
                </body>
            </function>
            <function name="ReleaseHfont" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="hFont">
                    <type>IntPtr</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, IntPtr, int&gt;)(lpVtbl[<vtbl explicit="False">25</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="hFont">hFont</param>);
        </code>
                </body>
            </function>
            <function name="SetHdc" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="hDC">
                    <type>IntPtr</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IFont*, IntPtr, int&gt;)(lpVtbl[<vtbl explicit="False">26</vtbl>]))(<param special="thisPtr">(IFont*)Unsafe.AsPointer(ref this)</param>, <param name="hDC">hDC</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
