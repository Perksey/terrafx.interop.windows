<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/OCIdl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IAdviseSinkEx" access="public" native="struct IAdviseSinkEx : IAdviseSink" uuid="3af24290-0c96-11ce-a0cf-00aa00600ab8" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAdviseSinkEx*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IAdviseSinkEx*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAdviseSinkEx*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IAdviseSinkEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAdviseSinkEx*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IAdviseSinkEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="OnDataChange" access="public" unsafe="true">
                <type>void</type>
                <param name="pFormatetc">
                    <type>FORMATETC*</type>
                </param>
                <param name="pStgmed">
                    <type>STGMEDIUM*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;IAdviseSinkEx*, FORMATETC*, STGMEDIUM*, void&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IAdviseSinkEx*)Unsafe.AsPointer(ref this)</param>, <param name="pFormatetc">pFormatetc</param>, <param name="pStgmed">pStgmed</param>);
        </code>
                </body>
            </function>
            <function name="OnViewChange" access="public" unsafe="true">
                <type>void</type>
                <param name="dwAspect">
                    <type>uint</type>
                </param>
                <param name="lindex">
                    <type>int</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;IAdviseSinkEx*, uint, int, void&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IAdviseSinkEx*)Unsafe.AsPointer(ref this)</param>, <param name="dwAspect">dwAspect</param>, <param name="lindex">lindex</param>);
        </code>
                </body>
            </function>
            <function name="OnRename" access="public" unsafe="true">
                <type>void</type>
                <param name="pmk">
                    <type>IMoniker*</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;IAdviseSinkEx*, IMoniker*, void&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IAdviseSinkEx*)Unsafe.AsPointer(ref this)</param>, <param name="pmk">pmk</param>);
        </code>
                </body>
            </function>
            <function name="OnSave" access="public" unsafe="true">
                <type>void</type>
                <body>
                    <code>((delegate* unmanaged&lt;IAdviseSinkEx*, void&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IAdviseSinkEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="OnClose" access="public" unsafe="true">
                <type>void</type>
                <body>
                    <code>((delegate* unmanaged&lt;IAdviseSinkEx*, void&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IAdviseSinkEx*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="OnViewStatusChange" access="public" unsafe="true">
                <type>void</type>
                <param name="dwViewStatus">
                    <type>uint</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;IAdviseSinkEx*, uint, void&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(IAdviseSinkEx*)Unsafe.AsPointer(ref this)</param>, <param name="dwViewStatus">dwViewStatus</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
