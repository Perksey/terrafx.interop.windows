<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/OCIdl.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IProvideMultipleClassInfo" access="public" native="struct IProvideMultipleClassInfo : IProvideClassInfo2" uuid="a7aba9c1-8983-11cf-8f20-00805f2cd064" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IProvideMultipleClassInfo*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IProvideMultipleClassInfo*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IProvideMultipleClassInfo*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IProvideMultipleClassInfo*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IProvideMultipleClassInfo*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IProvideMultipleClassInfo*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetClassInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ppTI">
                    <type>ITypeInfo**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IProvideMultipleClassInfo*, ITypeInfo**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IProvideMultipleClassInfo*)Unsafe.AsPointer(ref this)</param>, <param name="ppTI">ppTI</param>);
        </code>
                </body>
            </function>
            <function name="GetGUID" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dwGuidKind">
                    <type>uint</type>
                </param>
                <param name="pGUID">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IProvideMultipleClassInfo*, uint, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IProvideMultipleClassInfo*)Unsafe.AsPointer(ref this)</param>, <param name="dwGuidKind">dwGuidKind</param>, <param name="pGUID">pGUID</param>);
        </code>
                </body>
            </function>
            <function name="GetMultiTypeInfoCount" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pcti">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IProvideMultipleClassInfo*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IProvideMultipleClassInfo*)Unsafe.AsPointer(ref this)</param>, <param name="pcti">pcti</param>);
        </code>
                </body>
            </function>
            <function name="GetInfoOfIndex" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="iti">
                    <type>uint</type>
                </param>
                <param name="dwFlags">
                    <type>uint</type>
                </param>
                <param name="pptiCoClass">
                    <type>ITypeInfo**</type>
                </param>
                <param name="pdwTIFlags">
                    <type>uint*</type>
                </param>
                <param name="pcdispidReserved">
                    <type>uint*</type>
                </param>
                <param name="piidPrimary">
                    <type>Guid*</type>
                </param>
                <param name="piidSource">
                    <type>Guid*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IProvideMultipleClassInfo*, uint, uint, ITypeInfo**, uint*, uint*, Guid*, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IProvideMultipleClassInfo*)Unsafe.AsPointer(ref this)</param>, <param name="iti">iti</param>, <param name="dwFlags">dwFlags</param>, <param name="pptiCoClass">pptiCoClass</param>, <param name="pdwTIFlags">pdwTIFlags</param>, <param name="pcdispidReserved">pcdispidReserved</param>, <param name="piidPrimary">piidPrimary</param>, <param name="piidSource">piidSource</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
