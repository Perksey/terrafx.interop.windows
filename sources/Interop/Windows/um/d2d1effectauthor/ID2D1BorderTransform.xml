<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d2d1effectauthor.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ID2D1BorderTransform" access="public" native="struct ID2D1BorderTransform : ID2D1ConcreteTransform" uuid="4998735c-3a19-473c-9781-656847e3a347" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1BorderTransform*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ID2D1BorderTransform*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1BorderTransform*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ID2D1BorderTransform*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1BorderTransform*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ID2D1BorderTransform*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetInputCount" access="public" unsafe="true">
                <type native="UINT32">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1BorderTransform*, uint&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ID2D1BorderTransform*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetOutputBuffer" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="bufferPrecision">
                    <type>D2D1_BUFFER_PRECISION</type>
                </param>
                <param name="channelDepth">
                    <type>D2D1_CHANNEL_DEPTH</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1BorderTransform*, D2D1_BUFFER_PRECISION, D2D1_CHANNEL_DEPTH, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ID2D1BorderTransform*)Unsafe.AsPointer(ref this)</param>, <param name="bufferPrecision">bufferPrecision</param>, <param name="channelDepth">channelDepth</param>);
        </code>
                </body>
            </function>
            <function name="SetCached" access="public" unsafe="true">
                <type>void</type>
                <param name="isCached">
                    <type>int</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1BorderTransform*, int, void&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ID2D1BorderTransform*)Unsafe.AsPointer(ref this)</param>, <param name="isCached">isCached</param>);
        </code>
                </body>
            </function>
            <function name="SetExtendModeX" access="public" unsafe="true">
                <type>void</type>
                <param name="extendMode">
                    <type>D2D1_EXTEND_MODE</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1BorderTransform*, D2D1_EXTEND_MODE, void&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ID2D1BorderTransform*)Unsafe.AsPointer(ref this)</param>, <param name="extendMode">extendMode</param>);
        </code>
                </body>
            </function>
            <function name="SetExtendModeY" access="public" unsafe="true">
                <type>void</type>
                <param name="extendMode">
                    <type>D2D1_EXTEND_MODE</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1BorderTransform*, D2D1_EXTEND_MODE, void&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ID2D1BorderTransform*)Unsafe.AsPointer(ref this)</param>, <param name="extendMode">extendMode</param>);
        </code>
                </body>
            </function>
            <function name="GetExtendModeX" access="public" unsafe="true">
                <type>D2D1_EXTEND_MODE</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1BorderTransform*, D2D1_EXTEND_MODE&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ID2D1BorderTransform*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetExtendModeY" access="public" unsafe="true">
                <type>D2D1_EXTEND_MODE</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1BorderTransform*, D2D1_EXTEND_MODE&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ID2D1BorderTransform*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
