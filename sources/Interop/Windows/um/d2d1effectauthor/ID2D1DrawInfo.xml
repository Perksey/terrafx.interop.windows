<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d2d1effectauthor.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ID2D1DrawInfo" access="public" native="struct ID2D1DrawInfo : ID2D1RenderInfo" uuid="693ce632-7f2f-45de-93fe-18d88b37aa21" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1DrawInfo*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ID2D1DrawInfo*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1DrawInfo*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ID2D1DrawInfo*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1DrawInfo*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ID2D1DrawInfo*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="SetInputDescription" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="inputIndex">
                    <type>uint</type>
                </param>
                <param name="inputDescription">
                    <type>D2D1_INPUT_DESCRIPTION</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1DrawInfo*, uint, D2D1_INPUT_DESCRIPTION, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ID2D1DrawInfo*)Unsafe.AsPointer(ref this)</param>, <param name="inputIndex">inputIndex</param>, <param name="inputDescription">inputDescription</param>);
        </code>
                </body>
            </function>
            <function name="SetOutputBuffer" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="bufferPrecision">
                    <type>D2D1_BUFFER_PRECISION</type>
                </param>
                <param name="channelDepth">
                    <type>D2D1_CHANNEL_DEPTH</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1DrawInfo*, D2D1_BUFFER_PRECISION, D2D1_CHANNEL_DEPTH, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ID2D1DrawInfo*)Unsafe.AsPointer(ref this)</param>, <param name="bufferPrecision">bufferPrecision</param>, <param name="channelDepth">channelDepth</param>);
        </code>
                </body>
            </function>
            <function name="SetCached" access="public" unsafe="true">
                <type>void</type>
                <param name="isCached">
                    <type>int</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1DrawInfo*, int, void&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ID2D1DrawInfo*)Unsafe.AsPointer(ref this)</param>, <param name="isCached">isCached</param>);
        </code>
                </body>
            </function>
            <function name="SetInstructionCountHint" access="public" unsafe="true">
                <type>void</type>
                <param name="instructionCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>((delegate* unmanaged&lt;ID2D1DrawInfo*, uint, void&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ID2D1DrawInfo*)Unsafe.AsPointer(ref this)</param>, <param name="instructionCount">instructionCount</param>);
        </code>
                </body>
            </function>
            <function name="SetPixelShaderConstantBuffer" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="buffer">
                    <type>byte*</type>
                </param>
                <param name="bufferCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1DrawInfo*, byte*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ID2D1DrawInfo*)Unsafe.AsPointer(ref this)</param>, <param name="buffer">buffer</param>, <param name="bufferCount">bufferCount</param>);
        </code>
                </body>
            </function>
            <function name="SetResourceTexture" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="textureIndex">
                    <type>uint</type>
                </param>
                <param name="resourceTexture">
                    <type>ID2D1ResourceTexture*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1DrawInfo*, uint, ID2D1ResourceTexture*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ID2D1DrawInfo*)Unsafe.AsPointer(ref this)</param>, <param name="textureIndex">textureIndex</param>, <param name="resourceTexture">resourceTexture</param>);
        </code>
                </body>
            </function>
            <function name="SetVertexShaderConstantBuffer" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="buffer">
                    <type>byte*</type>
                </param>
                <param name="bufferCount">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1DrawInfo*, byte*, uint, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ID2D1DrawInfo*)Unsafe.AsPointer(ref this)</param>, <param name="buffer">buffer</param>, <param name="bufferCount">bufferCount</param>);
        </code>
                </body>
            </function>
            <function name="SetPixelShader" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="shaderId">
                    <type>Guid*</type>
                </param>
                <param name="pixelOptions">
                    <type>D2D1_PIXEL_OPTIONS</type>
                    <init>
                        <code>D2D1_PIXEL_OPTIONS_NONE
        </code>
                    </init>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1DrawInfo*, Guid*, D2D1_PIXEL_OPTIONS, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ID2D1DrawInfo*)Unsafe.AsPointer(ref this)</param>, <param name="shaderId">shaderId</param>, <param name="pixelOptions">pixelOptions</param>);
        </code>
                </body>
            </function>
            <function name="SetVertexProcessing" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="vertexBuffer">
                    <type>ID2D1VertexBuffer*</type>
                </param>
                <param name="vertexOptions">
                    <type>D2D1_VERTEX_OPTIONS</type>
                </param>
                <param name="blendDescription">
                    <type>D2D1_BLEND_DESCRIPTION*</type>
                    <init>
                        <code>null
        </code>
                    </init>
                </param>
                <param name="vertexRange">
                    <type>D2D1_VERTEX_RANGE*</type>
                    <init>
                        <code>null
        </code>
                    </init>
                </param>
                <param name="vertexShader">
                    <type>Guid*</type>
                    <init>
                        <code>null
        </code>
                    </init>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID2D1DrawInfo*, ID2D1VertexBuffer*, D2D1_VERTEX_OPTIONS, D2D1_BLEND_DESCRIPTION*, D2D1_VERTEX_RANGE*, Guid*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ID2D1DrawInfo*)Unsafe.AsPointer(ref this)</param>, <param name="vertexBuffer">vertexBuffer</param>, <param name="vertexOptions">vertexOptions</param>, <param name="blendDescription">blendDescription</param>, <param name="vertexRange">vertexRange</param>, <param name="vertexShader">vertexShader</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
