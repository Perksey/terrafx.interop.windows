<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/SystemMediaTransportControlsInterop.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ISystemMediaTransportControlsInterop" access="public" native="struct ISystemMediaTransportControlsInterop : IInspectable" uuid="ddb0472d-c911-4a1f-86d9-dc3d71a95f5a" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISystemMediaTransportControlsInterop*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ISystemMediaTransportControlsInterop*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISystemMediaTransportControlsInterop*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ISystemMediaTransportControlsInterop*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISystemMediaTransportControlsInterop*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ISystemMediaTransportControlsInterop*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetIids" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="iidCount">
                    <type>uint*</type>
                </param>
                <param name="iids">
                    <type>Guid**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISystemMediaTransportControlsInterop*, uint*, Guid**, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ISystemMediaTransportControlsInterop*)Unsafe.AsPointer(ref this)</param>, <param name="iidCount">iidCount</param>, <param name="iids">iids</param>);
        </code>
                </body>
            </function>
            <function name="GetRuntimeClassName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="className">
                    <type>IntPtr*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISystemMediaTransportControlsInterop*, IntPtr*, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ISystemMediaTransportControlsInterop*)Unsafe.AsPointer(ref this)</param>, <param name="className">className</param>);
        </code>
                </body>
            </function>
            <function name="GetTrustLevel" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="trustLevel">
                    <type>TrustLevel*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISystemMediaTransportControlsInterop*, TrustLevel*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ISystemMediaTransportControlsInterop*)Unsafe.AsPointer(ref this)</param>, <param name="trustLevel">trustLevel</param>);
        </code>
                </body>
            </function>
            <function name="GetForWindow" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="appWindow">
                    <type>IntPtr</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="mediaTransportControl">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISystemMediaTransportControlsInterop*, IntPtr, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ISystemMediaTransportControlsInterop*)Unsafe.AsPointer(ref this)</param>, <param name="appWindow">appWindow</param>, <param name="riid">riid</param>, <param name="mediaTransportControl">mediaTransportControl</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
