<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/sapi.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ISpeechRecoContext" access="public" native="struct ISpeechRecoContext : IDispatch" uuid="580aa49d-7e1e-4809-b8e2-57da806104b8" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetTypeInfoCount" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pctinfo">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="pctinfo">pctinfo</param>);
        </code>
                </body>
            </function>
            <function name="GetTypeInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="iTInfo">
                    <type>uint</type>
                </param>
                <param name="lcid">
                    <type>uint</type>
                </param>
                <param name="ppTInfo">
                    <type>ITypeInfo**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, uint, uint, ITypeInfo**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="iTInfo">iTInfo</param>, <param name="lcid">lcid</param>, <param name="ppTInfo">ppTInfo</param>);
        </code>
                </body>
            </function>
            <function name="GetIDsOfNames" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="rgszNames">
                    <type>ushort**</type>
                </param>
                <param name="cNames">
                    <type>uint</type>
                </param>
                <param name="lcid">
                    <type>uint</type>
                </param>
                <param name="rgDispId">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, Guid*, ushort**, uint, uint, int*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="rgszNames">rgszNames</param>, <param name="cNames">cNames</param>, <param name="lcid">lcid</param>, <param name="rgDispId">rgDispId</param>);
        </code>
                </body>
            </function>
            <function name="Invoke" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dispIdMember">
                    <type>int</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="lcid">
                    <type>uint</type>
                </param>
                <param name="wFlags">
                    <type>ushort</type>
                </param>
                <param name="pDispParams">
                    <type>DISPPARAMS*</type>
                </param>
                <param name="pVarResult">
                    <type>VARIANT*</type>
                </param>
                <param name="pExcepInfo">
                    <type>EXCEPINFO*</type>
                </param>
                <param name="puArgErr">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, int, Guid*, uint, ushort, DISPPARAMS*, VARIANT*, EXCEPINFO*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="dispIdMember">dispIdMember</param>, <param name="riid">riid</param>, <param name="lcid">lcid</param>, <param name="wFlags">wFlags</param>, <param name="pDispParams">pDispParams</param>, <param name="pVarResult">pVarResult</param>, <param name="pExcepInfo">pExcepInfo</param>, <param name="puArgErr">puArgErr</param>);
        </code>
                </body>
            </function>
            <function name="get_Recognizer" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Recognizer">
                    <type>ISpeechRecognizer**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, ISpeechRecognizer**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="Recognizer">Recognizer</param>);
        </code>
                </body>
            </function>
            <function name="get_AudioInputInterferenceStatus" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Interference">
                    <type>SpeechInterference*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, SpeechInterference*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="Interference">Interference</param>);
        </code>
                </body>
            </function>
            <function name="get_RequestedUIType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="UIType">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="UIType">UIType</param>);
        </code>
                </body>
            </function>
            <function name="putref_Voice" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Voice">
                    <type>ISpeechVoice*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, ISpeechVoice*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="Voice">Voice</param>);
        </code>
                </body>
            </function>
            <function name="get_Voice" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Voice">
                    <type>ISpeechVoice**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, ISpeechVoice**, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="Voice">Voice</param>);
        </code>
                </body>
            </function>
            <function name="put_AllowVoiceFormatMatchingOnNextSet" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Allow">
                    <type>short</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, short, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="Allow">Allow</param>);
        </code>
                </body>
            </function>
            <function name="get_AllowVoiceFormatMatchingOnNextSet" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pAllow">
                    <type>short*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, short*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="pAllow">pAllow</param>);
        </code>
                </body>
            </function>
            <function name="put_VoicePurgeEvent" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="EventInterest">
                    <type>SpeechRecoEvents</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, SpeechRecoEvents, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="EventInterest">EventInterest</param>);
        </code>
                </body>
            </function>
            <function name="get_VoicePurgeEvent" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="EventInterest">
                    <type>SpeechRecoEvents*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, SpeechRecoEvents*, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="EventInterest">EventInterest</param>);
        </code>
                </body>
            </function>
            <function name="put_EventInterests" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="EventInterest">
                    <type>SpeechRecoEvents</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, SpeechRecoEvents, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="EventInterest">EventInterest</param>);
        </code>
                </body>
            </function>
            <function name="get_EventInterests" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="EventInterest">
                    <type>SpeechRecoEvents*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, SpeechRecoEvents*, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="EventInterest">EventInterest</param>);
        </code>
                </body>
            </function>
            <function name="put_CmdMaxAlternates" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="MaxAlternates">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, int, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="MaxAlternates">MaxAlternates</param>);
        </code>
                </body>
            </function>
            <function name="get_CmdMaxAlternates" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="MaxAlternates">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">19</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="MaxAlternates">MaxAlternates</param>);
        </code>
                </body>
            </function>
            <function name="put_State" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="State">
                    <type>SpeechRecoContextState</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, SpeechRecoContextState, int&gt;)(lpVtbl[<vtbl explicit="False">20</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="State">State</param>);
        </code>
                </body>
            </function>
            <function name="get_State" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="State">
                    <type>SpeechRecoContextState*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, SpeechRecoContextState*, int&gt;)(lpVtbl[<vtbl explicit="False">21</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="State">State</param>);
        </code>
                </body>
            </function>
            <function name="put_RetainedAudio" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Option">
                    <type>SpeechRetainedAudioOptions</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, SpeechRetainedAudioOptions, int&gt;)(lpVtbl[<vtbl explicit="False">22</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="Option">Option</param>);
        </code>
                </body>
            </function>
            <function name="get_RetainedAudio" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Option">
                    <type>SpeechRetainedAudioOptions*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, SpeechRetainedAudioOptions*, int&gt;)(lpVtbl[<vtbl explicit="False">23</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="Option">Option</param>);
        </code>
                </body>
            </function>
            <function name="putref_RetainedAudioFormat" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Format">
                    <type>ISpeechAudioFormat*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, ISpeechAudioFormat*, int&gt;)(lpVtbl[<vtbl explicit="False">24</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="Format">Format</param>);
        </code>
                </body>
            </function>
            <function name="get_RetainedAudioFormat" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Format">
                    <type>ISpeechAudioFormat**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, ISpeechAudioFormat**, int&gt;)(lpVtbl[<vtbl explicit="False">25</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="Format">Format</param>);
        </code>
                </body>
            </function>
            <function name="Pause" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, int&gt;)(lpVtbl[<vtbl explicit="False">26</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Resume" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, int&gt;)(lpVtbl[<vtbl explicit="False">27</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="CreateGrammar" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="GrammarId">
                    <type>VARIANT</type>
                </param>
                <param name="Grammar">
                    <type>ISpeechRecoGrammar**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, VARIANT, ISpeechRecoGrammar**, int&gt;)(lpVtbl[<vtbl explicit="False">28</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="GrammarId">GrammarId</param>, <param name="Grammar">Grammar</param>);
        </code>
                </body>
            </function>
            <function name="CreateResultFromMemory" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ResultBlock">
                    <type>VARIANT*</type>
                </param>
                <param name="Result">
                    <type>ISpeechRecoResult**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, VARIANT*, ISpeechRecoResult**, int&gt;)(lpVtbl[<vtbl explicit="False">29</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="ResultBlock">ResultBlock</param>, <param name="Result">Result</param>);
        </code>
                </body>
            </function>
            <function name="Bookmark" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Options">
                    <type>SpeechBookmarkOptions</type>
                </param>
                <param name="StreamPos">
                    <type>VARIANT</type>
                </param>
                <param name="BookmarkId">
                    <type>VARIANT</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, SpeechBookmarkOptions, VARIANT, VARIANT, int&gt;)(lpVtbl[<vtbl explicit="False">30</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="Options">Options</param>, <param name="StreamPos">StreamPos</param>, <param name="BookmarkId">BookmarkId</param>);
        </code>
                </body>
            </function>
            <function name="SetAdaptationData" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="AdaptationString">
                    <type>ushort*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoContext*, ushort*, int&gt;)(lpVtbl[<vtbl explicit="False">31</vtbl>]))(<param special="thisPtr">(ISpeechRecoContext*)Unsafe.AsPointer(ref this)</param>, <param name="AdaptationString">AdaptationString</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
