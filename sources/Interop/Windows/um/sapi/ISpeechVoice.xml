<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/sapi.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ISpeechVoice" access="public" native="struct ISpeechVoice : IDispatch" uuid="269316d8-57bd-11d2-9eee-00c04f797396" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetTypeInfoCount" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pctinfo">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="pctinfo">pctinfo</param>);
        </code>
                </body>
            </function>
            <function name="GetTypeInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="iTInfo">
                    <type>uint</type>
                </param>
                <param name="lcid">
                    <type>uint</type>
                </param>
                <param name="ppTInfo">
                    <type>ITypeInfo**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, uint, uint, ITypeInfo**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="iTInfo">iTInfo</param>, <param name="lcid">lcid</param>, <param name="ppTInfo">ppTInfo</param>);
        </code>
                </body>
            </function>
            <function name="GetIDsOfNames" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="rgszNames">
                    <type>ushort**</type>
                </param>
                <param name="cNames">
                    <type>uint</type>
                </param>
                <param name="lcid">
                    <type>uint</type>
                </param>
                <param name="rgDispId">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, Guid*, ushort**, uint, uint, int*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="rgszNames">rgszNames</param>, <param name="cNames">cNames</param>, <param name="lcid">lcid</param>, <param name="rgDispId">rgDispId</param>);
        </code>
                </body>
            </function>
            <function name="Invoke" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dispIdMember">
                    <type>int</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="lcid">
                    <type>uint</type>
                </param>
                <param name="wFlags">
                    <type>ushort</type>
                </param>
                <param name="pDispParams">
                    <type>DISPPARAMS*</type>
                </param>
                <param name="pVarResult">
                    <type>VARIANT*</type>
                </param>
                <param name="pExcepInfo">
                    <type>EXCEPINFO*</type>
                </param>
                <param name="puArgErr">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, int, Guid*, uint, ushort, DISPPARAMS*, VARIANT*, EXCEPINFO*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="dispIdMember">dispIdMember</param>, <param name="riid">riid</param>, <param name="lcid">lcid</param>, <param name="wFlags">wFlags</param>, <param name="pDispParams">pDispParams</param>, <param name="pVarResult">pVarResult</param>, <param name="pExcepInfo">pExcepInfo</param>, <param name="puArgErr">puArgErr</param>);
        </code>
                </body>
            </function>
            <function name="get_Status" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Status">
                    <type>ISpeechVoiceStatus**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, ISpeechVoiceStatus**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="Status">Status</param>);
        </code>
                </body>
            </function>
            <function name="get_Voice" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Voice">
                    <type>ISpeechObjectToken**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, ISpeechObjectToken**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="Voice">Voice</param>);
        </code>
                </body>
            </function>
            <function name="putref_Voice" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Voice">
                    <type>ISpeechObjectToken*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, ISpeechObjectToken*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="Voice">Voice</param>);
        </code>
                </body>
            </function>
            <function name="get_AudioOutput" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="AudioOutput">
                    <type>ISpeechObjectToken**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, ISpeechObjectToken**, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="AudioOutput">AudioOutput</param>);
        </code>
                </body>
            </function>
            <function name="putref_AudioOutput" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="AudioOutput">
                    <type>ISpeechObjectToken*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, ISpeechObjectToken*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="AudioOutput">AudioOutput</param>);
        </code>
                </body>
            </function>
            <function name="get_AudioOutputStream" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="AudioOutputStream">
                    <type>ISpeechBaseStream**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, ISpeechBaseStream**, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="AudioOutputStream">AudioOutputStream</param>);
        </code>
                </body>
            </function>
            <function name="putref_AudioOutputStream" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="AudioOutputStream">
                    <type>ISpeechBaseStream*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, ISpeechBaseStream*, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="AudioOutputStream">AudioOutputStream</param>);
        </code>
                </body>
            </function>
            <function name="get_Rate" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Rate">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="Rate">Rate</param>);
        </code>
                </body>
            </function>
            <function name="put_Rate" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Rate">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, int, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="Rate">Rate</param>);
        </code>
                </body>
            </function>
            <function name="get_Volume" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Volume">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="Volume">Volume</param>);
        </code>
                </body>
            </function>
            <function name="put_Volume" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Volume">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, int, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="Volume">Volume</param>);
        </code>
                </body>
            </function>
            <function name="put_AllowAudioOutputFormatChangesOnNextSet" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Allow">
                    <type>short</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, short, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="Allow">Allow</param>);
        </code>
                </body>
            </function>
            <function name="get_AllowAudioOutputFormatChangesOnNextSet" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Allow">
                    <type>short*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, short*, int&gt;)(lpVtbl[<vtbl explicit="False">19</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="Allow">Allow</param>);
        </code>
                </body>
            </function>
            <function name="get_EventInterests" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="EventInterestFlags">
                    <type>SpeechVoiceEvents*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, SpeechVoiceEvents*, int&gt;)(lpVtbl[<vtbl explicit="False">20</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="EventInterestFlags">EventInterestFlags</param>);
        </code>
                </body>
            </function>
            <function name="put_EventInterests" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="EventInterestFlags">
                    <type>SpeechVoiceEvents</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, SpeechVoiceEvents, int&gt;)(lpVtbl[<vtbl explicit="False">21</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="EventInterestFlags">EventInterestFlags</param>);
        </code>
                </body>
            </function>
            <function name="put_Priority" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Priority">
                    <type>SpeechVoicePriority</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, SpeechVoicePriority, int&gt;)(lpVtbl[<vtbl explicit="False">22</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="Priority">Priority</param>);
        </code>
                </body>
            </function>
            <function name="get_Priority" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Priority">
                    <type>SpeechVoicePriority*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, SpeechVoicePriority*, int&gt;)(lpVtbl[<vtbl explicit="False">23</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="Priority">Priority</param>);
        </code>
                </body>
            </function>
            <function name="put_AlertBoundary" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Boundary">
                    <type>SpeechVoiceEvents</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, SpeechVoiceEvents, int&gt;)(lpVtbl[<vtbl explicit="False">24</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="Boundary">Boundary</param>);
        </code>
                </body>
            </function>
            <function name="get_AlertBoundary" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Boundary">
                    <type>SpeechVoiceEvents*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, SpeechVoiceEvents*, int&gt;)(lpVtbl[<vtbl explicit="False">25</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="Boundary">Boundary</param>);
        </code>
                </body>
            </function>
            <function name="put_SynchronousSpeakTimeout" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="msTimeout">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, int, int&gt;)(lpVtbl[<vtbl explicit="False">26</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="msTimeout">msTimeout</param>);
        </code>
                </body>
            </function>
            <function name="get_SynchronousSpeakTimeout" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="msTimeout">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">27</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="msTimeout">msTimeout</param>);
        </code>
                </body>
            </function>
            <function name="Speak" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Text">
                    <type>ushort*</type>
                </param>
                <param name="Flags">
                    <type>SpeechVoiceSpeakFlags</type>
                </param>
                <param name="StreamNumber">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, ushort*, SpeechVoiceSpeakFlags, int*, int&gt;)(lpVtbl[<vtbl explicit="False">28</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="Text">Text</param>, <param name="Flags">Flags</param>, <param name="StreamNumber">StreamNumber</param>);
        </code>
                </body>
            </function>
            <function name="SpeakStream" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Stream">
                    <type>ISpeechBaseStream*</type>
                </param>
                <param name="Flags">
                    <type>SpeechVoiceSpeakFlags</type>
                </param>
                <param name="StreamNumber">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, ISpeechBaseStream*, SpeechVoiceSpeakFlags, int*, int&gt;)(lpVtbl[<vtbl explicit="False">29</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="Stream">Stream</param>, <param name="Flags">Flags</param>, <param name="StreamNumber">StreamNumber</param>);
        </code>
                </body>
            </function>
            <function name="Pause" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, int&gt;)(lpVtbl[<vtbl explicit="False">30</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Resume" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, int&gt;)(lpVtbl[<vtbl explicit="False">31</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Skip" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Type">
                    <type>ushort*</type>
                </param>
                <param name="NumItems">
                    <type>int</type>
                </param>
                <param name="NumSkipped">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, ushort*, int, int*, int&gt;)(lpVtbl[<vtbl explicit="False">32</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="Type">Type</param>, <param name="NumItems">NumItems</param>, <param name="NumSkipped">NumSkipped</param>);
        </code>
                </body>
            </function>
            <function name="GetVoices" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="RequiredAttributes">
                    <type>ushort*</type>
                </param>
                <param name="OptionalAttributes">
                    <type>ushort*</type>
                </param>
                <param name="ObjectTokens">
                    <type>ISpeechObjectTokens**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, ushort*, ushort*, ISpeechObjectTokens**, int&gt;)(lpVtbl[<vtbl explicit="False">33</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="RequiredAttributes">RequiredAttributes</param>, <param name="OptionalAttributes">OptionalAttributes</param>, <param name="ObjectTokens">ObjectTokens</param>);
        </code>
                </body>
            </function>
            <function name="GetAudioOutputs" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="RequiredAttributes">
                    <type>ushort*</type>
                </param>
                <param name="OptionalAttributes">
                    <type>ushort*</type>
                </param>
                <param name="ObjectTokens">
                    <type>ISpeechObjectTokens**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, ushort*, ushort*, ISpeechObjectTokens**, int&gt;)(lpVtbl[<vtbl explicit="False">34</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="RequiredAttributes">RequiredAttributes</param>, <param name="OptionalAttributes">OptionalAttributes</param>, <param name="ObjectTokens">ObjectTokens</param>);
        </code>
                </body>
            </function>
            <function name="WaitUntilDone" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="msTimeout">
                    <type>int</type>
                </param>
                <param name="Done">
                    <type>short*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, int, short*, int&gt;)(lpVtbl[<vtbl explicit="False">35</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="msTimeout">msTimeout</param>, <param name="Done">Done</param>);
        </code>
                </body>
            </function>
            <function name="SpeakCompleteEvent" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Handle">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">36</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="Handle">Handle</param>);
        </code>
                </body>
            </function>
            <function name="IsUISupported" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="TypeOfUI">
                    <type>ushort*</type>
                </param>
                <param name="ExtraData">
                    <type>VARIANT*</type>
                </param>
                <param name="Supported">
                    <type>short*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, ushort*, VARIANT*, short*, int&gt;)(lpVtbl[<vtbl explicit="False">37</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="TypeOfUI">TypeOfUI</param>, <param name="ExtraData">ExtraData</param>, <param name="Supported">Supported</param>);
        </code>
                </body>
            </function>
            <function name="DisplayUI" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="hWndParent">
                    <type>int</type>
                </param>
                <param name="Title">
                    <type>ushort*</type>
                </param>
                <param name="TypeOfUI">
                    <type>ushort*</type>
                </param>
                <param name="ExtraData">
                    <type>VARIANT*</type>
                    <init>
                        <code>null
        </code>
                    </init>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechVoice*, int, ushort*, ushort*, VARIANT*, int&gt;)(lpVtbl[<vtbl explicit="False">38</vtbl>]))(<param special="thisPtr">(ISpeechVoice*)Unsafe.AsPointer(ref this)</param>, <param name="hWndParent">hWndParent</param>, <param name="Title">Title</param>, <param name="TypeOfUI">TypeOfUI</param>, <param name="ExtraData">ExtraData</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
