<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/sapi.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ISpeechRecoResultDispatch" access="public" native="struct ISpeechRecoResultDispatch : IDispatch" uuid="6d60eb64-aced-40a6-bbf3-4e557f71dee2" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetTypeInfoCount" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pctinfo">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>, <param name="pctinfo">pctinfo</param>);
        </code>
                </body>
            </function>
            <function name="GetTypeInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="iTInfo">
                    <type>uint</type>
                </param>
                <param name="lcid">
                    <type>uint</type>
                </param>
                <param name="ppTInfo">
                    <type>ITypeInfo**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, uint, uint, ITypeInfo**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>, <param name="iTInfo">iTInfo</param>, <param name="lcid">lcid</param>, <param name="ppTInfo">ppTInfo</param>);
        </code>
                </body>
            </function>
            <function name="GetIDsOfNames" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="rgszNames">
                    <type>ushort**</type>
                </param>
                <param name="cNames">
                    <type>uint</type>
                </param>
                <param name="lcid">
                    <type>uint</type>
                </param>
                <param name="rgDispId">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, Guid*, ushort**, uint, uint, int*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="rgszNames">rgszNames</param>, <param name="cNames">cNames</param>, <param name="lcid">lcid</param>, <param name="rgDispId">rgDispId</param>);
        </code>
                </body>
            </function>
            <function name="Invoke" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dispIdMember">
                    <type>int</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="lcid">
                    <type>uint</type>
                </param>
                <param name="wFlags">
                    <type>ushort</type>
                </param>
                <param name="pDispParams">
                    <type>DISPPARAMS*</type>
                </param>
                <param name="pVarResult">
                    <type>VARIANT*</type>
                </param>
                <param name="pExcepInfo">
                    <type>EXCEPINFO*</type>
                </param>
                <param name="puArgErr">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, int, Guid*, uint, ushort, DISPPARAMS*, VARIANT*, EXCEPINFO*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>, <param name="dispIdMember">dispIdMember</param>, <param name="riid">riid</param>, <param name="lcid">lcid</param>, <param name="wFlags">wFlags</param>, <param name="pDispParams">pDispParams</param>, <param name="pVarResult">pVarResult</param>, <param name="pExcepInfo">pExcepInfo</param>, <param name="puArgErr">puArgErr</param>);
        </code>
                </body>
            </function>
            <function name="get_RecoContext" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="RecoContext">
                    <type>ISpeechRecoContext**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, ISpeechRecoContext**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>, <param name="RecoContext">RecoContext</param>);
        </code>
                </body>
            </function>
            <function name="get_Times" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Times">
                    <type>ISpeechRecoResultTimes**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, ISpeechRecoResultTimes**, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>, <param name="Times">Times</param>);
        </code>
                </body>
            </function>
            <function name="putref_AudioFormat" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Format">
                    <type>ISpeechAudioFormat*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, ISpeechAudioFormat*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>, <param name="Format">Format</param>);
        </code>
                </body>
            </function>
            <function name="get_AudioFormat" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Format">
                    <type>ISpeechAudioFormat**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, ISpeechAudioFormat**, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>, <param name="Format">Format</param>);
        </code>
                </body>
            </function>
            <function name="get_PhraseInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="PhraseInfo">
                    <type>ISpeechPhraseInfo**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, ISpeechPhraseInfo**, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>, <param name="PhraseInfo">PhraseInfo</param>);
        </code>
                </body>
            </function>
            <function name="Alternates" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="RequestCount">
                    <type>int</type>
                </param>
                <param name="StartElement">
                    <type>int</type>
                </param>
                <param name="Elements">
                    <type>int</type>
                </param>
                <param name="Alternates">
                    <type>ISpeechPhraseAlternates**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, int, int, int, ISpeechPhraseAlternates**, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>, <param name="RequestCount">RequestCount</param>, <param name="StartElement">StartElement</param>, <param name="Elements">Elements</param>, <param name="Alternates">Alternates</param>);
        </code>
                </body>
            </function>
            <function name="Audio" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="StartElement">
                    <type>int</type>
                </param>
                <param name="Elements">
                    <type>int</type>
                </param>
                <param name="Stream">
                    <type>ISpeechMemoryStream**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, int, int, ISpeechMemoryStream**, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>, <param name="StartElement">StartElement</param>, <param name="Elements">Elements</param>, <param name="Stream">Stream</param>);
        </code>
                </body>
            </function>
            <function name="SpeakAudio" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="StartElement">
                    <type>int</type>
                </param>
                <param name="Elements">
                    <type>int</type>
                </param>
                <param name="Flags">
                    <type>SpeechVoiceSpeakFlags</type>
                </param>
                <param name="StreamNumber">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, int, int, SpeechVoiceSpeakFlags, int*, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>, <param name="StartElement">StartElement</param>, <param name="Elements">Elements</param>, <param name="Flags">Flags</param>, <param name="StreamNumber">StreamNumber</param>);
        </code>
                </body>
            </function>
            <function name="SaveToMemory" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ResultBlock">
                    <type>VARIANT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, VARIANT*, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>, <param name="ResultBlock">ResultBlock</param>);
        </code>
                </body>
            </function>
            <function name="DiscardResultInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="ValueTypes">
                    <type>SpeechDiscardType</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, SpeechDiscardType, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>, <param name="ValueTypes">ValueTypes</param>);
        </code>
                </body>
            </function>
            <function name="GetXMLResult" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Options">
                    <type>SPXMLRESULTOPTIONS</type>
                </param>
                <param name="pResult">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, SPXMLRESULTOPTIONS, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>, <param name="Options">Options</param>, <param name="pResult">pResult</param>);
        </code>
                </body>
            </function>
            <function name="GetXMLErrorInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="LineNumber">
                    <type>int*</type>
                </param>
                <param name="ScriptLine">
                    <type>ushort**</type>
                </param>
                <param name="Source">
                    <type>ushort**</type>
                </param>
                <param name="Description">
                    <type>ushort**</type>
                </param>
                <param name="ResultCode">
                    <type>int*</type>
                </param>
                <param name="IsError">
                    <type>short*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, int*, ushort**, ushort**, ushort**, int*, short*, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>, <param name="LineNumber">LineNumber</param>, <param name="ScriptLine">ScriptLine</param>, <param name="Source">Source</param>, <param name="Description">Description</param>, <param name="ResultCode">ResultCode</param>, <param name="IsError">IsError</param>);
        </code>
                </body>
            </function>
            <function name="SetTextFeedback" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Feedback">
                    <type>ushort*</type>
                </param>
                <param name="WasSuccessful">
                    <type>short</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechRecoResultDispatch*, ushort*, short, int&gt;)(lpVtbl[<vtbl explicit="False">19</vtbl>]))(<param special="thisPtr">(ISpeechRecoResultDispatch*)Unsafe.AsPointer(ref this)</param>, <param name="Feedback">Feedback</param>, <param name="WasSuccessful">WasSuccessful</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
