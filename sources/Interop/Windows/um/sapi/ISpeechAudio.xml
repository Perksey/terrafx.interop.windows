<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/sapi.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ISpeechAudio" access="public" native="struct ISpeechAudio : ISpeechBaseStream" uuid="cff8e175-019e-11d3-a08e-00c04f8ef9b5" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetTypeInfoCount" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pctinfo">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="pctinfo">pctinfo</param>);
        </code>
                </body>
            </function>
            <function name="GetTypeInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="iTInfo">
                    <type>uint</type>
                </param>
                <param name="lcid">
                    <type>uint</type>
                </param>
                <param name="ppTInfo">
                    <type>ITypeInfo**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, uint, uint, ITypeInfo**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="iTInfo">iTInfo</param>, <param name="lcid">lcid</param>, <param name="ppTInfo">ppTInfo</param>);
        </code>
                </body>
            </function>
            <function name="GetIDsOfNames" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="rgszNames">
                    <type>ushort**</type>
                </param>
                <param name="cNames">
                    <type>uint</type>
                </param>
                <param name="lcid">
                    <type>uint</type>
                </param>
                <param name="rgDispId">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, Guid*, ushort**, uint, uint, int*, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="rgszNames">rgszNames</param>, <param name="cNames">cNames</param>, <param name="lcid">lcid</param>, <param name="rgDispId">rgDispId</param>);
        </code>
                </body>
            </function>
            <function name="Invoke" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="dispIdMember">
                    <type>int</type>
                </param>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="lcid">
                    <type>uint</type>
                </param>
                <param name="wFlags">
                    <type>ushort</type>
                </param>
                <param name="pDispParams">
                    <type>DISPPARAMS*</type>
                </param>
                <param name="pVarResult">
                    <type>VARIANT*</type>
                </param>
                <param name="pExcepInfo">
                    <type>EXCEPINFO*</type>
                </param>
                <param name="puArgErr">
                    <type>uint*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, int, Guid*, uint, ushort, DISPPARAMS*, VARIANT*, EXCEPINFO*, uint*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="dispIdMember">dispIdMember</param>, <param name="riid">riid</param>, <param name="lcid">lcid</param>, <param name="wFlags">wFlags</param>, <param name="pDispParams">pDispParams</param>, <param name="pVarResult">pVarResult</param>, <param name="pExcepInfo">pExcepInfo</param>, <param name="puArgErr">puArgErr</param>);
        </code>
                </body>
            </function>
            <function name="get_Format" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="AudioFormat">
                    <type>ISpeechAudioFormat**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, ISpeechAudioFormat**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="AudioFormat">AudioFormat</param>);
        </code>
                </body>
            </function>
            <function name="putref_Format" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="AudioFormat">
                    <type>ISpeechAudioFormat*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, ISpeechAudioFormat*, int&gt;)(lpVtbl[<vtbl explicit="False">8</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="AudioFormat">AudioFormat</param>);
        </code>
                </body>
            </function>
            <function name="Read" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Buffer">
                    <type>VARIANT*</type>
                </param>
                <param name="NumberOfBytes">
                    <type>int</type>
                </param>
                <param name="BytesRead">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, VARIANT*, int, int*, int&gt;)(lpVtbl[<vtbl explicit="False">9</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="Buffer">Buffer</param>, <param name="NumberOfBytes">NumberOfBytes</param>, <param name="BytesRead">BytesRead</param>);
        </code>
                </body>
            </function>
            <function name="Write" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Buffer">
                    <type>VARIANT</type>
                </param>
                <param name="BytesWritten">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, VARIANT, int*, int&gt;)(lpVtbl[<vtbl explicit="False">10</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="Buffer">Buffer</param>, <param name="BytesWritten">BytesWritten</param>);
        </code>
                </body>
            </function>
            <function name="Seek" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Position">
                    <type>VARIANT</type>
                </param>
                <param name="Origin">
                    <type>SpeechStreamSeekPositionType</type>
                </param>
                <param name="NewPosition">
                    <type>VARIANT*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, VARIANT, SpeechStreamSeekPositionType, VARIANT*, int&gt;)(lpVtbl[<vtbl explicit="False">11</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="Position">Position</param>, <param name="Origin">Origin</param>, <param name="NewPosition">NewPosition</param>);
        </code>
                </body>
            </function>
            <function name="get_Status" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Status">
                    <type>ISpeechAudioStatus**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, ISpeechAudioStatus**, int&gt;)(lpVtbl[<vtbl explicit="False">12</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="Status">Status</param>);
        </code>
                </body>
            </function>
            <function name="get_BufferInfo" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="BufferInfo">
                    <type>ISpeechAudioBufferInfo**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, ISpeechAudioBufferInfo**, int&gt;)(lpVtbl[<vtbl explicit="False">13</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="BufferInfo">BufferInfo</param>);
        </code>
                </body>
            </function>
            <function name="get_DefaultFormat" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="StreamFormat">
                    <type>ISpeechAudioFormat**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, ISpeechAudioFormat**, int&gt;)(lpVtbl[<vtbl explicit="False">14</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="StreamFormat">StreamFormat</param>);
        </code>
                </body>
            </function>
            <function name="get_Volume" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Volume">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">15</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="Volume">Volume</param>);
        </code>
                </body>
            </function>
            <function name="put_Volume" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="Volume">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, int, int&gt;)(lpVtbl[<vtbl explicit="False">16</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="Volume">Volume</param>);
        </code>
                </body>
            </function>
            <function name="get_BufferNotifySize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="BufferNotifySize">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">17</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="BufferNotifySize">BufferNotifySize</param>);
        </code>
                </body>
            </function>
            <function name="put_BufferNotifySize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="BufferNotifySize">
                    <type>int</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, int, int&gt;)(lpVtbl[<vtbl explicit="False">18</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="BufferNotifySize">BufferNotifySize</param>);
        </code>
                </body>
            </function>
            <function name="get_EventHandle" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="EventHandle">
                    <type>int*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, int*, int&gt;)(lpVtbl[<vtbl explicit="False">19</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="EventHandle">EventHandle</param>);
        </code>
                </body>
            </function>
            <function name="SetState" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="State">
                    <type>SpeechAudioState</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ISpeechAudio*, SpeechAudioState, int&gt;)(lpVtbl[<vtbl explicit="False">20</vtbl>]))(<param special="thisPtr">(ISpeechAudio*)Unsafe.AsPointer(ref this)</param>, <param name="State">State</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
