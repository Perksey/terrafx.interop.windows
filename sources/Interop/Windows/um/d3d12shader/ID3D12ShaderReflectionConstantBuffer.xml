<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d3d12shader.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ID3D12ShaderReflectionConstantBuffer" access="public" uuid="c59598b4-48b3-4869-b9b1-b1618b14a8b7" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="GetDesc" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDesc">
                    <type>D3D12_SHADER_BUFFER_DESC*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12ShaderReflectionConstantBuffer*, D3D12_SHADER_BUFFER_DESC*, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ID3D12ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>);
        </code>
                </body>
            </function>
            <function name="GetVariableByIndex" access="public" unsafe="true">
                <type native="ID3D12ShaderReflectionVariable *">ID3D12ShaderReflectionVariable*</type>
                <param name="Index">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12ShaderReflectionConstantBuffer*, uint, ID3D12ShaderReflectionVariable*&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ID3D12ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref this)</param>, <param name="Index">Index</param>);
        </code>
                </body>
            </function>
            <function name="GetVariableByName" access="public" unsafe="true">
                <type native="ID3D12ShaderReflectionVariable *">ID3D12ShaderReflectionVariable*</type>
                <param name="Name">
                    <type>sbyte*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12ShaderReflectionConstantBuffer*, sbyte*, ID3D12ShaderReflectionVariable*&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ID3D12ShaderReflectionConstantBuffer*)Unsafe.AsPointer(ref this)</param>, <param name="Name">Name</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
