<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/d3d12shader.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="ID3D12ShaderReflectionVariable" access="public" uuid="8337a8a6-a216-444a-b2f4-314733a73aea" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="GetDesc" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="pDesc">
                    <type>D3D12_SHADER_VARIABLE_DESC*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12ShaderReflectionVariable*, D3D12_SHADER_VARIABLE_DESC*, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(ID3D12ShaderReflectionVariable*)Unsafe.AsPointer(ref this)</param>, <param name="pDesc">pDesc</param>);
        </code>
                </body>
            </function>
            <function name="GetType" access="public" unsafe="true">
                <type native="ID3D12ShaderReflectionType *">ID3D12ShaderReflectionType*</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12ShaderReflectionVariable*, ID3D12ShaderReflectionType*&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(ID3D12ShaderReflectionVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetBuffer" access="public" unsafe="true">
                <type native="ID3D12ShaderReflectionConstantBuffer *">ID3D12ShaderReflectionConstantBuffer*</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12ShaderReflectionVariable*, ID3D12ShaderReflectionConstantBuffer*&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(ID3D12ShaderReflectionVariable*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetInterfaceSlot" access="public" unsafe="true">
                <type native="UINT">uint</type>
                <param name="uArrayIndex">
                    <type>uint</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;ID3D12ShaderReflectionVariable*, uint, uint&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(ID3D12ShaderReflectionVariable*)Unsafe.AsPointer(ref this)</param>, <param name="uArrayIndex">uArrayIndex</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
