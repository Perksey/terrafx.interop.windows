<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<bindings>
    <comment>
        // Copyright © Tanner Gooding and Contributors. Licensed under the MIT License (MIT). See License.md in the repository root for more information.
        
        // Ported from um/AppxPackaging.h in the Windows SDK for Windows 10.0.19041.0
        // Original source is Copyright © Microsoft. All rights reserved.
        
    </comment>
    <namespace name="TerraFX.Interop">
        <struct name="IAppxFile" access="public" native="struct IAppxFile : IUnknown" uuid="91df827b-94fd-468f-827b-57f41b2f6f2e" vtbl="true" unsafe="true">
            <field name="lpVtbl" access="public">
                <type native="">void**</type>
            </field>
            <function name="QueryInterface" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="riid">
                    <type>Guid*</type>
                </param>
                <param name="ppvObject">
                    <type>void**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAppxFile*, Guid*, void**, int&gt;)(lpVtbl[<vtbl explicit="False">0</vtbl>]))(<param special="thisPtr">(IAppxFile*)Unsafe.AsPointer(ref this)</param>, <param name="riid">riid</param>, <param name="ppvObject">ppvObject</param>);
        </code>
                </body>
            </function>
            <function name="AddRef" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAppxFile*, uint&gt;)(lpVtbl[<vtbl explicit="False">1</vtbl>]))(<param special="thisPtr">(IAppxFile*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="Release" access="public" unsafe="true">
                <type native="ULONG">uint</type>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAppxFile*, uint&gt;)(lpVtbl[<vtbl explicit="False">2</vtbl>]))(<param special="thisPtr">(IAppxFile*)Unsafe.AsPointer(ref this)</param>);
        </code>
                </body>
            </function>
            <function name="GetCompressionOption" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="compressionOption">
                    <type>APPX_COMPRESSION_OPTION*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAppxFile*, APPX_COMPRESSION_OPTION*, int&gt;)(lpVtbl[<vtbl explicit="False">3</vtbl>]))(<param special="thisPtr">(IAppxFile*)Unsafe.AsPointer(ref this)</param>, <param name="compressionOption">compressionOption</param>);
        </code>
                </body>
            </function>
            <function name="GetContentType" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="contentType">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAppxFile*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">4</vtbl>]))(<param special="thisPtr">(IAppxFile*)Unsafe.AsPointer(ref this)</param>, <param name="contentType">contentType</param>);
        </code>
                </body>
            </function>
            <function name="GetName" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="fileName">
                    <type>ushort**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAppxFile*, ushort**, int&gt;)(lpVtbl[<vtbl explicit="False">5</vtbl>]))(<param special="thisPtr">(IAppxFile*)Unsafe.AsPointer(ref this)</param>, <param name="fileName">fileName</param>);
        </code>
                </body>
            </function>
            <function name="GetSize" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="size">
                    <type>ulong*</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAppxFile*, ulong*, int&gt;)(lpVtbl[<vtbl explicit="False">6</vtbl>]))(<param special="thisPtr">(IAppxFile*)Unsafe.AsPointer(ref this)</param>, <param name="size">size</param>);
        </code>
                </body>
            </function>
            <function name="GetStream" access="public" unsafe="true">
                <type native="HRESULT">int</type>
                <param name="stream">
                    <type>IStream**</type>
                </param>
                <body>
                    <code>return ((delegate* unmanaged&lt;IAppxFile*, IStream**, int&gt;)(lpVtbl[<vtbl explicit="False">7</vtbl>]))(<param special="thisPtr">(IAppxFile*)Unsafe.AsPointer(ref this)</param>, <param name="stream">stream</param>);
        </code>
                </body>
            </function>
        </struct>
    </namespace>
</bindings>
